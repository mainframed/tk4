MACR     TITLE 'MACRO DEFINITIONS'
         MACRO ,
&L       RPUSH &R1,&R2
         LCLC  &X
         AIF   ('&R1' NE '').GO
         MNOTE 12,'*** R1 PARAMTER MISSING ***'
         MEXIT ,
.GO      ANOP  ,
&X       SETC  '&R2'
         AIF   ('&R2' NE '').R2SET
&X       SETC  '&R1'
.R2SET   ANOP  ,
&L       STM   &R1,&X,4(R13)
         ST    R13,(((16+&X-&R1)-(16+&X-&R1)/16*16)+2)*4(R13)
         LA    R13,(((16+&X-&R1)-(16+&X-&R1)/16*16)+2)*4(R13)
         MEND  ,
         SPACE 3
         MACRO ,
&L       RPOP  &R1,&R2,&R3
         LCLC  &X
         AIF   ('&R1' NE '').GO
         MNOTE 12,'*** R1 PARAMTER MISSING ***'
         MEXIT ,
.GO      ANOP  ,
&X       SETC  '&R2'
         AIF   ('&R2' NE '').R2SET
&X       SETC  '&R1'
.R2SET   ANOP  ,
&L       L     R13,0(R13)
         AIF   ('&R3' EQ '').OLD
         LM    &R1,&X,(((16+&R1-&R3)-(16+&R1-&R3)/16*16)+1)*4(R13)
         AGO   .EXIT
.OLD     LM    &R1,&X,4(R13)
.EXIT    ANOP  ,
         MEND  ,
         SPACE 3
         MACRO ,
&L       PRMSG &WHAT,&LEN
&L       LA    RZ,&WHAT
         LA    R2,&LEN
         BAL   RRET,PRNT
         MEND  ,
         SPACE 5
         LCLB  &SNAP     SNAP DUMP DCB SWITCH                    081772
         LCLC  &SNAPNM   SNAP OPENLIST NAME                      081772
         SPACE 2                                                 081772
&SNAP    SETB  0       SET NO SNAP                               081772
         TITLE 'MAIN PROGRAM DESCRIPTION'
MACROREF CSECT ,
         SPACE 4
*    WRITTEN BY ED RUSSELL, FFA, DEC 1968.
*    MODIFIED AT SLAC DEC 1969 TO INCLUDE OPCODES CAPABILITY
*    MODIFIED JAN 1970 TO PROCESS MULTIPLE MACROS & SOURCE VAR SYMS
*    MODIFIED FEB/MAR 1970 TO RESTRUCTURE INTERNAL TABLES
*    MODIFIED MAR 1970 TO PROCESS PDS AND SEQ
*    MODIFIED AUG 1972 TO PROCESS ALL PDS MEMBERS                080172
*    MODIFIED JAN 1973 TO ELIM 2 DCBS OPEN FOR SAME DD (REL 21)  012273
*    FIXED OCT 1990 TO FIX 0C4 (PARM TEST) AND 0C4 (&SNAP EQ 0)  90280
*    FIXED JUN 1991 TO EXTRACT CORRECT SYMBOL NAMES - ERROR IN CODE
*        LOOKING FOR DELIMITER - INCLUDES UNKNOWNS (E.G. QUOTE)  91153
         SPACE 5
VERSION  EQU   C'3.1'                                            012273
         SPACE 5
*   THIS PROGRAM READS MACRO DEFINITIONS FROM A PDS, LISTS THE MACRO
*        WITH ASSIGNED STATEMENT NUMBERS, AND PRODUCES A LABEL
*        CROSS-REFERENCE LIST FOR ALL VARIABLE SYMBOLS, SEQUENCE
*        SYMBOLS AND INNER MACRO CALLS SIMILAR TO THE CROSS-REFERENCE
*        PRODUCED BY THE ASSEMBLER.
*        THE MEMBERS TO BE PROCESSED ARE SPECIFIED IN PARAMETER CARDS
*        IN THE SYSIN DATA SET FOLLOWING THE KEYWORD 'MEMBER='.
*   VARIABLE SYMBOLS ARE CONSIDERED DEFINED WHEN THEY APPEAR IN A
*        PROTOTYPE OR LCL/GBL STATEMENTS.  SEQUENCE SYMBOLS ARE
*        CONSIDERED DEFINED WHEN THEY OCCUR IN THE NAME FIELD OF A
*        STATEMENT.  REFERENCES TO VARIABLE SYMBOLS ARE EXTRACTED
*        FROM ANY NON-COMMENT STATEMENT.  REFERENCES TO SEQUENCE
*        SYMBOLS ARE EXTRACTED ONLY FROM 'AIF' & 'AGO' STATEMENTS.
*   DD CARDS REQUIRED AS FOLLOWS:
*       SYSIN    DEFINES THE CONTROL CARD DATA SET
*       SYSPRINT DEFINES THE OUTPUT DATA SET.  BLKSIZE MAY BE
*                SPECIFIED AND MUST BE A MULTIPLE OF 121.  ASA
*                CONTROL CHARACTERS ARE USED.
*      LIBRARY  DEFINES THE MACRO DATA SET TO BE PROCESSED.
*       SYSUT1   DEFINES A WORK DATA SET ON DISK.  THE EXACT
*                AMOUNT OF SPACE REQUIRED WILL VARY.  THE WORST CASE
*                WOULD BE A LARGE MACRO (MANY SYMBOLS AND REFERENCES)
*                PROCESSED IN A SMALL PARTITION (40K OR LESS) WHICH
*                MIGHT REQUIRE UP TO 15 (2314) TRACKS.  NORMALLY, A
*                MINIMUM OF 5 TRACKS SHOULD BE ALLOCATED.
         EJECT ,
         SPACE 6
**  A TABLE AREA IS OBTAINED AND DIVIDED AS FOLLOWS:
*
*  POINTER     TABLE
*  -------     -----
*             *********************************************************
* STACKPTR---->  REGISTER SAVE AREA STACK CONTROLLED VIA THE RPUSH AND*
*             *    RPOP MACROS DEFINED ABOVE.                         *
*             *  IF THE ENTIRE PDS IS TO BE PROCESSED THE STACK  080172
*             *    IS FOLLOWED BY A LIST OF MEMBER NAMES FROM    080172
*             *    THE DIRECTORY.                                080172
*             *********************************************************
* GETMAIN----->  SECTION 1 CONTAINS DEFINITION ENTRIES FOR ALL        *
*             *     SYMBOLS TO BE CROSS REFERENCED.                   *
*             *     THE TABLE MUST BE ABLE TO HOLD THIS SECTION.      *
*             *********************************************************
* LOAVAIL----->  ANY UNUSED TABLE SPACE IS LEFT HERE AND IS ALLOCATED *
*             *     DYNAMICALLY TO SECTIONS 1 AND 2 AS REQUIRED.      *
*             *********************************************************
* HIAVAIL----->  SECTION 2 CONTAINS GROUPS OF REFERENCES TO SYMBOLS.  *
*             *     EACH GROUP OF REFERENCES IS 80 BYTES LONG AND     *
*             *     HOLDS 40 REFERENCES TO A GIVEN SYMBOL.            *
*             *     IF THE TABLE IS TOO SMALL TO HOLD THE REFERENCE   *
*             *     GROUPS, THIS SECTION IS KEPT IN SYSUT1.           *
*             *********************************************************
* GETMAIN+4--->                                                       *
*             *********************************************************
*
         TITLE 'DEFINITIONS'
***
*****  REGISTERS
***
RZ       EQU   0     **
R1       EQU   1     **  AREA/TRT ARG
R2       EQU   2     **  LENGTH/TRT FUNCT
RRET     EQU   3     **  SUBRTN RETURN REG
RE       EQU   4         EVEN WK REG
RO       EQU   RE+1      ODD WK REG
RACC     EQU   6         ACCUM REG
RPTL     EQU   7         LO PTR REG   (CURR ENT IN SYM TABL)
RWK      EQU   8         WK REG
RSRWK    EQU   9         SUBROUTINE WK REG
RREC     EQU   10        CURRENT RECORD PTR
RB2      EQU   11        SECOND BASE REGISTER
RB       EQU   12    **  BASE REG
R13      EQU   13   **
R14      EQU   14    **
R15      EQU   15    **
RHISV    EQU   RPTL      HIGHEST REG TO BE SAVED NORMALLY
RALL     EQU   10        HIGHEST REG TO BE SAVED IN ALL CASES
         SPACE 6
***  EQU STATEMENTS
*
EQEQ     EQU   C'='
EQLP     EQU   C'('
EQCMM    EQU   C','
EQBLK    EQU   C' '
EQRP     EQU   C')'
EQA      EQU   C'A'
EQC      EQU   C'C'
EQM      EQU   C'M'
EQAMP    EQU   C'&&'
EQQT     EQU   C''''
EQAST    EQU   C'*'
EQPER    EQU   C'.'
EQPLUS   EQU   C'+'
EQMINUS  EQU   C'-'
EQSLSH   EQU   C'/'
EQDECBA  EQU   12        DECB OFFSET FOR BUFFER
EQDECBI  EQU   16        DECB OFFSET FOR IOB
EQIOBRES EQU   14        IOB OFFSET FOR CSW RESIDUE COUNT
EQJFDSN  EQU   0         JFCB OFFSET FOR DSNAME
EQJFVOL  EQU   118       JFCB OFFSET FOR VOL SER
EQJFMEMB EQU   44        JFCB OFFSET FOR MEMBER NAME
EQJFSZ   EQU   176       JFCB SIZE (TO NXT HIGHER DBL WORD IF NEC)
EQDSCBDO EQU   EQJFSZ+38 DSCB1 OFFSET FOR DSORG
EQPO     EQU   X'02'     DSORG=PO BIT
EQPS     EQU   X'40'     DSORG=PS BIT
EQRECFMU EQU   X'C0'     RECFM=U  BITS                           073172
EQUR     EQU   X'08'     UCB DEVTYPE FOR UNIT REC
EQMT     EQU   X'80'     UCB DEVTYPE FOR MAG TAPE
EQDA     EQU   X'20'     UCB DEVTYPE FOR DIRECT ACCESS
OUTLRECL EQU   121                 OUTPUT RECORD LENGTH
WKBLKSZ  EQU   80                  BLOCK SIZE FOR SYSUT1
WKKEYLN  EQU   8                   MAX SIZE OF A SYMBOL
B        EQU   X'F0'               TO MAKE B/BR FROM NOP/NOPR
STACKSZ  EQU   300       SIZE OF SAVE AREA STACK                 073172
NOSYSVAR EQU   6         * NUMBER OF SYSTEM VARIABLES INCLUDED * 081872
         SPACE 4
***  PRINTER SPACING CONTROL CHARACTERS
*
HOF      EQU   C'1'                HEAD OF FORM
SS       EQU   X'40'               SINGLE SPACE
DS       EQU   C'0'                DOUBLE SPACE
TS       EQU   C'-'                TRIPLE SPACE
         SPACE 4
***  BCR MASKS
*
EQ       EQU   8         BCR EQ
         TITLE 'HOUSEKEEPING'
         PRINT NOGEN         SAVE A TREE                         90280
       SAVE    (14,12)
         BALR  RB,0
       USING   *,RB     *****
         LA    RB2,4094(RB)        SECOND BASE REG
       USING   *+4090,RB2     ***************
         LR    RWK,R13
         LR    R13,R15             USE FIRST PART OF PGM AS TEMP SA
         ST    RWK,4(R13)
         ST    R13,8(RWK)
**  CHECK PARM FIELD
         L     R1,0(R1)            PARM PTR
         LTR   R1,R1
         BZ    NOEXPARM
         LH    R15,0(R1)           PARM LENGTH
         LA    R1,2(R1)
PARMFLD  DS    0H
         LTR   R15,R15
         BNP   NOEXPARM
         LA    RWK,L'KNEST                                       90280
         CR    RWK,R15       LONG ENOUGH FOR PARM ?              90280
         BH    NONEST        NO; AVOID 0C4                       90280
         CLC   KNEST,0(R1)         Q. PARM=NEST?
         BNE   NONEST              NO
         OI    NESTSW,NESTPARM     FLAG 'PARM=NEST' IN PROGRESS
         LA    RWK,1(,RWK)   ALLOW FOR COMMA SEPARATOR           90280
NEXTPARM DS    0H                  GET TO NEXT PARM ENTRY
         SR    R15,RWK
         AR    R1,RWK
         B     PARMFLD
NONEST   DS    0H
         AGO   .NOSRC                   BYPASS SECOND PARM VALUE
         LA    RWK,L'KSOURCE                                     90280
         CR    RWK,R15       LONG ENOUGH FOR PARM ?              90280
         BH    NONEST        NO; AVOID 0C4                       90280
         CLC   KSOURCE,0(R1)       Q. PARM=SOURCE?
         BNE   PARMSCAN                 NO
         LA    RKW,1(,RKW)   ALLOW FOR SEPARATING COMMA          90280
         B     NEXTPARM
.NOSRC   ANOP  ,
PARMSCAN DS    0H
         CLI   0(R1),EQCMM         SEARCH FOR NEXT VALUE
         LA    R1,1(R1)
         BCT   R15,*+8
         B     NOEXPARM
         BE    PARMFLD
         B     PARMSCAN
NOEXPARM DS    0H
      GETMAIN  R,LV=EQJFSZ+360     SPACE FOR JFCB AND DSCB1
         LR    RPTL,R1             ADDR OF SPACE
**  CHECK DEVICE TYPE TO DETERMINE IF PARTITIONED DS IS VALID
      DEVTYPE  IN+DCBDDNAM-IHADCB,WKD
         CLI   WKD+2,EQUR          IS IT UNIT REC?
         BE    USEBSAM             BR IF YES
         CLI   WKD+2,EQMT          IS IT MAG TAPE?
         BE    USEBSAM             BR IF YES
         CLI   WKD+2,EQDA          IS IT DIRECT ACCESS?
         BNE   INVDSORG            BR IF NO -- INVALID DEVTYPE
         SPACE 2
         ST    RPTL,WKD            CONSTRUCT EXLST FOR IN DCB
         MVI   WKD,X'87'           JFCB TYPE EXLST
      RDJFCB   (IN)
**  CONSTRUCT LIST FOR OBTAIN
         LA    RZ,EQJFDSN(RPTL)    DSNAME POINTER
         LA    R1,EQJFVOL(RPTL)    VOL SER POINTER
         LA    R2,EQJFSZ(RPTL)     OBTAIN WORK AREA
         STM   RZ,R2,DSCBLIST+4    CONSTRUCT OBTAIN LIST
      OBTAIN   DSCBLIST            GET DSCB1
         LTR   R15,R15             IF DSCB IS NOT AVAIL ---
         BNZ   ABEND               DON'T SCREW AROUND WITH IT
         SPACE 4
**  TEST DSORG FOR ACTUAL DATA SET AND SET DCB ACCORDINGLY
         TM    EQDSCBDO(RPTL),EQPS   TEST FOR DSORG=PS
         BO    USEBSAM
         TM    EQDSCBDO(RPTL),EQPO   TEST FOR DSORG=PO
         BO    DSISPO
**  DATA SET IS NEITHER PS NOR PO
INVDSORG DS    0H
         MVI   IN+DCBDSORG-IHADCB,0   CLEAR DSORG BITS TO FORCE ERROR
         MVI   IN+DCBDDNAM-IHADCB,EQAST FORCE D/S TO STAY CLOSED
         B     OPEN
         SPACE 2
**  DATA SET IS PO  -- TEST WHETHER MEMBER WAS SPECIFIED
DSISPO   DS    0H
         CLI   EQJFMEMB(RPTL),EQBLK
         BE    OPEN      BR IF NO MEMBER SPECIFIED IN JCL
         MVC   CURRMEMB,EQJFMEMB(RPTL)   GET MEMBER NAME         081772
         B     SETSEQ              OTHERWISE ACCESS MEMBER SEQ
         SPACE 2
**  ACCESS SEQUENTIALLY WITH BSAM
USEBSAM  DS    0H
         MVI   IN+DCBDSORG-IHADCB,EQPS
**  ACCESS IS SEQUENTIAL EVEN IF USING BPAM
SETSEQ   DS    0H
         OI    RDSW,RDSWSEQ        SET SEQUENTIAL ACCESS
         SPACE 3
OPEN     DS    0H
         XC    IN+DCBEXLST+1-IHADCB(3),IN+DCBEXLST+1-IHADCB  CLR EXLST
      FREEMAIN R,LV=EQJFSZ+360,A=(RPTL)
       OPEN    (FMTFILE,OUTPUT)                                  012273
         SPACE 3
***  FORMAT THE WORK DATA SET (SYSUT1) EXTENT
FORMAT   DS    0H
       WRITE   BSAM,SD,MF=E        WRITE DUMMY RECORDS
         LR    R2,R15              SAVE RETURN CODE
       CHECK   BSAM
         B     *+4(R2)
         B     FORMAT              NORMAL
         B     UPTRKCNT            END OF TRACK
         B     UPTRKCNT            END OF EXTENT
         B     FORMAT              CHECK IS ALREADY DONE
         SPACE 2
UPTRKCNT LH    RWK,TRKCNT          PREV TRACK COUNT
         LA    RWK,1(RWK)          +1
         STH   RWK,TRKCNT          NEW TRACK COUNT
         CH    R2,H8
         BNE   FORMAT              JUST END OF TRACK
         STH   RWK,WKFILE+DCBLIMCT+1-IHADCB  SET SYSUT1 LIMCT
       CLOSE   (FMTFILE,REREAD)                                  012273
         SPACE 4
      OPEN     MF=(E,OPENLIST)
       PUT     OUT
         ST    R1,OUTBFPTR
         MVI   OUTBFPTR,1          INDICATE NO HOF YET           081772
         LH    R15,SYSIN+DCBLRECL-IHADCB   GET INPUT RECORD LENGTH
         BCTR  R15,0               FOR MACHINE CODE
         STC   R15,MVPARM+1        STORE IN MVC COMMAND
         SR    RACC,RACC      INIT BLDL INDEX
      GETMAIN  VC,LA=GETMAIN,A=WKD,SP=4
         LM    RE,RO,WKD
         LA    RWK,1024            1K
         SLL   RWK,2               4K
         SR    RO,RWK              DECR AVAIL SPACE
         MVC   0(4,RE),4(R13)      MOVE SA PTR TO START OF STACK
         LR    R13,RE
         AR    RE,RO
         ST    RE,GETMAIN+4        UP BNDRY +1
         LR    R1,RE
      FREEMAIN R,LV=(RWK),A=(1),SP=4
         LA    RE,STACKSZ(R13)     START OF ACTUAL TABLE         073172
         ST    RE,GETMAIN
         ST    R13,STACKPTR        SAVE START OF SA STACK ADDR
         TM    NESTSW,NESTPARM     TEST PARM=NEST SPECIFIED
         BZ    GETPARM             BR IF NO
         TM    IN+DCBDSORG-IHADCB,EQPO     TEST DSORG=PO
         BO    GETPARM             BR IF YES
**  PARM=NEST IS INVALID FOR DSORG=PS
       PRMSG   ERRNONST,ERRNNSZ                                  081772
         NI    NESTSW,255-NESTPARM
         B     GETPARM
         SPACE 8
***  DCB EXIT FOR OUT (SYSPRINT) FILE
*
CHKBLKSI DS    0H
         LH    RWK,DCBLRECL-IHADCB(R1)
         LH    RO,DCBBLKSI-IHADCB(R1)
         SR    RE,RE
         DR    RE,RWK
**  IF QUOTIENT IS ZERO OR NEG USE BLKSIZE=LRECL
         LTR   RO,RO
         BNP   USELRECL
**  CHECK BLKSIZE IS EVEN MULTIPLE OF LRECL
         LTR   RE,RE
         BZ    CBSEXIT
**  BLKSIZE IS NOT EVEN MULTIPLE -- USE NEXT LOWER MULTIPLE
         MR    RE,RWK              LRECL*QUOTIENT
         B     NEWBLKSI
USELRECL LR    RO,RWK
NEWBLKSI STH   RO,DCBBLKSI-IHADCB(R1)
CBSEXIT  BR    R14
         SPACE 3                                                 080172
DSCBLIST CAMLST SEARCH,0,0,0                                     080172
         TITLE 'PHASE 1 -- PROCESS PARAMETERS'
******************************************************************
**                                                               *
*  'MEMBER' PARAMETER CARDS MAY BE OF EITHER OF TWO FORMATS:     *
*        MEMBER=XXXXXXXX,XXX                                     *
*        MEMBER=(XXXXXXXX,XXXXXXXX,XXX,XXXXX)                    *
*  'OPCODES' PARAMETER CARDS MAY CONTAIN EITHER OF THE FOLLOWING:*
*        OPCODES=DEC,FP,ASM,MI,ALL,(LIST) IN ANY COMBINATION   OR*
*        OPCODES=*   TO INDICATE A RESET                         *
**                                                               *
******************************************************************
GETPARM  DS    0H
         TM    DCBOFLGS-IHADCB+SYSIN,X'10'   OPEN DCB?           081772
         BZ    NOPARM              BR IF NOT                     081772
       GET     SYSIN
         LR    RREC,R1             RECORD ADDR
         BAL   RRET,LOCNBLK        FIND START OF PARMS
         BNZ   GETPARM             IF ITS BLANK FORGET IT
         LR    RWK,R1              SAVE ADDRESS
         LA    R2,EQEQ
         BAL   RRET,FINDCHAR       FIND '='
         LR    R2,R1               SAVE ADDR OF ERROR
         BNZ   CCERROR
         LA    R2,L'KMEMBER
         LR    RWK,R1
         SR    RWK,R2
         CLC   KMEMBER,0(RWK)      VERIFY 'MEMBER='
         BE    PMFND               PROCESS MEMBER PARMS
         LA    R2,L'KOPCODES-L'KMEMBER
         SR    RWK,R2
         CLC   KOPCODES,0(RWK)     VERIFY 'OPCODES='
         BE    POPS                PROCESS OPCODE LIST
         LR    R2,R1               ADDR OF ERROR
         B     CCERROR
         SPACE 3
***  PROCESS 'OPCODES' PARAMETER CARD
*
POPS     DS    0H
         NI    PARMSW,255-PRMSWOCT RESET OPCODES TRIGGER SWITCH
         LTR   RACC,RACC           IF MEMBERS HAVE NOT YET BEEN
         BNZ   SETENDL               PROC - GO DO IT NOW
         LR    RWK,R1              SAVE R1
         BAL   RRET,PRPARM         SET TO PRINT PARM
         EX    0,MVPARM
         BALR  RRET,RRET           PRINT IT
         LA    R1,1(RWK)           ACTUAL LIST AFTER =
         L     R15,NESTEP          NEST ENTRY
         SPACE 2
**  PROCESS OP CODE LIST
POPCDL   DS    0H
         TM    NESTSW,NESTOPPP     TEST PREV OP PARMS CONTIG
         BO    POP                 YES -- CONTINUE
         OI    NESTSW,NESTOPPP     INDICATE PROCESSING OP PARMS
         LA    RZ,12               GO RESET OPCODES
         BALR  R14,R15
         L     R15,NESTEP
POP      DS    0H
         LA    RZ,8
         BALR  R14,R15
         LTR   R15,R15             TEST VALID LIST
         BZ    GETPARM             YES
**  ERROR IN PARM RECORD - R15 HAS ADDR OF ERROR
         LR    R2,R15              ADDR OF ERROR
         B     CCERROR2
         SPACE 3
**  PROCESS 'MEMBER' PARAMETER CARD
*
PMFND    DS    0H
         LR    RWK,R1              SAVE R1
         BAL   RRET,PRPARM         SET TO PRINT PARM REC
         EX    0,MVPARM
         BALR  RRET,RRET           GO PRINT IT
         LR    R1,RWK              RESTORE R1
         TM    RDSW,RDSWSEQ        TEST IF MEMBER PARMS VALID
         BO    PMERR               BR IF NOT VALID
         TM    IN+DCBDSORG-IHADCB,EQPO     TEST IF DSORG=PO
         BZ    PMERR               BR IF NOT -- ERROR
         NI    NESTSW,255-NESTOPPP     OP PARMS NO LONGER IN PROC
         MVI   PARMSW,PRMSWNUL     SET FOR MULT PARMS
         CLI   1(R1),EQLP          Q '('
         LA    R1,2(R1)
         BE    PMEMB
         BCTR  R1,0                NO
PMEMB    DS    0H
         LR    RWK,R1
         LH    R15,SYSIN+DCBLRECL-IHADCB   INPUT RECORD LENGTH
         AR    R15,RREC            ADDR OF END OF RECORD
PRMBRFND DS    0H
         CR    RWK,R15
         BNL   PARMDLME
         CLI   0(RWK),EQCMM        ','
         BE    PARMDLIM
         CLI   0(RWK),EQBLK        ' '
         BE    PARMDLME
         CLI   0(RWK),EQRP         ')'
         BE    PARMDLME
         LA    RWK,1(RWK)
         B     PRMBRFND
         SPACE 3
PMERR    DS    0H
         LR    R2,R1               ADDR OF FLAG
         B     CCERROR2
         SPACE 4
**  CONTROL CARD ERROR ROUTINE
*
CCERROR  DS    0H
         BAL   RRET,PRPARM         READY TO PRINT ERROR REC
PP  EQU   5    ***********  PRINT PARM FORMAT  *****************
MVPARM   MVC   PP(00,R1),0(RREC)   LENGTH IS FILLED IN FROM DCB
         BALR  RRET,RRET           PRINT IT
CCERROR2 DS    0H
         BAL   RRET,PRPARM
         SR    R2,RREC             OFFSET FROM START OF REC
         LA    R2,PP(R2,R1)        ERROR FLAG ADDR
         MVI   0(R2),EQAST         ERROR FLAG
         BALR  RRET,RRET           PRINT ERROR FLAG
         BAL   RRET,PRPARM
         MVC   0(ERRCCSZ,R1),ERRCC  ERROR MSG
         BALR  RRET,RRET
         B     GETPARM
         SPACE 4
***  ROUTINE FOR PRINTING PARAMETER RECORDS
*
PRPARM   DS    0H
         L     R1,OUTBFPTR
         MVI   0(R1),EQBLK
         EX    0,PRCLR             CLEAR THE PRINT LINE
         CLI   OUTBFPTR,0          CHECK FIRST PARM ON PAGE
         BE    *+8                 NO                            081772
         MVI   0(R1),HOF           YES -- SKIP TO HOF
         BALR  RRET,RRET           EXIT TO USER
       PUT     OUT
         ST    R1,OUTBFPTR
         BR    RRET                EXIT
         SPACE 6
PARMDLME DS    0H
         OI    PARMSW,PRMSWEOR     END OF PARMS
PARMDLIM DS    0H
         LR    R2,RWK
         SR    R2,R1          LENGTH OF MEMBER NAME
         BZ    PMROOM              NULL NAME
         CH    R2,H8               Q .GT.8
         BH    PMERR               BAD MEMBER NAME
         BCTR  R2,0                NO
         LA    RWK,BLDLNM(RACC)
         MVC   CURRMEMB,KBLK8      PUT LEFT-JUSTIFIED
         MVC   CURRMEMB(0),0(R1)    INTO STORAGE AREA
         EX    R2,*-6                HERE
         LTR   RACC,RACC           IF FIRST ENTRY
         BZ    MVBLDLNM              GO ENTER IT
*   OTHER ENTRIES ALREADY MADE - ENTER IN SEQUENCE
         LR    R15,RWK             SAVE PTR
         LR    RO,RACC             COMPARAND
         LA    RE,BLDLSZ           INCREMENT
         SR    RO,RE               LAST PREV ENTRY INCR
         SR    RWK,RWK             INDEX
SRCHBLDL DS    0H
         LA    RPTL,BLDLNM(RWK)
         CLC   CURRMEMB,0(RPTL)
         BL    ENTBLDL             NEW ENT .LT. TBL ENT
         BE    PMROOM              NEW ENT .EQ. TBL ENT - SKIP IT
         BXLE  RWK,RE,SRCHBLDL     KEEP SEARCHING
         LR    RWK,R15             RESTORE POINTER
         B     ENTBLDL2            ENTER AT END OF TABLE
         SPACE 2
*   ENTER NAME HERE
ENTBLDL  DS    0H
         LA    RO,BLDLNM(RO)       LAST PREV ENTRY
SHFTBLDL DS    0H
         LA    RWK,0(RE,RO)        OPEN SPACE
         CR    RPTL,RO             Q. FINISHED?
         BH    ENTBLDL2            YES
         MVC   0(8,RWK),0(RO)      NO.  SHIFT ENTRY
         SR    RO,RE               DROP 1 ENTRY
         B     SHFTBLDL
         SPACE 2
*    READY TO ENTER NEW ENTRY
ENTBLDL2 DS    0H
MVBLDLNM DS    0H
         MVC   0(L'BLDLNM,RWK),CURRMEMB   ENTER NEW NAME         080172
**  INCR BLDL INDEX
         LA    RACC,BLDLSZ(RACC)
         LA    RWK,BLDLNM(RACC)
*   TEST ROOM FOR MORE MEMBERS
         CLI   0(RWK),X'FF'        PHYSICAL END OF BLDL LIST?    080172
*DEL*                                                            080172
         BE    PROCTHES            BR IF END OF TABLE
         B     PMROOM
         EJECT ,
***  RETURN HERE FROM PHASES 2 & 3 TO CONTINUE PARAMETER PROCESSING
*
STG1RET  DS    0H
         LR    RREC,RZ             RESTORE RREC
         SR    RACC,RACC
         MVI   OUTBFPTR,1          INDICATE HOF REQ'D            081872
*    MORE ROOM
PMROOM   DS    0H
         TM    PARMSW,PRMSWOCT     TEST OPCODES PARM IN PROCESS
         BO    POPS                BR IF YES
         TM    PARMSW,PRMSWEOR
         BO    GETPARM
*    MORE MEMBERS IN THIS CARD (LAST DELIM WAS COMMA)
         LA    R1,2(R1,R2)
         B     PMEMB
         SPACE 10
***  SYSIN DATA SET COULDN'T BE OPENED                           081772
*                                                                081772
NOPARM   DS    0H                                                081772
       PRMSG   ERRNOTOP,ERRNOPSZ                                 081772
***  END OF SYSIN  ***
*
ENDPARM  DS    0H
         MVI   PARMSW,PRMSWEOF
SETENDL  DS    0H
         OI    PARMSW,PRMSWOCT     SET OPCODES PARM SW JUST IN CASE
         LA    RWK,BLDLNM(RACC)
         MVI   0(RWK),X'FF'        FLAG END OF BLDL
         TITLE 'PHASE 1 -- PROCESS MEMBER LIST'
***  PROCESS THESE MEMBERS  ***
*
PROCTHES DS    0H
*DEL*                                                            073172
*DEL*                                                            073172
         LA    R15,STG1RET         RETURN ADDRESS FOR STAGE 1
         LR    RZ,RREC             SAVE HERE TO SAVE SPACE IN SA
      RPUSH    R15,R2              SAVE REGS FOR PHASE 1         073172
         ST    R13,STG1SAVE     SAVE R13 IN CASE STACK ISNT RIGHT
         TM    RDSW,RDSWSEQ        TEST IF PROC SEQUENTIALLY     073172
         BO    PROCMEMB            BR IF YES -- CONTINUE         073172
         CLI   BLDLNM,X'FF'        ANY MEMBERS SPECIFIED?        073172
         BNE   DOBLDL              BR IF YES - GO DO BLDL        073172
       PRMSG   ERRDSORG,ERRDSOSZ   ERROR OTHERWISE               073172
         SPACE 2                                                 080172
**  PROCESS ALL MEMBERS OF THE PDS                               080172
         TM    NESTSW,NESTPARM     PARM=NEST REQUESTED?         GP03151
         BZ    NESTKEEP            NO                           GP03151
         NI    NESTSW,255-NESTPARM                              GP03151
       PRMSG   ERRNNEST,ERRNNESZ   NO NEST WHEN DOING ALL       GP03151
*     USE NORMAL PO DCB TO READ DIRECTORY                        080172
NESTKEEP OI    RDSW,RDSWALL        INDICATE PROCESSING WHOLE PDS 080172
         LA    R2,IN               DCB ADDR                      080172
       USING   IHADCB,R2    #######                              080172
         MVC   WKD(L'DCBLRECL),DCBLRECL  SAVE LRECL OFF          080172
         MVC   WKD+L'DCBLRECL(L'DCBBLKSI),DCBBLKSI   AND BLKSI   080172
         MVC   WKC,DCBRECFM        AND RECFM                     080172
         MVC   DCBRECFM,EQRECFMU   SET RECFM=U                   080172
         LA    RWK,256                                           080172
         STH   RWK,DCBBLKSI        BLKSIZE=256 FOR DIRECTORY     080172
         STH   RWK,DCBLRECL        LRECL=256 ALSO                080172
       DROP    R2            ######                              080172
         ST    RWK,NXTDSKAD        TTRZ=0010                     080172
       POINT   IN,NXTDSKAD         POINT TO FIRST DIRECTORY BLK  080172
*  USE FIRST PART OF AVAILABLE WORK AREA (AFTER STACK) TO STORE  080172
*    PDS MEMBER NAMES                                            080172
         L     R1,GETMAIN          ADDR OF AVAILABLE STORAGE     080172
         LA    R2,4(R1)            LEAVE ROOM FOR POINTER        080172
         ST    R2,0(R1)            POINT TO FIRST ENTRY          080172
         MVI   0(R2),X'FF'         JUST IN CASE                  080172
         SPACE 1                                                 080172
**  NOW GO READ THE PDS DIRECTORY                                080172
RDPDSD   DS    0H                                                080172
       READ    RDBPAM,SF,,(RB),MF=E    USE PROGRAM AREA AS BFR   080172
       CHECK   RDBPAM              SINGLE BUFFER                 080172
         L     R1,RDBPAM+EQDECBA   GET BUFFER ADDR               080172
         LH    RZ,0(R1)            ACTIVE LENGTH OF BLOCK        080172
         LA    R1,2(R1)            BUMP TO FIRST ENTRY           080172
         SH    RZ,*-2              AND DECR LENGTH               080172
PDSDLOOP DS    0H                                                080172
         MVC   0(8,R2),0(R1)       MOVE MEMBER NAME              080172
         TM    11(R1),X'80'        IS IT AN ALIAS?               080172
         BO    *+8                 SKIP IT IF SO                 080172
         LA    R2,8(R2)            ELSE BUMP POINTER             080172
         CLI   0(R1),X'FF'         IS THAT END OF DIRECTORY?     080172
         BE    ENDPDSD             BR IF YES                     080172
         SR    RWK,RWK                                           080172
         NI    11(R1),X'1F'        CLEAR GARBAGE                 080172
         IC    RWK,11(R1)          NO OF HALFWORDS               080172
         SLL   RWK,1               NO OF BYTES                   080172
         LA    RWK,12(RWK)         LENGTH OF FIRST PART          080172
         AR    R1,RWK              BUMP POINTER                  080172
         SR    RZ,RWK              DECR LENGTH                   080172
         BNP   RDPDSD              BR IF BLOCK EMPTY             080172
         B     PDSDLOOP            PROCESS NEXT ENTRY            080172
         SPACE 2                                                 080172
***  END OF THE PDS DIRECTORY                                    080172
ENDPDSD  DS    0H                                                080172
         ST    R2,GETMAIN          NEXT AVAILABLE ADDR IN WK AR  080172
         LA    R2,IN                                             080172
       USING   IHADCB,R2     ######                              080172
         MVC   DCBLRECL,WKD        RESTORE LRECL                 080172
         MVC   DCBBLKSI,WKD+L'DCBLRECL   AND BLKSIZE             080172
         MVC   DCBRECFM,WKC        AND ORIG RECFM                080172
       DROP    R2            ######                              080172
         SPACE 6                                                 080172
***  PROCESS DIRECTORY NAMES INTO BLDL                           080172
*                                                                080172
PROCALL  DS    0H                                                080172
         L     R13,STG1SAVE        RESET STACK POINTER           080172
         SR    RACC,RACC           INIT BLDL COUNTER             080172
         LA    RWK,BLDLNM          INIT BLDL POINTER             080172
         L     R14,STACKPTR        ADDR OF STACK                 080172
         LA    R14,STACKSZ(R14)    ADDR OF LIST POINTER          080172
         L     R1,0(R14)           ADDR OF LIST                  080172
PROCALL2 DS    0H                                                080172
         MVC   0(L'BLDLNM,RWK),0(R1) MOVE MEMBER NAME            080172
         CLI   0(R1),X'FF'         IS IT THE END OF FILE ONE?    080172
         BE    PDSDONE             BR IF YES                     080172
         LA    RACC,BLDLSZ(RACC)   BUMP COUNTER                  080172
         LA    RWK,BLDLNM(RACC)    SET POINTER                   080172
         LA    R1,8(R1)            BUMP POINTER                  080172
         CLI   0(RWK),X'FF'        PHYSICAL END OF BLDL LIST?    080172
*DEL*                                                            080172
         BNE   PROCALL2            BR IF NOT                     080172
         ST    R1,0(R14)           SAVE NEW LIST POINTER         080172
         B     DOBLDL              GO PROCESS THESE              080172
         SPACE 3                                                 080172
***  END OF DIRECTORY                                            080172
PDSDONE  DS    0H                                                080172
         NI    RDSW,255-RDSWALL    RESET THE SWITCH              080172
         CLI   BLDLNM,X'FF'        IS LIST NULL?                 080172
         BE    CHECKEOJ            GO SEE IF EOJ IF SO           080172
         SPACE 4                                                 080172
*    COMPUTE NO OF ENTRIES
DOBLDL   DS    0H                                                073172
         LA    RO,BLDLNM(RACC)
         LA    RWK,BLDLNM
         SR    RO,RWK              TOTAL LENGTH
         LA    RWK,BLDLSZ          SIZE/ENTRY
         SR    RE,RE
         STH   RWK,BLDL+2
         DR    RE,RWK              TOT/SIZE=NO.
         STH   RO,BLDL             YES
       BLDL    IN,BLDL             BUILD
         CH    R15,H8        FOUND OR NOT FOUND ?                91160
         BL    INIT          EITHER; PROCEED                     91160
*                     FALL THRU ON I/O ERROR
         SPACE 4
ABEND  ABEND   651,DUMP
         TITLE 'PHASE 2 -- PROCESS MEMBER'
INIT     DS    0H
         LA    RPTL,BLDLNM         FIRST BLDL ENTRY
INIT2    DS    0H
         MVC   CURRMEMB,0(RPTL)    STORE MEMBER NAME
         NI    PHASESW,255-PHASEIM                               081772
         ST    RPTL,PTRBLDL        SAVE FOR LATER USE
INIT3    DS    0H        RETURN HERE FOR INNER MACRO PROCESSING
         OI    RDSW,RDSWFIND       FIND IS REQ FOR NEXT MEMBER
         CLI   BLDLTTR+2-BLDLNM(RPTL),0   Q.  FOUND?
         BNE   PROCMEMB
*   MEMBER NOT FOUND
         MVC   ERRNFNM,CURRMEMB
       PRMSG   ERRNTFND,ERRNFSZ                                  081772
         B     NEXTMEMB
         SPACE 8
***  PROCESS A MEMBER  ***
*
PROCMEMB DS    0H
         OI    RDSW,RDSWPRIM+RDSWREAD  INDICATE FIRST READ
         LA    RACC,1              INIT STMT COUNTER
         SP    PGCNT,PGCNT    ZERO PAGE CNTR
         BAL   RRET,GET       GET FIRST RECORD
**  RETURN HERE WHEN MORE THAN ONE MACRO IN A MEMBER
MACSRCH  DS    0H
         L     R13,STG1SAVE        INIT STACK POINTER
         NI    PHASESW,PHASE0      RESET PHASE SW
         MVI   TABLSW,TABLIC       INITIALIZE TABL SW
         MVC   LOAVAIL(8),GETMAIN   INIT  LOAVAIL/HIAVAIL
         XC    PTRS(PTRSZ),PTRS
         OI    HDNGSW,B       FORCE HDNG
         TM    PHASESW,PHASEIM          CHECK INNER MACRO IN PROC
         BO    PLGBLK              DON'T RESET MACRO NAME
         MVI   HDR1NM,EQAST             ERASE MACRO NAME IN CASE
         MVC   HDR1NM+1(L'HDR1NM-1),HDR1NM  SOURCE TO BE PROCESSED
         MVC   HDR1TYP(L'HDR1TYP),HDR1TYP-1  CLEAR TYPE OF ENTRY 080272
         CLI   CURRMEMB,C' '       IS MEMBER BLANK?              080272
         BE    PLGBLK              LEAVE ASTERISKS IF SO         080272
         MVC   HDR1NM,CURRMEMB     OTHERWISE, USE MEMBER NAME    080272
         B     PLGBLK
         TITLE 'PHASE 2 -- PROCESS MACRO PROTOTYPE'
*** FOUND 'MACRO' STATEMENT
*
FNDMAC   DS    0H
         OI    HDNGSW,B            MAKE SURE HEADING GETS PRINTED
         MVC   WK80,0(RREC)        SAVE 'MACRO' STMT FOR LATER
         BAL   RRET,GET
***  PROCESS PROTOTYPE  ***
*
         LR    R1,RREC
         BAL   RRET,FINDBLK             FIND FIRST BLANK
         BAL   RRET,LOCNBLK             FIND MACRO NAME
         BZ    PROTO1                   GOT MACRO NAME
         SPACE 2
NOPROTO  DS    0H        PROTO NOT VERIFIED
         LA    R14,NOPROTO3        FORCE FALL THRU SUBROUTINE
**  'MACRO' STMT WAS FOUND BUT NOT PRINTED YET.  PRINT IT NOW
NOPROTO2 DS    0H                  SUBROUTINE
         LR    R15,RREC            SAVE RECORD POINTER
         LA    RREC,WK80           LOC OF 'MACRO' STMT SAVED
         BAL   RRET,PRNTDET        PRINT IT
         LR    RREC,R15            RESTORE RECORD PTR
         BR    R14                 EXIT
*
NOPROTO3 DS    0H                  FALL THRU
       PRMSG   ERRNOPRO,ERRNPSZ                                  081772
         B     PLGBLK                   PROCESS REST OF MEMBER
         SPACE 8
PROTO1   DS    0H
         LR    RWK,R1
         BAL   RRET,FINDBLK        FIND BLANK AFTER MACRO NAME
         BNZ   NOPROTO        NO MORE BLKS
         LR    R2,R1
         SR    R2,RWK
         CH    R2,H8               CHECK MACRO NAME GT 8 CHARS
         BNH   *+8                 BR IF NOT
         LH    R2,H8               MAKE IT MAX OF 8
         BCTR  R2,0           LENGTH OF NAME
      RPUSH    R1,R2
         TM    PHASESW,PHASEIM          IF INNER MACRO IN PROC
         BO    PROTO2                   NAME ALREADY IN HDNG
         MVC   HDR1NM,KBLK8        CLEAR MACRO NAME FIELD
         EX    R2,PROTOMVC         MOVE MACRO NAME INTO HDNG
         MVC   HDR1TYP,KMACRO      INDICATE MACRO BEING PROCESSED080272
         LA    R1,HDR1NM           ADDR OF MACRO NAME
         L     R15,NESTEP
         LA    RZ,20               GO PUT MACRO NAME IN TABLE
         BALR  R14,R15             SO WE WON'T CROSS REF LATER
PROTO2   DS    0H
         BAL   R14,NOPROTO2        GO PRINT 'MACRO' STMT FIRST
         MVI   TYPESW,TYPSYM       INDICATE SYMBOLIC PARMS IN PROC
**   PROCESS SYMBOLIC PARAMETER DEFINITIONS IN PROTOTYPE
         CLI   0(RREC),EQAMP       Q. PARM LABEL?
         BNE   NOPROLBL            NO
*   PROTOTYPE HAS A LABEL
         LR    R1,RREC        START OVER
         BAL   RRET,FINDBLK
         LR    R2,R1
         SR    R2,RREC        LENGTH OF LABEL
         LR    R1,RREC             ADDR OF LABEL
         BAL   RRET,TABENT
         SPACE 5
NOPROLBL DS    0H
      RPOP     R1,R2
         LA    R1,1(R1)
FINDAMP  DS    0H
         LA    R2,EQAMP
         BAL   RRET,FINDCHAR       SEARCH FOR '&'
         BZ    HVAMP
         SPACE 5
**  NO DELIMS FOUND - CHECK CONT
CHKCONT  DS    0H
         CLI   71(RREC),EQBLK
         BE    PLGFIN         NO CONTIN
         BAL   RRET,PRNTDET2    PRNT BUT NO INCR OF STMT CTR
         BAL   RRET,GET
         LA    R1,15(RREC)    START FROM COL 16
         ST    R1,STARTLOC         SAVE SPECIAL START LOC
         B     FINDAMP
         SPACE 6
**   FOUND A VARIABLE SYMBOL (SYM PARM) DEFINITION
HVAMP    DS    0H
         LR    RWK,R1
         LA    R1,1(R1)
         BAL   RRET,TRTRTN    FIND A DELIMITER
         EX    0,HVAMPTBL(R2)      BR OR LOAD RETURN
         B     HVDLM               BR IF RETURN
HVAMPTBL DS    0H
         B     HVNODLM             NO DELIMS AT ALL
         B     FINDAMP             ANOTHER '&'
         LA    R14,JUNKDLM         NOT AMP,CMM, OR BLK
         LA    R14,HVCMMDLM        CMM
         LA    R14,PLGFIN          BLK
HVDLM    DS    0H
         LCR   R2,RWK
         AR    R2,R1          LNGTH
         LR    R1,RWK         A(&)
         AR    RWK,R2         A(DELIM)
         BAL   RRET,TABENT    PUT INTO TABLE
         BR    R14                 TAKE PREV LOADED EXIT
         SPACE 2
**  DELIMITER FOUND BUT NOT AMPERSAND, COMMA, OR BLANK
JUNKDLM  DS    0H
         LA    R1,1(RWK)
         BAL   RRET,TRTRTN         WHAT IS NEXT DELIM
         LTR   R2,R2
         BZ    CHKCONT             THERE ISN'T ONE
         LR    RWK,R1
         EX    0,HVAMPTBL(R2)      LOAD EXIT OR BRANCH
         BR    R14
         SPACE 2
*    IF COMMA THEN BLANK DISREGARD REST
HVCMMDLM DS    0H
         CLI   1(RWK),EQBLK        ', '?
         BE    CHKCONT
         LA    R1,1(RWK)      PAST DELIM
         B     FINDAMP
         SPACE 2
*    NO DELIM FOUND - CHECK FOR SPLIT
HVNODLM  DS    0H
         LA    R14,PLGFIN          LOAD FOR RC=0
         BAL   RRET,SYMSPLIT
         B     *+4(R15)
         B     HVDLM          CONTIN IS DELIM
         B     HVSPLIT        SPLIT
         B     CHKCONT        WHOOPS
HVSPLIT  DS    0H
         BAL   RRET,MVSPLIT
         B     HVAMP
         SPACE 4
PROTOMVC MVC   HDR1NM(0),0(RWK)    EX
         SPACE 10
***  FINISHED WITH A PROTOTYPE, LOCAL, OR GLOBAL
*
PLGFIN   DS    0H
*   CHECK FOR CONTIN IN CASE JERK PUT COMMENT CONTIN CARDS IN
         CLI   71(RREC),EQBLK
         BE    PLGFIN2
         BAL   RRET,PRNTDET2
         BAL   RRET,GET
         B     PLGFIN
PLGFIN2  DS    0H
         BAL   RRET,PRNTDET
         BAL   RRET,GET
         TITLE 'PHASE 2 -- PROCESS LCL/GBL''S'
***  PROTOTYPE DONE OR ELSE THIS IS NOT A MACRO
*
PLGBLK   DS    0H
         LR    R1,RREC             START AT BEGINNING OF RECORD
         CLI   0(R1),EQAST
         BE    PLGFIN
         CLC   PTSTAR,0(R1)
         BE    PLGFIN
         BAL   RRET,FINDBLK        BYPASS NAME FIELD ENTRY
         BAL   RRET,LOCNBLK
         BNZ   PLGFIN
***  IF ALREADY PAST PROLOGUE SCAN FOR LCL/GBLS
         TM    PHASESW,PHASPRLG
         BO    TESTLG
***  SEE IF THIS IS A VALID PROLOGUE OPCODE
         LA    RZ,16
         L     R15,NESTEP
         BALR  R14,R15
         LTR   R15,R15
         BZ    PLGFIN              VALID PROLOGUE - SKIP STMT SCAN
**  NOT VALID PROLOGUE CODE - SO INDICATE
         OI    PHASESW,PHASPRLG
**  CHECK FOR 'MACRO' HEADER STATEMENT
         CLC   KMACRO,0(R1)
         BE    FNDMAC              BR IF FOUND
         SPACE 4
TESTLG   DS    0H
         CLC   KCOPY,0(R1)   COPY STATEMENT ?                    91160
         BE    PROCCOPY      YES; SPECIAL PROCESSING             91160
         CLC   KLCL,0(R1)
         BE    PROCLCL             PROBABLY LCLA/B/C
         CLC   KGBL,0(R1)
         BNE   PROCBODY            ALL DONE WITH LCL/GBL DEFNS
         SPACE 3
**  POSSIBLE GBLA/B/C DEFN
         MVI   TYPESW,TYPGBL       INDICATE GBL VAR SYM IN PROC
         B     LCLGBL
         SPACE 1
**  POSSIBLE LCLA/B/C
PROCLCL  DS    0H
         MVI   TYPESW,TYPLCL       INDICATE LCL VAR SYM IN PROC
         SPACE 1
**  COMMON TO LCL/GBL
LCLGBL   DS    0H
         CLI   4(R1),EQBLK         ENSURE OPCODE IS 4 CHARS LONG
         BNE   PROCBODY            NOT LCL/GBL AFTER ALL
**  VALID LCL/GBL IF 4TH CHAR IS A/B/C
         CLI   3(R1),EQA
         BL    PROCBODY            CAN'T BE A/B/C
         BE    LGA                 LCL/GBLA
         CLI   3(R1),EQC
         BH    PROCBODY            CAN'T BE A/B/C
         BE    LGC                 LCL/GBLC
**  MUST BE LCL/GBLB
         OI    TYPESW,TYPB
         B     FINDAMP             GO GET VAR SYM DEFNS
**  LCL/GBLA
LGA      DS    0H
         OI    TYPESW,TYPA
         B     FINDAMP
**  LCL/GBLC
LGC      DS    0H
         OI    TYPESW,TYPC
         B     FINDAMP
         SPACE 1                                                 91160
*    COPY STATEMENT PRIOR TO LCL/GBL - SUPPORT                   91160
PROCCOPY SLR   RZ,RZ         REGULAR CALL                        91160
         L     R15,NESTEP    SUBROUTINE                          91160
         BALR  R14,R15       INVOKE IT AND ADD TO MACRO TABLE    91160
         MVI   TYPESW,TYPINNM  SET FOR MACRO                     91160
         SLR   R2,R2         LENGTH OF SYMBOL TO BE ADDED        91160
         LR    R15,R1        GET START OF NAME                   91160
PROCCOPL CLI   0(R15),C' '   END OF NAME, YET ?                  91160
         BE    PROCCOPN      YES                                 91160
         LA    R15,1(,R15)                                       91160
         LA    R2,1(,R2)                                         91160
         CH    R2,H8         NOT TOO LONG ?                      91160
         BL    PROCCOPL                                          91160
PROCCOPN L     RO,LOAVAIL    SAVE START ADDRESS OF ENTRY         91160
         BAL   RRET,TABENT   ENTER MACRO TO SYMBOL TABLE         91160
         B     PLGFIN        DONE FOR NOW                        91160
         TITLE 'PHASE 2 -- END OF VARIABLE SYMBOL DEFINITIONS'
***  FINISHED DEFINING VARIABLE SYMBOLS  ***
*
PROCBODY DS    0H
**  ENTER SYSTEM VARIABLE SYMBOLS IN TABLE
         LA    R15,NOSYSVAR        NO. OF SYMBOLS TO BE ENTERED  081872
         LA    R1,SYSVRSYM         POINT TO NAMES TO BE ENTERED
         LA    R2,WKKEYLN          LENGTH OF EACH ONE
         MVI   TYPESW,TYPSYS       INDICATE SYSTEM VAR SYMS IN PROC
BODYLOOP DS    0H                  ITERATIVE
         L     RO,LOAVAIL          SAVE OLD POINTER
         BAL   RRET,TABENT         ENTER ONE
        USING  TABLE1,RO      ***************
         XC    ENT1DF,ENT1DF       FLAG THEM AS UNDEFINED
         AR    R1,R2               BUMP TO NEXT ONE
         BCT   R15,BODYLOOP        ITERATE
       DROP    RO             ***************
         SPACE 8
         LA    RWK,1
         ST    RWK,NXTDSKAD        INIT TTR TO 001
         TITLE 'PHASE 2 -- PROCESS BODY OF MEMBER'
***  PROCESS STATEMENT IN MACRO BODY  ***
*
PROCESS  DS    0H
         MVI   OPSW,OPSWNULL       RESET OPCODE SWITCH
         LR    R1,RREC
         CLI   0(R1),EQAST
         BE    STMTDONE       GEN COMMENT
         CLC   PTSTAR,0(R1)
         BE    STMTDONE       MACRO COMMENT
*    FIND FIRST BLANK
         BAL   RRET,FINDBLK        FIND FIRST BLANK
         BNZ   STMTDONE
*    CHECK FOR SEQUENCE SYMBOL DEFN.
         CLI   0(RREC),EQPER
         BNE   NOSQDEFN
         MVI   TYPESW,TYPSEQS      INDICATE SEQ SYM
         LR    R2,R1          A(DELIM)
         SR    R2,RREC        LENGTH
         LR    R1,RREC        A(SYM)
         BAL   RRET,TABENT         ENTER SYMBOL IN TABLE
         AR    R1,R2
NOSQDEFN DS    0H
*    NOW FIND FIRST NON-BLANK
         BAL   RRET,LOCNBLK
         BNZ   STMTDONE
**  HAVE LOCATION OF OPCODE -- SAVE IT FOR LATER
         ST    R1,SAVEOP
**  IF THIS IS A 'MACRO' HEADER AT THIS POINT IT IS INVALID.
**   HOWEVER, TREAT IT AS A NEW MACRO DEFN AFTER FLAGGING ERROR.
         CLC   KMACRO,0(R1)
         BE    INVSEQ
**  LCL/GBL STATEMENTS ARE LIKEWISE INVALID AT THIS POINT
         CLC   KLCL,0(R1)          LCL?
         BE    INVLG
         CLC   KGBL,0(R1)          GBL?
         BNE   NOTINVLG            BR IF NOT LCL/GBL
**  PASS OPCODE TO OTHER MODULE TO SEE IF ITS ACTUAL LCL/GBL INST
*     RATHER THAN A MACRO CALL THAT STARTS WITH THOSE LETTERS
INVLG    SLR   RZ,RZ         CHECK OPCODE                        91160
         L     R15,NESTEP
         BALR  R14,R15
         CH    R15,H8              TEST FOR RC=8
         BNE   INVSEQ              BR IF ITS OPCODE
         SPACE 2
NOTINVLG DS    0H
**  CHECK WHETHER THIS IS THE END OF A MACRO/NON-MACRO
         CLC   KMEND,0(R1)
         BE    MEND
         CLC   KEND,0(R1)
         BNE   NOTMEND
MEND     DS    0H
         OI    OPSW,OPSWMEND       SET SWITCH FOR LATER
         B     FINDINNM
         SPACE 3
*    IF 'REPRO' TREAT THIS & NXT STMT AS SAME -NO PROCESSING
NOTMEND  DS    0H
         CLC   KREPRO,0(R1)
         BNE   NOTREPRO
         BAL   RRET,PRNTDET
         BAL   RRET,GET
         B     STMTFIN
         SPACE 4
***  STATEMENT SEQUENCE ERROR - DUMP TABLES AND START AGAIN
*
INVSEQ   DS    0H
       PRMSG   ERRINVSQ,ERRISSZ                                  081772
         B     ENDMAC2
         SPACE 4
*    IF AGO OR AIF PROCESS SEQ SYM
NOTREPRO DS    0H
         CLC   KAGO,0(R1)
         BNE   NOTAGO
*** 'AGO' ***
         LA    R2,EQPER            FIND PERIOD
         BAL   RRET,FINDCHAR
         BNZ   SEQSYMNF            COULDN'T FIND SEQ SYM REF
AGOREF   DS    0H
         LR    RWK,R1
         BAL   RRET,FINDBLK        FIND END OF SEQ SYM REF
         BNZ   DEFERR
AGOREF2  DS    0H
         LR    R2,R1
         LR    R1,RWK
         SR    R2,R1
         MVI   TYPESW,0            CLEAR IN CASE NOT DEFINED YET
         BAL   RRET,REFSYM      ADD REF TO SEQ SYM
AGOREF3  DS    0H
         TM    OPSW,AIFSSNP        TEST IF AIF SEQ SYM NOT PROC
         BZ    STMTDONE            BR IF NOT AIF
         NI    OPSW,AIFDONE
         B     STMTDONE
DEFERR   DS    0H
         BAL   RRET,SYMSPLIT       CHECK SYM SPLIT OVER CONTIN
         B     *+4(R15)
         B     AGOREF2             CONTIN IS DELIM
         B     REFSPLIT            SPLIT
SEQSYMNF DS    0H                  SEQ SYM NOT FOUND
         OI    OPSW,AIFNOSS        FLAG FOR ERROR MSG LATER
         B     AGOREF3
         SPACE 2
REFSPLIT DS    0H
         BAL   RRET,MVSPLIT
         B     AGOREF
         SPACE 5
NOTAGO   DS    0H
         CLC   KAIF,0(R1)
         BNE   PROCOPCD                                          080272
*** 'AIF' ***
         OI    OPSW,AIFSSNP+AIFIDNS   SET AIF SWITCH
         SPACE 5
***  PROCESS OP-CODE                                             080272
*
PROCOPCD DS    0H                                                080272
         L     R1,SAVEOP           GET ADDR OF OP CODE
         CLI   HDR1TYP,C' '        IS TYPE ALREADY DETERMINED?   080272
         BNE   CHECKSET            BR IF YES                     080272
         TM    PHASESW,PHASEIM     IS IT INNER MACRO?            080272
         BO    CHECKSET            BR IF YES                     080272
**  LOOK FOR CSECT/DSECT IN SOURCE PROGRAM                       080272
         CLC   KCSECT,0(R1)        CSECT?                        080272
         BE    PRCSECT             BR IF YES                     080272
         CLC   KDSECT,0(R1)        DSECT?                        080272
         BNE   CHECKSET            BR IF NOT                     080272
**  FOUND CSECT/DSECT NOT IN MACRO OR INNER MACRO CALL           080272
PRCSECT  DS    0H                                                080272
         MVC   HDR1TYP,0(R1)       MOVE OP-CODE AS TYPE          080272
         MVC   HDR1NM,KBLK8        CLEAR NAME FIELD              080272
         LR    R1,RREC             START SCAN FOR NAME           080272
         BAL   RRET,FINDBLK        SCAN FOR NAME                 080272
         SR    R1,RREC             LENGTH OF NAME                080272
         BNP   PRCSECT2            BR IF UNNAMED SECT            080272
         BCTR  R1,0                DECR LENGTH                   080272
         LR    RWK,RREC            SET FOR PROTOMVC              080272
         EX    R1,PROTOMVC         MOVE SECT NAME                080272
         OI    HDNGSW,B            FORCE NEW PAGE                080272
PRCSECT2 DS    0H                                                080272
         L     R1,SAVEOP           RELOAD R1                     080272
         B     FINDINNM                                          080272
         SPACE 5
**  CHECK FOR 'SETA/B/C' INSTRUCTIONS
CHECKSET DS    0H                                                080272
         CLC   KSET,0(R1)
         BNE   FINDINNM            BR IF NOT SETX
         CLI   4(R1),EQBLK
         BNE   FINDINNM            BR IF NOT 4 CHAR OPCODE
         CLI   3(R1),EQA
         BL    FINDINNM            BR IF .LT. 'A'
         CLI   3(R1),EQC
         BH    FINDINNM            BR IF .GT. 'C'
**  OPCODE IS SETA/B/C - FLAG SET SYMBOL MODIFIED
         CLI   0(RREC),EQAMP       CHECK THAT THERE IS A VAR SYM
         BNE   FINDINNM               WHICH IS MODIFIED
         OI    OPSW,OPSWSETX       FLAG OPCODE AS SETA/B/C
         SPACE 3
***  PASS OP CODE TO XTRN MODULE FOR POSS INNER MACRO CALLS
** PASS FOLLOWING PARMS TO MACRFNST MODULE
*    RZ  FUNCT CODE (0=VALIDATE OP CODE)
*    R1  ADDR OF OP CODE
*    R14 RETURN
*    R15 RETURNS 0 IF OP-CODE, 4 IF OP CODE BEING REFERENCED,
*                8 IF INNER MACRO
FINDINNM DS    0H
         CLI   0(R1),EQAMP         IF OPCODE IS A VAR SYM
         BE    OPCODE              DON'T BOTHER EVEN LOOKING
         SR    RZ,RZ
         L     R15,NESTEP
         BALR  R14,R15
         EX    0,OPTYPLST(R15)
         LR    RWK,R1              MAC LOC
         BAL   RRET,FINDBLK        FIND BLANK
         LR    R2,R1
         SR    R2,RWK              LENGTH OF MACRO NAME
         LR    R1,RWK              MACRO NAME
         BAL   RRET,REFSYM         PUT INTO REF TABLE
OPCODE   DS    0H
         LR    R1,RREC
***  PROCESS VARIABLE SYMBOLS IN STMT                            080272
PROCVARS DS    0H
         LA    R2,EQAMP
         BAL   RRET,FINDCHAR       FIND '&'
         BNZ   STMTDONE            NO '&' LEFT IN STMT
PVSPEC   DS    0H
         LR    RWK,R1
         LA    R1,1(R1)
*
H1       EQU   *-2            *** CONST ***
*
         CLI   0(R1),EQBLK         Q. '& '
         BE    PROCVARS            YES FORGET IT
         CLI   0(R1),EQAMP         Q. '&&'
         BNE   PVSYES              NO, PROC VAR SYM
         LA    R1,1(R1)            '&&'
         B     PROCVARS            TRY AGAIN
         SPACE 2
OPTYPLST DS    0H
         B     OPCODE              0 - NORMAL OPCODE
         MVI   TYPESW,TYPOPCD      4 - REFERENCED OPCODE
         MVI   TYPESW,TYPINNM      8 - INNER MACRO CALL
         SPACE 3
**   VAR SYM REF
PVSYES   DS    0H
         BAL   RRET,TRTRTN    FIND DELIM
         LTR   R2,R2
         BZ    PVSYWHY        NO DELIM - FIND OUT WHY
**   FOUND DELIMITER
PVSYYES  DS    0H
         LR    R2,R1
         SR    R2,RWK              LNGTH
         LR    R1,RWK              ADDR
         MVI   TYPESW,0            CLEAR IN CASE NOT DEFINED YET
         CH    R2,H1               CHECK '&' ONLY
         BNH   *+8                 BR IF YES -- DON'T PROCESS
         BAL   RRET,REFSYM         REF
         AR    R1,R2
         B     PROCVARS
         SPACE 8
**  THERE'S SUPPOSEDLY A VAR SYM HERE BUT NO DELIM.
*     WHY?
*
PVSYWHY  DS    0H
*     ONLY REASON SHOULD BE THAT THIS IS AT END OF STMT (TO COL 71).
*
         BAL   RRET,SYMSPLIT
         B     *+4(R15)
         B     PVSYYES        CONTIN IS DELIM
         B     PVSSPLIT       SPLIT
         B     PVSSCREW       UGH
PVSSPLIT DS     0H
         BAL   RRET,MVSPLIT
         B     PVSPEC
*    IF NOT SPLIT & NOT BUTTING CONTIN SCREW IT
PVSSCREW DS    0H
         LA    R1,1(RWK)
         B     PROCVARS
         EJECT ,
***  NO MORE REFS TO PROCESS IN THIS STMT  ***
*
STMTDONE DS    0H
         TM    OPSW,AIFSSNP
         BNZ   AIF
         CLI   71(RREC),EQBLK
         BNE   SDCONTIN
STMTFIN  DS    0H
         BAL   RRET,PRNTDET
         TM    OPSW,AIFNOSS        TEST IF ERROR MSG NEEDED
         BZ    STMTFIN2            BR IF NO
       PRMSG   ERRNOSS,ERRNOSSZ                                  081772
STMTFIN2 DS    0H
         TM    OPSW,OPSWMEND       TEST IF END OF A MACRO/NON-MACRO
         BO    ENDMAC
         BAL   RRET,GET
         B     PROCESS
SDCONTIN DS    0H
         BAL   RRET,PRNTDET2
         BAL   RRET,GET
         LA    R1,15(RREC)
         ST    R1,STARTLOC         SAVE SPECIAL STARTING LOC
         B     PROCVARS
         SPACE 6
***  PROCESS AIF SEQ SYMBOL
**
AIF      DS    0H
         TM    OPSW,AIFIDNS       ARE SYMBOL ID CHARS SPLIT?
         BZ    AIFSPLIT
*   SEARCH FOR PER PRECEDED BY RT PAREN
         LR    R1,RREC
AIFLOCPT DS    0H
         LA    R2,EQPER
         LA    R1,1(R1)
         BAL   RRET,FINDCHAR
         BNZ   AIFNOPER
         LR    RWK,R1
         BCTR  RWK,0
         CLI   0(RWK),EQRP
         BNE   AIFLOCPT
**  ').' FOUND - SHOULD BE SEQ SYMBOL
         B     AGOREF
         SPACE 2
**   NO PERIOD FOUND - THERE SHOULD BE CONTIN
AIFNOPER DS    0H
         CLI   71(RREC),EQBLK
         BE    SEQSYMNF            NO CONTIN - SYM NOT FOUND
**   CONTINUED - EXITHER ').' IN CONTIN OR PAREN/PER SPLIT
         CLI   70(RREC),EQRP
         BNE   SDCONTIN
**   RT PAREN IN 71 - SEQ, SYM MAY BE IN 16 OF CONTIN
         NI    OPSW,255-AIFIDNS   SEQ SYM ID MAY BE SPLIT
         B     SDCONTIN
**   RETURN HERE WITH ABOVE CONDITION
AIFSPLIT DS    0H
         LA    R1,15(RREC)
         CLI   0(R1),EQPER
         BE    AGOREF
**   COL 16 NOT SEQ SYM - PROCEED NORMALLY
         OI    OPSW,AIFIDNS       THIS ISN'T THE LAST PART
         B     AIFLOCPT
         TITLE 'PHASE 3 -- DUMP TABLES'
*** END OF A MACRO OR SOURCE PROGRAM FOUND
*     SEE IF IT IS THE LAST STATEMENT IN THE MACRO SOURCE PROGRAM
*
ENDMAC   DS    0H
         BAL   RRET,GET NEXT STATEMENT
         SPACE 2
**  IF RETURN IS MADE HERE IT MEANS THE EODAD WAS NOT TAKEN.
**   IN THAT CASE DUMP THE TABLES AND GO ON TO THE NEXT MACRO OR
**   SOURCE PROGRAM IN THE INPUT.
*
ENDMAC2  DS    0H                  BR HERE WHEN 'MACRO' FOUND
         B     ENDMEMB2            GO DUMP
         SPACE 6
***  END OF MEMBER - DUMP TABLES
*
ENDMEMB  DS    0H
         BAL   RRET,FREEBUF
         OI    PHASESW,PHASEEM          MARK END OF MEMBER
ENDMEMB2 DS    0H
         L     R13,STG1SAVE        RESET STACK POINTER TO START
         OI    PHASESW,PHASE3      INDICATE PHASE 3 IN PROGRESS
         OI    HDNGSW,B            FORCE HEADING
         LA    RE,PTRS             START OF POINTER TABLE
         LA    RO,PTRSZ(RE)        END OF POINTER TABLE
         STH   RACC,STMTCNT        SAVE STMT COUNTER FOR LATER
         SPACE 2
       USING   TABLE1,RPTL    ***************
         SPACE 2
EMSTART  DS    0H
         L     RPTL,0(RE)          FIRST ENTRY IN THIS SEGMENT
EMLIST   DS    0H
         LTR   RPTL,RPTL           END OF SEGMENT?
         BZ    EMENDLST            BR IF YES
         SR    RACC,RACC
         IC    RACC,ENT1PT
         OI    PHASESW,PHASENSY+PHASENRF  FLAG FIRST OF MULT LINES
         LA    RWK,1
         ST    RWK,NXTDSKAD
         MVC   WKFILE+DCBLIMCT+1-IHADCB(2),TRKCNT      INIT LIMCT
EMDISKLP DS    0H
         LTR   RACC,RACC        Q. DISK RECS TO PROCESS?
         BZ    EMTBLEFT            NO
         LH    R2,WKFILE+DCBBLKSI-IHADCB        BLKSZ
         SRL   R2,1                     NO. OF ENTRIES
EMDISKRD DS    0H
         MVC   WKD(2),NXTTTR       'TT' OF 'TTR'
         LH    RWK,TRKCNT          SIZE OF DATA SET
         SH    RWK,WKD             LESS STARTING POINT
         STH   RWK,WKFILE+DCBLIMCT+1-IHADCB  LIMIT SRCH TO END OF D/S
       READ    BDAM,DKF,,WK80,'S',(RPTL),NXTTTR,MF=E
       CHECK   BDAM
         LA    R1,WK80             ADDR OF REF BLOCK
         BAL   RRET,PRNTREFS            PRINT THEM
         MVC   WK80(1),NXTTTR+2    MOVE 'R' INTO DATA RECORD
         LA    R1,BDAM        ** TO ESTABLISH ADDRESSABILITY **  080172
       USING   BDAM,R1      ######                               080172
      WRITE    (1),DI,,,,DUMMY,MF=E   REWRITE DUMMY RECORD       080172
       DROP    R1           ######                               080172
      CHECK    BDAM
         BCT   RACC,EMDISKLP
         SPACE 3
**   NO MORE FULL RECORDS ON DISK
EMTBLEFT DS    0H
         SR    R2,R2
         IC    R2,ENT1CNT
         LTR   R2,R2
         BZ    EMENDREF            NO MORE REFS
         TM    TABLSW,TABLDA
         BZ    EMINCORE
*   PARTIAL RECORD ON DISK
         MVC   NXTTTR,ENT1PT+1     NARROW SEARCH
         LA    RACC,1              FORCE EXIT FM RTN ABOVE
         MVI   ENT1CNT,0           FORCE END PROCESSING
         B     EMDISKRD
         SPACE 5
*    PARTIAL TABLE IN CORE
EMINCORE DS    0H
         L     R1,ENT1PT           ADDR OF REF BLOCK IN TABLE
         BAL   RRET,PRNTREFS
*    NO MORE REFERENCES
EMENDREF DS    0H
         BAL   RRET,ENDREFS        PRINT RESIDUE
         L     RPTL,ENT1NXT        FOLLOW CHAIN TO NEXT ENTRY
         B     EMLIST
         SPACE 4
**  END OF THIS CHAIN SEGMENT - CONTINUE ON TO NEXT ONE
EMENDLST DS    0H
         LA    RE,4(RE)            INCR POINTER TABLE POINTER
         CR    RE,RO               END OF POINTER TABLE?
         BL    EMSTART             BR IF NOT
         SPACE 2
       DROP    RPTL           ***************
         SPACE 4
***  TABLES HAVE BEEN DUMPED - END OF PHASE 3 EXCEPT INNER MACROS
*
EMPTY    DS    0H
         MVC   WKFILE+DCBLIMCT+1-IHADCB(2),TRKCNT   RESTORE LIMCT
         OI    HDNGSW,B            SET TO PAGE EJECT ON NEXT LINE
         LH    RACC,STMTCNT        RESTORE STMT CNTR FOR MACSRCH
         TM    PHASESW,PHASEEM     TEST END OF MEMBER
         BZ    MACSRCH             NO - RETURN TO INPUT
         TITLE 'END OF A MEMBER - PROCESS INNER MACROS'
***  END OF PROCESSING MEMBER - GET NEXT ONE  ***
*
NEXTMEMB DS    0H
**  IF PROCESSING SEQUENTIAL DATA SET FORGET THE REST
         TM    IN+DCBDSORG-IHADCB,EQPO
         BZ    EOJ
         L    RPTL,PTRBLDL         LAST BLDL ENTRY
**  PASS CONTROL TO NESTED MACRO MODULE FOR POTENTIAL INNER MACROS
*     PROCESSING
*          RZ  FUNCT CODE (4)
*          R1  DCB ADDR
*          R14 RETURN
*          R15 EP & SW
*
         LA    RZ,4
         LA    R1,IN
         L     R15,NESTEP
         BALR  R14,R15
**  RETURNS R15=0 IF NO INNER MACROS
*           R15=ADDR OF INNER MACRO BLDL IS THERE ARE INNER MACROS
         MVC   HDR1A+1(L'HDR1A-1),HDR1A
         LTR   R15,R15
         BZ    NXTMNNST
         TM    NESTSW,NESTPARM     TEST NEST SPECIFIED
         BZ    NEXTMEMB            NO - LET NEST CLEAR ITS TABLE
         MVC   HDR1NM,0(R15)   MOVE NAME INTO HDNG FOR INNER MACRO
         MVC   0(BLDLSZ,RPTL),0(R15)
         MVC   HDR1A+L'HDR1A-L'KINNER-1(L'KINNER),KINNER
         OI    PHASESW,PHASEIM     FLAG INNER MACRO IN PROGRESS
         B     INIT3               GO PROCESS INNER MACRO PHASE 2
         SPACE 3
NXTMNNST DS    0H
         TM    RDSW,RDSWSEQ        TEST IF MEMBER PARMS VALID
         BO    EOJ                 BR IF NO
         LA    RPTL,BLDLSZ(RPTL)      NEXT ENTRY
         CLI   0(RPTL),255         Q. LAST MEMBER?
*           RPTL STAYS SET FOR INIT2
         BNE   INIT2               NO
*    LAST MEMBER IN BLDL PROCESSED
         MVI   0(RPTL),0           RESET END OF LIST FLAG
         LA    R1,BLDL          ** TO ESTABLISH ADDRESSABILITY **080172
       USING   BLDL,R1      ######                               080172
         MVI   DUMMY,255           SET END OF PHYSICAL LIST FLAG
       DROP    R1           ######                               080172
         SPACE 2                                                 080172
**  CHECK WHETHER TO FINISH PDS DIRECTORY PROCESSING OR GO       080172
**    PROCESS MORE PARAMETERS                                    080172
         TM    RDSW,RDSWALL        PDS DIRECTORY?                080172
         BO    PROCALL             BR IF SO                      080172
**  OTHERWISE, CHECK EOJ                                         080172
CHECKEOJ DS    0H                                                080172
         CLI   PARMSW,PRMSWEOF
         BE    EOJ
         L     R13,STG1SAVE        RESTORE STAGE 1 STACK PTR
      RPOP     R15,R2              POP STAGE 1 REGISTERS         073172
         BR    R15                 TO 'STG1RET'
         TITLE 'END OF JOB'
*    PARMS PROCESSED
EOJ      DS    0H
         L     R1,OUTBFPTR         LAST BUFFER
         MVI   0(R1),EQBLK
         EX    0,PRCLR             CLEAR IT
      CLOSE    MF=(E,OPENLIST)
         L     R13,STACKPTR        GET ORIG OF STACK AREA
         L     R13,0(R13)          ORIG OS SAVE AREA
         L     R14,12(R13)
       RETURN  (0,12),RC=0
         TITLE 'SUBROUTINES -- GET'
*
***  GET A RECORD FROM MEMBER  ***
*        ADDR OF RECORD RETURNED IN RREC
GET      DS    0H
      RPUSH    R14,RRET
         TM    RDSW,RDSWFIND       'FIND' SW
         BNO   GNOFND
         L     RSRWK,PTRBLDL       BLDL ENTRY ADDR
         LA    RSRWK,BLDLTTR-BLDLNM(RSRWK)   TTR
       FIND    IN,(RSRWK),C
GNOFND   DS    0H
         TM    RDSW,RDSWPRIM       TEST PRIMING BUFFERS
         BZ    GDEBLK              BR IF NOT
GRD      DS    0H
       GETBUF  IN,RSRWK
         BZ    ABEND
       READ    RDBPAM,SF,,(RSRWK),MF=E
         TM    RDSW,RDSWPRIM       TEST PRIMING BUFFERS
         BZ    GNODEBLK            BR IF NOT
GCHECK   DS    0H
         OI    RDSW,RDSWCHKI       INDICATE CHECK DONE
       CHECK   RDBPAM
         L     RREC,RDBPAM+EQDECBA   BUFFER
         L     RSRWK,RDBPAM+EQDECBI  IOB
         LH    RSRWK,EQIOBRES(RSRWK)  CSW RESIDUE COUNT
         LCR   RSRWK,RSRWK              -(RES CNT)
         AH    RSRWK,IN+DCBBLKSI-IHADCB         LENGTH READ
         STH   RSRWK,OLDBLKSZ           SAVE IT
         TM    RDSW,RDSWPRIM       TEST PRIMING BUFFERS
         BO    GNOFB               BR IF YES - NO BUFFER TO FREE
         L     RSRWK,OLDINBF
       FREEBUF IN,RSRWK
GNOFB    DS    0H
         ST    RREC,OLDINBF
         NI    RDSW,255-RDSWFIND-RDSWPRIM    RESET FLAGS
         B     GRD
GDEBLK   DS    0H
         TM    RDSW,RDSWREAD       TEST IF BLOCK TO BE READ
         BO    GCHECK              YES - GO CHECK THE LAST ONE
         AH    RREC,IN+DCBLRECL-IHADCB   OTHERWISE DEBLOCK NEXT RECORD
GNODEBLK DS    0H
         LH    RSRWK,OLDBLKSZ BLKSIZE
         A     RSRWK,OLDINBF  END OF OLD BUF
         NI    RDSW,RDSWNULL       RESET THE WHOLE MESS
         SR    RSRWK,RREC     REMAINING
         CH    RSRWK,IN+DCBLRECL-IHADCB    CHECK IF THIS IS LAST RECORD
         BH    GEXIT          NOT LAST REC
*    LAST RECORD
         OI    RDSW,RDSWREAD       HAVE TO ISSUE ANOTHER READ
GEXIT    DS    0H
         ST    RREC,STARTLOC       NORMAL START FOR SCAN
      RPOP     R14,RRET
         BR    RRET
         SPACE 6
       READ    RDBPAM,SF,IN,,'S',MF=L
         TITLE 'SUBROUTINES -- FREEBUF'
*    SIMULATE FREEBUF FOR ALL USED BUFFERS
*       (PLEASE MOTHER - I'D RATHER DO IT MYSELF.)
FREEBUF  DS    0H
      RPUSH    R14,RHISV
         TM    RDSW,RDSWCHKI       TEST CHECK DONE
         BO    NOCHKRQD            BR IF YES
**  CHANGE EODAD IN DCB IN CASE CHECK TAKES THAT EXIT
         L     RSRWK,IN+DCBEODAD-IHADCB    OLD EODAD + FIRST BYTE
         IC    RZ,IN+DCBEODAD-IHADCB       FIRST BYTE ONLY
         SLL   RZ,24               HI-ORDER BYTE
         LA    R14,RESTORE         RETURN ADDR
         OR    R14,RZ              COMBINE THEM
         ST    R14,IN+DCBEODAD-IHADCB      NEW EODAD
      CHECK    RDBPAM
RESTORE  DS    0H                  RETURN FOR NEW EODAD
         ST    RSRWK,IN+DCBEODAD-IHADCB    RESTORE OLD EODAD
NOCHKRQD DS    0H
         L     R14,IN+DCBBUFCB-IHADCB      BUFCB PTR
         LH    R2,4(R14)           BUFNO
         SR    RPTL,RPTL           'PREV' BFR
         BCTR  R2,0
         LH    RO,6(R14)           BFR LENGTH
         MR    RE,R2
         LA    RO,8(RO,R14)        ADDR OF BFR
SIMFBFLP DS    0H
         ST    RPTL,0(RO)          CHAIN BFRS
         LR    RPTL,RO             NEW 'PREV' BFR
         SH    RO,6(R14)           NEXT BFR
         LTR   R2,R2
         BCTR  R2,0
         BNZ   SIMFBFLP
         ST    RPTL,0(R14)         FIRST BFR
      RPOP     R14,RHISV
         BR    RRET
         TITLE 'SUBROUTINES -- PRNT, PRNTDET, PRNTDET2'
********** P R I N T   R O U T I N E S ********
*
*    ROUTINE TO PRINT SOMETHING OTHER THAN SOURCE STATEMENT
*        RZ  = DATA TO BE PRINTED
*        R2  = LENGTH OF DATA TO BE PRINTED
*        RRET= EXIT
*
PRNT     DS    0H
         MVI   PRSW,PRSWNS
         B     PRCOM
*
*    ROUTINE TO PRINT SOURCE STATEMENT & INCREMENT STATEMENT NUMBER
PRNTDET  DS    0H
         MVI   PRSW,PRSWSI
         B     PRCOM
*
*    ROUTINE TO PRINT SOURCE STATEMENT LEAVING STATEMENT NUMBER
PRNTDET2 DS    0H
         MVI   PRSW,PRSWSNI
         B     PRCOM                                             081772
*                                                                081772
*    ROUTINE TO CLEAR AREA AND PRINT HDNG IF NEC                 081772
PRNTPREP DS    0H                                                081772
         MVI   PRSW,PRSWPREP                                     081772
*
PRCOM    DS    0H
      RPUSH    R14,RRET
         L     R1,OUTBFPTR         BUF
         MVI   0(R1),EQBLK         TO CLR
***** THE FOLLOWING INSTRUCTION IS EXECUTED MANY PLACES *****
PRCLR    MVC   1(OUTLRECL-1,R1),0(R1)    CLEAR THE BUF
         CLI   PRSW,PRSWNS         IS IT MESSAGE PRINT?          081772
         BE    PRNT2               BR IF YES- BYPASS HEADING     081772
***** THE FOLLOWING INSTRUCTION IS SWITCHED BETWEEN NOP AND B *****
         NOP   PRHDNG                   HDNG IF REQ
HDNGSW   EQU   *-3
         CLI   PRSW,PRSWPREP       IS IT JUST INIT STUFF?        081772
         BE    PREXIT              BR IF YES                     081772
         B     PR2                 ELSE GO PRINT STMT            081772
         SPACE 3
* PRNT
*   RZ=MSG, R2=LNGTH, R1=BUF -- CARR CNTRL SUPPLIED
PRNT2    DS    0H                                                081772
         LR    RSRWK,RZ
         BCTR  R2,0
         EX    R2,PR1MVC
         CLI   OUTBFPTR,0          HAVE WE DONE HOF YET?         081772
         BE    PRPUT               BR IF YES                     081772
         MVI   0(R1),HOF           DO IT NOW                     081772
PRPUT    DS    0H
       PUT     OUT
         ST    R1,OUTBFPTR         NEW BUF
         AP    LINECTR,KP1
         CP    LINECTR,LINELIM     Q. NEW PAGE
         BL    PREXIT              NO
         OI    HDNGSW,B            YES
PREXIT   DS    0H
      RPOP     R14,RRET
         BR    RRET
         SPACE 5
***  PRINT FORMAT VALUES FOR FOLLOWING ROUTINE
*
PFSNO    EQU   3                   STMT NUMBER
PFSRC    EQU   14                  SOURCE STATEMENT
         SPACE 3
PR2      DS    0H
         MVC   PFSRC(80,R1),0(RREC)     SOURCE STATEMENT
***** THE FOLLOWING INSTRUCTION IS SWITCHED BETWEEN NOP & B *****
         NOP   PR3                 BYP STMT NO SW
PR2SW    EQU   *-3
         MVC   PFSNO(6,R1),EDMASK
         CVD   RACC,WKD            STMT CNT
         ED    PFSNO(6,R1),WKD+5   STATEMENT NUMBER
PR2A     DS    0H
         OI    PR2SW,B                  BYPASS
         CLI   PRSW,PRSWSI
         BNE   PRPUT               BR IF PRNTDET2
         NI    PR2SW,255-B              NO BYPASS
         LA    RACC,1(RACC)        INCR STMT CNT
         B     PRPUT
PR3      DS    0H
         MVC   PFSRC+15-WKKEYLN(WKKEYLN,R1),KBLK8  BLANK TRASH
         B     PR2A
         SPACE 2
PR1MVC   MVC   0(0,R1),0(RSRWK)
         SPACE 11
***  HEADING ROUTINE
*
PRHDNG   DS    0H
      RPUSH    R14,R2
         MVC   0(HDR1SZ,R1),HDR1   PG HDNG
         AP    PGCNT,KP1
         ED    HDR1PG-HDR1(L'HDR1PG,R1),PGCNT
       PUT     OUT
         MVI   0(R1),EQBLK
         EX    0,PRCLR                  CLR
         LA    R2,HDR2ASZ               COL HDNG
         LA    RSRWK,HDR2A
         TM    PHASESW,PHASE3      TEST PHASE 3
         BZ    PRHDNG2
         LA    R2,HDR2BSZ               XREF HDNG
         LA    RSRWK,HDR2B
PRHDNG2  DS    0H
         BCTR  R2,0
         EX    R2,PR1MVC
       PUT     OUT
         ST    R1,OUTBFPTR
         NI    HDNGSW,255-B
         SP    LINECTR,LINECTR
         MVI   0(R1),EQBLK
         EX    0,PRCLR
         MVI   0(R1),DS            DOUBLE SPACE NEXT LINE
      RPOP     R14,R2
         L     R1,OUTBFPTR         RELOAD NEW BUFFER ADDR
         B     HDNGSW-1
         TITLE 'SUBROUTINES -- TRTRTN'
***  TRANSLATE & TEST ROUTINE  ***
*
TRTRTN   DS    0H
*     REG 1 = START OF SEARCH
*     REG 2 = FUNCTION BYTE
         LA    R2,71(RREC)
         SR    R2,R1               LENGTH OF TRT
         BNP   TRTEXIT0            IF ZERO (OR NEG) RET+0
         BCTR  R2,0                FOR TRT
         EX    R2,TRTTRT           TRT
         BNZ   TRTEXIT
TRTEXIT0 DS    0H
         SR    R2,R2
TRTEXIT  DS    0H
         BR    RRET
         SPACE 2
TRTTRT   TRT   0(0,R1),TRTBL
         SPACE 2
TRTBL    DC    256X'08'      MAKE ALL INVALID                    91153
         ORG   TRTBL+C'A'    ALLOW A-I                           91153
         DC    9X'00'                                            91153
         ORG   TRTBL+C'J'    ALLOW J-R                           91153
         DC    9X'00'                                            91153
         ORG   TRTBL+C'S'    ALLOW S-Z                           91153
         DC    8X'00'                                            91153
         ORG   TRTBL+C'0'    ALLOW 0-9                           91153
         DC    10X'00'                                           91153
         ORG   TRTBL+C'$'    ALLOW DOLLAR SIGN                   91153
         DC    X'00'                                             91153
         ORG   TRTBL+C'@'    ALLOW 'AT' SIGN                     91153
         DC    X'00'                                             91153
         ORG   TRTBL+C'#'    ALLOW POUND SIGN                    91153
         DC    X'00'                                             91153
         ORG   TRTBL+C'_'    ALLOW UNDERLINE                     91153
         DC    X'00'           VALID IN ASSEMBLER H NAMES        91153
         ORG   TRTBL+EQAMP
         DC    X'04'          '&' = 4
         ORG   TRTBL+EQEQ
         DC    X'08'          '=' = 8
         ORG   TRTBL+EQLP
         DC    X'08'          '(' = 8
         ORG   TRTBL+EQRP
         DC    X'08'          ')' = 8
         ORG   TRTBL+EQQT
         DC    X'08'          ''' = 8
         ORG   TRTBL+EQPER
         DC    X'08'          '.' = 8
         ORG   TRTBL+EQPLUS
         DC    X'08'          '+' = 8
         ORG   TRTBL+EQMINUS
         DC    X'08'          '-' = 8
         ORG   TRTBL+EQAST
         DC    X'08'          '*' = 8
         ORG   TRTBL+EQSLSH
         DC    X'08'          '/' = 8
         ORG   TRTBL+EQCMM
         DC    X'0C'          ',' = 12
         ORG   TRTBL+EQBLK
         DC    X'10'          ' ' = 16
         ORG   ,
         TITLE 'SUBROUTINES -- FINDCHAR,LOCNBLK'
***  ROUTINE TO FIND A SPECIFIED CHARACTER  ***
**
*    ENTRY PARAMETERS:
*        REG 1 = START ADDR FOR SEARCH 0(RREC).LE.PARM.LE.70(RREC)
*        REG 2 = CHAR TO FIND
*        RRET  = EXIT ADDR
*    EXIT PARAMETERS;
*        REG 15 = 0 - CHAR FOUND
*                 4 - CHAR NOT FOUND
*        REG 1 = ADDR OF CHAR
**
FINDBLK  DS    0H
         LA    R2,EQBLK
FINDCHAR DS    0H
      RPUSH    RE,RO
         SR    R15,R15
         LA    RE,1
         LA    RO,70(RREC)
         CR    R1,RO
         BH    FCNF
FNDCHRLP DS    0H
         EX    R2,FNDCHCLI
***** THE FOLLOWING INST IS SWITCHED BETWEEN BE & BNE *****
FNDCHBC  EQU   *+1
         BE    FCEXIT
         BXLE  R1,RE,FNDCHRLP
FCNF     LA    R15,4
FCEXIT   DS    0H
      RPOP     RE,RO
         LTR   R15,R15             SET CONDITION CODE
         BR    RRET
         SPACE 2
FNDCHCLI CLI   0(R1),0
         SPACE 5
***  ROUTINE TO FIND FIRST NON-BLANK CHAR
*
LOCNBLK  DS    0H
*
*    ENTRY:
*        R1  = START OF SEARCH
*        RRET= EXIT RETURN
*    EXIT:
*        R1  = NON-BLANK CHAR ADDR
*        R15 = 0 - NON-BLANK FND
*              4 - NON-BLANK NOT FND
*
      RPUSH    RRET
         XI    FNDCHBC,B           SWITCH BE TO BNE
         BAL   RRET,FINDBLK
         XI    FNDCHBC,B           RESTORE BNE TO BE
      RPOP     RRET
         LTR   R15,R15             RESET CONDITION CODE
         BR    RRET
         TITLE 'SUBROUTINES -- TABENT'
***  ROUTINE TO ENTER A SYMBOL IN THE DEFINITION TABLE  ***
*
*        R1 = ADDR OF SYMBOL
*        R2 = LENGTH OF SYMBOL
*        RRET = RETURN ADDRESS
*
         SPACE 1
       USING   TABLE1,RPTL    ***************
         SPACE 2
TABENT   DS    0H
      RPUSH    R14,RRET
         L     RPTL,LOAVAIL        LOAD TABLE POINTER
**   CHECK SUFF RM IN TABLE
TABERENT DS    0H                  RETURN POINT FROM TABLE DUMP
         LA    RSRWK,ENT1SZ(RPTL)
         C     RSRWK,HIAVAIL
         BNH   TEADD
         SPACE 2
**  NO ROOM LEFT IN SYMBOL TABLE -- DUMP REFERENCE TABLES ONTO DISK
*    IF POSSIBLE, OTHERWISE ABORT THIS MEMBER
TABLOFLW DS    0H
         LA    R14,TABERENT        FOR TABLE DUMP
         TM    TABLSW,TABLDA
         BZ    DUMPTABL
         BAL   RRET,PRNTDET
       PRMSG   ERRTABOF,ERRTOSZ                                  081772
**  USE PHASE 3 TO CLEAN UP SYSUT1 BY DUMPING THE TABLES
         B     ENDMEMB
         SPACE 3
TEADD    DS    0H
         XC    TABLE1(ENT1SZ),TABLE1  CLEAR ALL THE CRAP
         CH    R2,HKEYLN           CHECK OVER MAX
         BNH   *+8
         LH    R2,HKEYLN           LIMIT TO MAX
         LTR   R2,R2
         BZ    *+6
         BCTR  R2,0                FOR MVC
         MVC   ENT1NM,KBLK8        BLKS
         EX    R2,TEMVC            MOVE SYM
         LR    R2,RACC             STMT CNTR
         LR    R1,RPTL             POINT TO CURRENT ENTRY
         BAL   RRET,SRCHTABL       GO FIND PLACE IN CHAIN
         BZ    TEDUP               BR IF ENTRY ALREADY THERE
TENODUP  DS    0H
         LR    RPTL,R1             RESTORE ADDR OF CURRENT ENTRY
         MVC   ENT1NXT,0(R15)      OLD CHAIN POINTER
         ST    RPTL,0(R15)         CHAIN NEW ENTRY
         LA    RSRWK,ENT1SZ(RPTL)  ADDR OF NEXT AVAIL SLOT
         ST    RSRWK,LOAVAIL
TECOMMON DS    0H
         STH   R2,ENT1DF           DEFINING STATEMENT
         MVC   ENT1TYPE,TYPESW     TYPE OF SYMBOL
      RPOP     R14,RRET
         BR    RRET
         SPACE 2
TEMVC    MVC   ENT1NM(0),0(R1)
         SPACE 4
**  SYMBOL ALREADY EXISTS IN THE TABLE -- POSSIBLE DUPLICATE DEFN
TEDUP    DS    0H
         LH    RSRWK,ENT1DF        GET PREV DEFN STMT NUMBER
         LTR   RSRWK,RSRWK         TEST IF ACTUALLY DEFINED BEFORE
         BZ    TECOMMON            BR IF NOT PREV DEFINED
***  DUPLICATE SYMBOL DEFINITION
         LNR   R2,R2               FLAG DUP WITH NEG DEFN STMT
         B     TENODUP             GO PUT IT INTO DEFN CHAIN
         TITLE 'SUBROUTINES -- SRCHTABL'
***  ROUTINE TO SEARCH THE DEFINITION TABLES FOR A SPECIFIED SYMBOL
*
*      ENTRY LINKAGE:
*        R1 = ADDRESS OF SYMBOL IN A PLACE WHERE THE SYMBOL MAY
*              BE COMPARED FOR THE FULL MAXIMUM SYMBOL LENGTH
*
*      EXIT RETURNS:
*        RZ = RETURN CODE
*              0 IF TABLE ENTRY MATCHES SPECIFIED SYMBOL
*              4 IF NO TABLE ENTRY FOR SPECIFIED SYMBOL
*        RPTL = ADDR OF TABLE ENTRY MATCHING SYMBOL IF RZ=0
*               ADDR OR NEXT TABLE ENTRY HIGHER THAN SYMBOL IF RZ=4
*        R15 = ADDR OF CHAIN POINTER POINTING TO ENTRY WHOSE ADDR
*              IS IN RPTL
*
*      CONDITION CODE FOR VALUE OF RZ IS SET BEFORE EXIT
*
SRCHTABL DS    0H
      RPUSH    R15,RRET
         MVC   WKC,1(R1)           FIRST CHAR OF SYMBOL
         LA    R15,VSPTR           VAR SYM CHAIN POINTER
         CLI   0(R1),EQAMP         IS IT VAR SYM?
         BE    STHVBS              BR IF YES
         LA    R15,SSPTR           SEQ SYM CHAIN POINTER
         CLI   0(R1),EQPER         IS IT SEQ SYM?
         BE    STHVBS              BR IF YES
         MVC   WKC,0(R1)           FIRST CHAR OF MISC SYMBOL
         LA    R15,MSPTR           MISC SYM CHAIN POINTER
         SPACE 2
**  R15 HAS ADDR OF CHAIN POINTER FOR FIRST CHAIN SEGMENT
STHVBS   DS    0H
         NI    WKC,X'30'           CLEAR ALL THE TRASH BITS
         BZ    STSRCH         BR IF SYMBOL IS IN FIRST SEGMENT
         TM    WKC,X'30'           TEST NUMERIC FIRST CHAR
         BM    *+8                 BR IF NOT NUMERIC
         NI    WKC,X'20'           PUT IT INTO THIRD SEGMENT
         SR    RSRWK,RSRWK
         IC    RSRWK,WKC           INDEX BYTE
         SRL   RSRWK,2             INDEX VALUE *4
         LA    R15,0(RSRWK,R15)    ACTUAL CHAIN SEGMENT PTR ADDR
         SPACE 2
**  NOW SEARCH THE TABLE SEGMENT
STSRCH   DS    0H
         L     RPTL,0(R15)         ENTRY ADDR
         LTR   RPTL,RPTL           TEST END OF CHAIN
         BZ    STNF                BR IF YES -- NOT FOUND
         CLC   0(WKKEYLN,R1),ENT1NM
         BL    STNF                BR IF SYMBOL NOT IN TABLE
         LA    R15,ENT1NXT         CHAIN POINTER ADDR FOR NXT ENTRY
         BE    STFND               SYMBOL WAS FOUND
         B     STSRCH              CONTINUE SEARCH
         SPACE 3
**   SYMBOL WAS FOUND
STFND    DS    0H
         SR    RZ,RZ
         B     STEXIT
**  SYMBOL WAS NOT FOUND
STNF     DS    0H
         LA    RZ,4
**  EXIT
STEXIT   DS    0H
         LTR   RZ,RZ               SET CC
      RPOP     R1,RRET,R15         RESET REGS
         BR    RRET
         TITLE 'SUBROUTINES -- REFSYM'
***  ROUTINE TO ENTER A SYMBOL REFERENCE IN THE TABLE ***
*
*        R1  = LOC OF SYM
*        R2  = LNGTH OF SYM
*
REFSYM   DS    0H
      RPUSH    R14,RALL
         TM    OPSW,OPSWSETX       TEST FOR OP SETA/B/C
         BZ    REFSET
         CLR   RREC,R1             CHECK IF THIS IS THE ONE BEING
         BNE   REFSET
         CLI   0(R1),EQAMP         IS IT SET SYM BEING MODIFIED
         BNE   REFSET              BR IF NO
         LNR   RACC,RACC           MAKE STMT NEG
REFSET   DS    0H
         MVC   WK8,KBLK8
         CH    R2,HKEYLN           CHECK OVER MAX
         BNH   *+8
         LH    R2,HKEYLN           LIMIT TO MAX
         LTR   R2,R2
         BZ    *+6
         BCTR  R2,0
         EX    R2,REFMVC           MOVE SYMBOL TO WORK AREA
         LA    R1,WK8              ADDR OF WORK AREA
         BAL   RRET,SRCHTABL       SEARCH FOR DEFN
         BZ    REFFND              BR IF ENTRY FOUND
         SPACE 3
**  NOT FOUND IN THE TABLE - GO ENTER IT
         LA    R2,WKKEYLN          MAX SIZE
         BAL   RRET,TABENT         GO ENTER IT INTO DEFN TABLE
         XC    ENT1DF,ENT1DF       CLEAR THE DEFINITION STMT NO
         SPACE 4
REFFND   DS    0H
         TM    TABLSW,TABLDA
         BO    REFONDA             BR IF REFS NOT IN CORE
**  ENTER INTO TABLE
         LH    RSRWK,WKFILE+DCBBLKSI-IHADCB
         L     RO,ENT1PT           REF AREA PTR
         LA    RO,0(RO)            GET RID OF DISK CNT
         LTR   RO,RO               TEST AREA OBTAINED
         BNZ   RFHVAREA            YES
         L     RO,HIAVAIL          UPPER LIMIT OF AVAIL SPACE
         SR    RO,RSRWK            ADDR OF NEW ENTRY
         LA    R14,REFFND          IN CASE DUMP OF TABLE REQD
         C     RO,LOAVAIL          IS THERE ROOM FOR THIS ENTRY
         BL    DUMPTABL            BR IF NO
         ST    RO,HIAVAIL          NEW UPPER LIMIT
         ST    RO,ENT1PT           STORE REF TABLE ADDR IN DEFN
RFHVAREA DS    0H
         SR    RE,RE
         IC    RE,ENT1CNT          CURRENT CNT OF REFS
*** FOLLOWING IS DUP OF CODING IN REFONDA ***
         SLL   RE,1                *2
         STH   RACC,0(RE,RO)       STATEMENT NO IN REF
         LA    RE,2(RE)            NEXT ENTRY INDEX
         CR    RE,RSRWK            IS REF BLOCK FULL?
         BNL   RFENTFUL            BR IF YES
RFUPCNT  DS    0H
         SRL   RE,1                BACK TO ACTUAL COUNT
         STC   RE,ENT1CNT          UPDATE IN DEFN
         B     REFEXIT
         SPACE 8
**  THIS TABLE SECTION IS FULL - WRITE IT ON DISK.
*
RFENTFUL DS    0H
       WRITE   BDAM,DAF,,(RO),'S',(RPTL),NXTTTR,MF=E
       CHECK   BDAM
RFENTFL2 DS    0H
         SR    R2,R2
         IC    R2,ENT1PT           INCR DISK REC CNT
         LA    R2,1(R2)
         STC   R2,ENT1PT
         MVI   ENT1CNT,0           CLEAR THE REF COUNT
         L     RWK,NXTDSKAD
         LA    RWK,1(RWK)
         ST    RWK,NXTDSKAD
         SPACE 8
REFEXIT  DS    0H
**  RESTORE THE STMTCNT TO A POSITIVE VALUE BEFORE RETURNING
         LPR   RACC,RACC           RESTORE STMT CNT TO POS
      RPOP     R14,RALL
         BR    RRET
         SPACE 2
REFMVC   MVC   WK8(0),0(R1)
         EJECT ,
***  INSUFFICIENT SPACE FOR REF TABLES IN CORE
*
REFONDA  DS    0H
         SR    RE,RE
         IC    RE,ENT1CNT          COUNT IN CURR BLOCK
         LA    RO,WK80        TABLE
         LH    RSRWK,WKFILE+DCBBLKSI-IHADCB
         LTR   RE,RE               ARE THERE ANY REFS IN CURR BLK
         BZ    REFNEWDA
      READ     BDAM,DI,,(RO),'S',0,ENT1PT+1,MF=E   READ CURR BLOCK
       CHECK   BDAM
***  FOLLOWING IS DUP OF CODING IN RFHVAREA ***
         SLL   RE,1
         STH   RACC,0(RE,RO)
         LA    RE,2(RE)
      WRITE    BDAM,DI,MF=E        WRITE UPDATED RECORD
       CHECK   BDAM
         CR    RE,RSRWK            IS BLOCK FULL
         BL    RFUPCNT             BR IF NOT
         B     RFENTFL2            BR IF YES
         SPACE 6
**  NEED A NEW RECORD - (NO TABLE)
REFNEWDA DS    0H
         XC    WK80,WK80
         STH   RACC,0(RO)
         LA    RE,1
RFNEWDA2 DS    0H
       WRITE   BDAM,DAF,,(RO),'S',(RPTL),NXTTTR,MF=E
       CHECK   BDAM
         MVC   ENT1PT+1(3),NXTTTR  SAVE FEEDBACK TTR AS CURR BLOCK
         L     RSRWK,ENT1PT        REC CNT + TTR
         LA    RSRWK,1(RSRWK)      TTR+1
         ST    RSRWK,NXTDSKAD      SAVE AS NEXT TTR AVAIL
***** THE FOLLOWING INSTRUCTION IS SWITCHED BETWEEN NOPR & BR *****
         NOPR  RRET
DUMPSW   EQU   *-1
         STC   RE,ENT1CNT
         B     REFEXIT
         TITLE 'SUBROUTINES -- DUMPTABL'
***  TABLE IS SUDDENLY FULL - DUMP EVERYTHING ONTO DISK
DUMPTABL DS    0H
      RPUSH    R14,RHISV
         L     RPTL,GETMAIN        START OF TABLE
         L     RE,LOAVAIL
DUMPLP   DS    0H
         SR    RSRWK,RSRWK
         IC    RSRWK,ENT1CNT       CNT OF REFS
         LTR   RSRWK,RSRWK
         BZ    NODUMP              NOTHING TO DUMP
         L     RO,ENT1PT           REF TABLE
         OI    DUMPSW,B            FORCE RETURN
         BAL   RRET,RFNEWDA2
NODUMP   DS    0H
         LA    RPTL,ENT1SZ(RPTL)   NXT ENTRY
         CR    RPTL,RE             IS IT THE END OF DEFN TABLE
         BL    DUMPLP
         MVC   HIAVAIL,GETMAIN+4   CLEAR THE REF TABLE SPACE
         OI    TABLSW,TABLDA
         NI    DUMPSW,255-B        RESTORE SWITCH
      RPOP     R14,RHISV
         BR    R14
         SPACE 3
       DROP    RPTL           ***************
         TITLE 'SUBROUTINES - SYMSPLIT,MVSPLIT'
***  ROUTINE TO PROCESS SYMBOL SPLIT OVER CONTINUATION OR BUTTING TO
**          CONTINUATION COLUMN.
*    ENTRY PARAMETERS:
*        RWK  = PTR TO START OF SYMBOL
*        RRET = EXIT ADDRESS
*    EXIT PARAMETERS:
*        R15  = RETURN CODE
*                0 = SYM UP TO CONTIN COL BUT NO CONTIN
*                4 = SYM SPLIT OVER CONTIN
*                8 = SYM TOO FAR REMOVED FROM CONTIN - ETWAS SCREWY
*        R1   = POINTS TO CONTIN COL (WHICH IS DELIM IF RC=0)
*        R2   = LENGTH
*                RC=0 LENGTH OF SYMBOL
*                RC=4 LENGTH OF FIRST PART OF SPLIT SYM
*                RC=8 UNDEFINED
**
***
SYMSPLIT DS    0H
         SR    R15,R15        ASSUME ZERO
*    SEE IF SYMBOL STARTED IN LAST 8 COLS
         LA    R2,71(RREC)    CONTIN COL
         LR    R1,R2          ALSO
         SR    R2,RWK         LENGTH
         CH    R2,HKEYLN           Q.  LN GT 8?
         BH    SSRET8         YES.  SOMETHING SCREWY
*    IF CONTIN IS BLANK CONTIN IS DELIM.  RETURN 0.
         CLI   0(R1),EQBLK
         BCR   EQ,RRET
*    OTHERWISE RETURN 4
         LA    R15,4
         BR    RRET
         SPACE 2
SSRET8   DS    0H
         LA    R15,8
         BR    RRET
         SPACE 12
***  ROUTINE TO SHIFT FIRST PART OF SPLIT SYM TO FOLL STMT
*
*    ENTRY PARAMETERS SAME AS EXIT PARAMETERS WITH RC=4 ABOVE
*        RRET = RETURN ADDRESS
*    EXIT PARAMETERS:
*        R1   = PTR TO START OF RELOCATED SYMBOL
*        R2   = ENTRY VALUE -1
*        R14  = EXIT
**
***
MVSPLIT  DS    0H
         LR    R14,RRET
         BAL   RRET,PRNTDET2
         BAL   RRET,GET
         LA    R1,15(RREC)         NORMAL CONTIN
         ST    R1,STARTLOC         START OF CONTIN SCAN
         SR    R1,R2               TO START OF RELOC SYM
         BCTR  R2,0                FOR EX
         MVC   0(0,R1),0(RWK)    ATTACH FROM PREV STMT TO NEW ONE
         EX    R2,*-6
         BR    R14
         TITLE 'SUBROUTINES -- PRNTREFS'
***  ROUTINE TO FORMAT & PRINT REFS  ***
**
*
*    ENTRY:
*        RPTL= TABLE ENTRY PTR
*        R2  = NO. OF REFS TO PROCESS
*        R1  = AREA CONTAINING REFS
*        RRET= EXIT ADDR
*    USES:
*        R1  = PRINT BUFFER
*        RSRWK = INDEX REG FOR PRINT AREA
*        R15 = WORK REGISTER
*        RACC= COUNT OF REFS PROCESSED
*        RE  = REF AREA FROM R1
*
PRNTREFS DS    0H
      RPUSH    R14,RHISV
         SPACE 2
       USING   TABLE1,RPTL    ***************
         SPACE 2
         LR    RE,R1               REF AREA
         SR    RACC,RACC           LOC CNTR
PREFSLP  DS    0H
         SPACE 3
***  PRINT FORMAT VALUES
*
PFS      EQU   1                   SYMBOL
PFT      EQU   11                  TYPE
PFD      EQU   15                  DEFINITION STATEMENT
PFR      EQU   23                  REFERENCES START
         SPACE 5
         TM    PHASESW,PHASENRF    TEST LINE NOT STARTED YET
         BZ    PRFNOCLR
**  GO CLEAR THE BUFFER AND PRINT HEADING IF REQUIRED
         BAL   RRET,PRNTPREP                                     081772
         SR    RSRWK,RSRWK
PRFNOCLR DS    0H
         L     R1,OUTBFPTR         GET CURR BFR ADDR
         TM    PHASESW,PHASENSY    TEST SYMBOL PRINTED YET
         BZ    PRFSNONM
***  PRINT DEFINITION INFORMATION ON FIRST LINE ONLY
         SR    RSRWK,RSRWK         INDEX REG
**   GET SYMBOL NAME
         MVC   PFS(WKKEYLN,R1),ENT1NM    SYMBOL NAME
**   GET SYMBOL TYPE
         SR    R15,R15             WORK REGISTER
         IC    R15,ENT1TYPE        TYPE INDICATOR
         SLA   R15,2          INDEX VALUE *4 (SLA TO SET CC)
         LA    R15,PTYPTABL(R15)   GET TYPE FROM TABLE
         BNZ   PRFTYPE             BR IF DEFINED TYPE
         MVC   PFT(L'KUNDEF,R1),KUNDEF    UNDEFINED
         B     PRFSNONM
         SPACE 4
PRFTYPE  DS    0H                  NOW PUT IT INTO PRINT LINE
         MVC   PFT(4,R1),0(R15)
**   GET DEFINITION STATEMENT NUMBER
         LH    R15,ENT1DF
         CVD   R15,WKD             STATEMENT NO
         MVC   PFD(6,R1),EDMASK
         ED    PFD(6,R1),WKD+5
         BNM   PRFSNONM
         MVC   PFR(L'KDUP,R1),KDUP   DUPLICATE SYMBOL
         B     PRFSFULL            THERE SHOULDN'T BE ANY REFS
PRFSNONM DS    0H
         NI    PHASESW,255-PHASENSY   INDICATE SYMBOL PROCESSED
***  NOW PROCESS REFERENCES
         CR    RACC,R2
         BNL   PRFTSTFL
         LA    R15,0(RACC,RACC)    CNTR *2
         LH    R15,0(R15,RE)       INDEXED REF
         CVD   R15,WKD
         LTR   R15,R15             TEST NEGATIVE
         LA    R15,PFR(RSRWK,R1)   INTO PRINT BUFFER
         MVC   0(6,R15),EDMSK2
         BNM   *+8       (CC SET BY LTR ABOVE)
         MVI   0(R15),EQAST        FILLER CHAR IS '*'
         ED    0(6,R15),WKD+5
         MVI   0(R15),EQBLK        REPLACE FIRST CHAR WITH BLANK
         LA    RSRWK,6(RSRWK)      INCR INDEX
         LA    RACC,1(RACC)        INCR CNTR
         NI    PHASESW,255-PHASENRF  LINE IS NO LONGER EMPTY
PRFTSTFL DS    0H
         TM    PHASESW,PHASELL     IS THIS REQ TO PRNT LAST LINE
         BO    PRFSFULL            YES - GO DO IT
         CH    RSRWK,HPRFLIM    Q. BFR FILLED?
         BL    PRFNTFUL
PRFSFULL DS    0H
       PUT     OUT                 WRITE
         ST    R1,OUTBFPTR
         AP    LINECTR,KP1
         CP    LINECTR,LINELIM
         BL    *+8
         OI    HDNGSW,B            FULL PAGE
         OI    PHASESW,PHASENRF    INDICATE THAT NEW LINE IS EMPTY
PRFNTFUL DS    0H
         CR    RACC,R2          Q. ALL REFS PROCESSED?
         BL    PREFSLP             GO AGAIN
*   ALL REFS PROCESSED THIS TRIP - DON'T PRINT
PREFEXIT DS    0H
         NI    PHASESW,255-PHASELL   TURN OFF LAST LINE FLAG ANYWAY
       RPOP    R14,RHISV
         BR    RRET
         SPACE 8
**  ENTER HERE WHEN ALL REFS PROCESSED - WRITE LAST RECORD
ENDREFS  DS    0H
       RPUSH   R14,RHISV
         OI    PHASESW,PHASELL     INDICATE LAST LINE REQUEST
         LR    RACC,R2
         TM    PHASESW,PHASENSY    TEST IF ANY REFERENCES AT ALL
         BZ    ENDREFS2            YES
**  NO REFS TO SYMBOL -- DON'T PRINT IT IF ITS A SYSTEM VARIABLE
         CLI   ENT1TYPE,TYPSYS
         BE    PREFEXIT
         B     PREFSLP
         SPACE 3
**   SOME REFS WERE MADE - IF LINE IS EMPTY, EXIT.
ENDREFS2 DS    0H
         TM    PHASESW,PHASENRF
         BO    PREFEXIT
         B     PRFSFULL
         TITLE 'SYNAD ROUTINE FOR WORK FILE'
*** SYNAD ***
*
WKSYNAD  DS    0H
         ST    R13,72(R13)         BYPASS IOS SAVE AREA
         LA    R13,72(R13)
         LR    R15,R13             SAVE STACK POINTER
     RPUSH     RZ,RHISV
         SPACE 2
SYNADR0  EQU   4                   LOC OF R0 IN SA STACK
SYNADR1  EQU   8                   LOC OF R1 IN SA STACK
         SPACE 2
**  PROCESS ONLY HARDWARE ERRORS AND SPACE NOT FOUND - ELSE ABEND
         TM    SYNADR1(R15),X'2C'
         BZ    WSYNANAL
SYNABEND DS    0H
       ABEND   659,DUMP
WSYNANAL DS    0H
         TM    SYNADR1(R15),X'02'
         BO    SYNIOERR
         TM    SYNADR1(R15),X'01'
         BO    SYNNOSPC
         TM    SYNADR1(R15),X'80'
         BO    SYNRDERR
         TM    SYNADR1(R15),X'40'
         BZ    SYNABEND
**   OUTPUT ERROR
         L     RWK,SYNADR0(R15)    DECB PTR
         TM    1(RWK),X'57'
         BNZ   SYNABEND
         TM    1(RWK),X'08'
         BO    SYNIOERR
         TM    1(RWK),X'20'
         BO    SYNNOSPC
*   OUT REC NOT FOUND
         B     SYNABEND
         SPACE 3
*    INPUT ERROR
SYNRDERR DS    0H
         L     RWK,SYNADR0(R15)    DECB PTR
         TM    1(RWK),X'F7'
         BNZ   SYNABEND
         B     SYNIOERR            PERM ERROR
         SPACE 3
*    I/O ERROR
SYNIOERR DS    0H
       PRMSG   ERRIO,ERRIOSZ                                     081772
         B     SYNFEOV
         SPACE 5
**  NO SPACE AVAILABLE FOR THIS RECORD (SHOULD BE OUTPUT ONLY)
SYNNOSPC DS    0H
       PRMSG   ERRIOSPC,ERIOSPSZ                                 081772
SYNFEOV  DS    0H
**  IF THIS OCCURRED DURING PHASE 3 IT'S A PROGRAM ERROR
         TM    PHASESW,PHASE3      TEST PHASE 3
         BO    SYNABEND
         BAL   RRET,FREEBUF
      RPOP     RZ,RHISV
         L     R14,IN+DCBEODAD-IHADCB      PHASE 2 - DUMP TABLES
         L     R13,0(R13)          RESTORE TO BE SAME AS ENTRY
         BR    R14                 AND EXIT
         TITLE 'CONSTANTS'
***
**
*     GETMAIN ORIGINALLY CONTAINS THE MINIMUM AND MAXIMUM CORE TO BE
*        OBTAINED FOR TABLE SPACE.
*     IT IS LATER USED FOR STORING THE LOWER AND UPPER BOUNDARIES
*        OF THE ACTUAL TABLE.
**
***
GETMAIN  DC    F'8192,300000'
***
**
*    FIRST BYTE OF NESTEP IS USED AS A SWITCH
**
***
NESTEP   DC    V(MACRFNST)
         SPACE 3
OUTEXLST DS    0F                  DCB EXIT LIST FOR SYSPRINT
         DC    X'85'
         DC    AL3(CHKBLKSI)
H8       DC    H'8'
HKEYLN   DC    AL2(WKKEYLN)        H ALIGNED
TRKCNT   DC    H'0'                TOTAL TRACKS IN SYSUT1
HPRFLIM  DC    H'96'   (16*6)      LIMIT LENGTH OF REFS IN BUFFER
         SPACE 3
KP1      DC    P'1'
LINELIM  DC    P'60'                                            GP15120
KMEMBER  DC    C'MEMBER'
KOPCODES DC    C'OPCODES'
KBLK8    DC    CL(WKKEYLN)' '
KMACRO   DC    C'MACRO '
KLCL     DC    C'LCL'
KGBL     DC    C'GBL'
KSET     DC    C'SET'
PTSTAR   DC    C'.*'
KREPRO   DC    C'REPRO '
KAGO     DC    C'AGO '
KAIF     DC    C'AIF '
KCOPY    DC    C'COPY '                                          91160
KMEND    DC    C'MEND '
KEND     DC    C'END '
KUNDEF   DC    C'*UNDEFINED*'
KNEST    DC    C'NEST'
KINNER   DC    C'INNER'
KCSECT   DC    C'CSECT '                                         080272
KDSECT   DC    C'DSECT '                                         080272
NESTMOD  DC    CL8'MACRFNST'
EDMASK   DC    XL6'402020202120'
EDMSK2   EQU   EDMASK
         DC    XL6'402120202020'
KDUP     DC    C'**DUPLICATE**'
         SPACE 3
SYSVRSYM EQU   *
         DC    CL(WKKEYLN)'&&SYSNDX'
         DC    CL(WKKEYLN)'&&SYSECT'
         DC    CL(WKKEYLN)'&&SYSLIST'
         DC    CL(WKKEYLN)'&&SYSTIME'                            081872
         DC    CL(WKKEYLN)'&&SYSDATE'                            081872
         DC    CL(WKKEYLN)'&&SYSPARM'                            081872
         DC    CL(WKKEYLN)'&&SYSLOC'                             081872
         DC    CL(WKKEYLN)'&&SYSSTYP'                            081872
         SPACE 3
HDR1     DC    AL1(HOF)
         DC    C'   MEMBER '
CURRMEMB DC    CL8' '
HDR1A    DC    CL16' '                                           080272
         DC    C'MACRO CROSS-REFERENCE LISTING FOR '
HDR1NM   DS    CL8
         DC    CL1' '                                            080272
HDR1TYP  DC    CL5' '                                            080272
         DC    CL13' ',C'VERS ',AL3(VERSION),CL7' ',C'PAGE'
HDR1PG   DC    X'40202120'
HDR1SZ   EQU   *-HDR1
         SPACE 2
HDR2A    DC    AL1(DS),C' STMT NO.    SOURCE STATEMENT'
HDR2ASZ  EQU   *-HDR2A
         SPACE 2
HDR2B    DC    AL1(DS),C' SYMBOL   TYPE  DEFN    REFERENCES'
HDR2BSZ  EQU   *-HDR2B
         SPACE 2
ERRNOPRO DC    AL1(DS),C'*** NO PROTOTYPE STATEMENT ***'
ERRNPSZ  EQU   *-ERRNOPRO
         SPACE 3
ERRNOSS  DC    AL1(SS),C'*** NO SEQUENCE SYMBOL FOUND IN AGO/AIF ***'
ERRNOSSZ EQU   *-ERRNOSS
         SPACE 3
ERRNTFND DC    AL1(HOF),C'MEMBER ('
ERRNFNM  DS    CL8
         DC    C') NOT FOUND'
ERRNFSZ  EQU   *-ERRNTFND
         SPACE 3
ERRTABOF DC    AL1(TS),C'SYMBOL TABLE OVERFLOW - MEMBER TERMINATED.'
ERRTOSZ  EQU   *-ERRTABOF
         SPACE 3
ERRIO    DC    AL1(TS),C'I/O ERROR ON SYSUT1.  PROCESSING TERMINATED.'
ERRIOSZ  EQU   *-ERRIO
         SPACE 3
ERRIOSPC DC    AL1(TS)
         DC    C'INSUFFICIENT SPACE IN SYSUT1.  PROCESSING TERMINATED'
ERIOSPSZ EQU   *-ERRIOSPC
         SPACE 3
ERRCC    DC    AL1(SS),C'PRECEDING PARAMETER RECORD IS INVALID.  '
         DC    C'SCAN TERMINATED AT INDICATED LOCATION.'
ERRCCSZ  EQU   *-ERRCC
         SPACE 3
ERRINVSQ DC    AL1(DS),C'** INVALID STATEMENT SEQUENCE **'
ERRISSZ  EQU   *-ERRINVSQ
         SPACE 3
ERRDSORG DC    AL1(TS),C'NO MEMBERS SPECIFIED -- '               080172
         DC    C'ENTIRE DIRECTORY PROCESSED.'                    080172
ERRDSOSZ EQU   *-ERRDSORG
ERRNNEST DC    AL1(SS),C'NEST PARAMETER IGNORED'                GP03151
ERRNNESZ EQU   *-ERRNNEST                                       GP03151
         SPACE 3
ERRNONST DC    AL1(TS),C'** PARM=NEST IGNORED FOR NON-PARTITIONED '
         DC    C'DATA SET **'
ERRNNSZ  EQU   *-ERRNONST
         SPACE 3                                                 081772
ERRNOTOP DC    AL1(TS),C'SYSIN DATA SET NOT OPENED -- BYPASSED'  081772
ERRNOPSZ EQU   *-ERRNOTOP                                        081772
         SPACE 8
***  TABLE OF ENTRIES FOR TYPE FIELD
*
PTYPTABL EQU   *-4            VALID TYPES START WITH 1
         DC    CL4'GBLA'           GLOBAL A
         DC    CL4'GBLB'           GLOBAL B
         DC    CL4'GBLC'           GLOBAL C
         DC    CL4'SYMP'           SYMBOLIC PARAMETER
         DC    CL4'LCLA'           LOCAL A
         DC    CL4'LCLB'           LOCAL B
         DC    CL4'LCLC'           LOCAL C
         DC    CL4'SYSV'           SYSTEM VARIABLE
         DC    CL4'SEQS'           SEQUENCE SYMBOL
         DC    CL4'MACC'           MACRO CALL
         DC    CL4'OPCD'           OP CODE SPECIFIED
         TITLE 'AREAS, COUNTERS, ETC'
*
***  MISC. WORK AREAS AND STUFF
*
PGCNT    DC    PL2'0'
LINECTR  DC    PL2'0'
WKC      DS    CL1
         SPACE 3
WKD      DS    D
         SPACE 3
SAVEOP   DS    F
STARTLOC DS    F                   LOC TO START SCAN
PTRBLDL  DC    A(BLDLNM)           SAVE AREA FOR BLDL PTR
OLDINBF  DS    F
OUTBFPTR DS    F
STG1SAVE DS    F                   SAVE STACK POINTER FOR PHASE 1
***  FOLLOWING TWO AREAS MUST BE IN ORDER ***
LOAVAIL  DS    F    PTR TO BYTE AFTER LAST VAR SYM OR REF TBL ENTRY
HIAVAIL  DS    F    PTR TO FIRST BYTE OF LOWEST SEQ SYM ENTRY
STACKPTR DS    F                   START OF STACK
NXTDSKAD DC    AL1(0)
NXTTTR   DS    CL3
         SPACE 3
***  THE FOLLOWING GROUP OF POINTERS MUST BE IN ORDER ***
PTRS     DS    0F
VSPTR    DS    3F                  VARIABLE SYMBOL CHAIN POINTERS
SSPTR    DS    3F                  SEQUENCE SYMBOL CHAIN POINTERS
MSPTR    DS    3F                  MISC. SYMBOL CHAIN POINTERS
PTRSZ    EQU   *-PTRS
         SPACE 4
OLDBLKSZ DS    H
STMTCNT  DS    H
         SPACE 3
WK8      DS    CL(WKKEYLN)
WK80     DS    CL(WKBLKSZ)
         TITLE 'SWITCHES'
*
****  SWITCHES USED THROUGHOUT PROGRAM
*
         SPACE 2
***  PARMSW SETTINGS AS FOLLOWS:
*      X'80'   WHEN LAST MEMBER IN MEMBERS= PARM PROCESSED
*      X'10'   WHEN OPCODES= PARM CAUSES PREVIOUSLY ENTERED MEMBERS
*                  TO BE PROCESSED
*      X'FF'   WHEN END OF FILE ON PARM RECORDS (SYSIN)
*
PRMSWEOR EQU   X'80'               END OF RECORD
PRMSWOCT EQU   X'10'               OP CODE TRIGGER
PRMSWEOF EQU   X'FF'               END OF FILE
PRMSWNUL EQU   0                   USED TO INITIALIZE IT
*
PARMSW   DC    X'0'
         SPACE 2
***  RDSW SETTINGS AS FOLLOWS:
*    BIT 0 ON  WHEN 'FIND' IS REQUIRED FOR PDS MEMBER
*        1 ON  WHEN PRIMING BUFFERS (FIRST READ FOR MEMBER)
*        2 ON  WHEN BUFFER IS EMPTY AND READ IS REQUIRED
*        3 ON  WHEN 'CHECK' HAS BEEN ISSUED FOR LAST READ
*        4 ON  WHEN INPUT DATA SET PROCESSED AS SEQUENTIAL
*        5 ON  WHEN ALL OF PDS DIRECTORY IS BEING PROCESSED      080172
*        6-7   NOT USED                                          080172
*
RDSWFIND EQU   X'80'               FIND REQ
RDSWPRIM EQU   X'40'               PRIMING BUFFERS
RDSWREAD EQU   X'20'               READ REQ
RDSWCHKI EQU   X'10'               CHECK ISSUED
RDSWSEQ  EQU   X'08'               DSORG=PS OR MEMB SPEC IN JCL
RDSWALL  EQU   X'04'               PDS DIRECTORY LIST            080172
RDSWNULL EQU   RDSWSEQ+RDSWALL     BITS TO REMAIN ON THROUGHOUT  080172
*
RDSW     DC    X'00'
         SPACE 2
***  PRSW SETTINS AS FOLLOWS:
*      0       TO PRINT A LINE OTHER THAN A SOURCE STATEMENT
*      4       TO PRINT A SOURCE STATEMENT AND INCR STMT NUMBER
*      8       TO PRINT A SOURCE STATEMENT AND LEAVE STMT NUMBER
*
PRSWNS   EQU   0                   NO SOURCE -- SOMETHING ELSE
PRSWSI   EQU   4                   STMT & INCREMENT NUMBER
PRSWSNI  EQU   8                   STMT & NO INCR
PRSWPREP EQU   12                  JUST INITIAL STUFF            081772
*
PRSW     DS    CL1
         SPACE 2
***  TABLSW USED TO INDICATE THE STATUS OF THE REFERENCE TABLES:
*      ALL ZERO BITS INDICATES THE TABLES ARE IN CORE
*      ALL ONE BITS INDICATES THE TABLES ARE IN SYSUT1 DATA SET
*
TABLIC   EQU   0                   TABLES ARE IN CORE
TABLDA   EQU   X'FF'               TABLES ARE ON DIRECT ACCESS
*
TABLSW   DS    CL1
         SPACE 2
***  PHASESW SET AS FOLLOWS:
*
*    BIT 0   0 WHEN PRINTING SOURCE PROGRAM/MACRO (PHASE 2)
*            1 WHEN PRINTING XREF TABLE (PHASE 3)
*
PHASE3   EQU   X'80'
*
*    BIT 1   0 WHEN OUTER MACRO IS BEING PROCESSED
*            1 WHEN INNER MACRO IS BEING PROCESSED
*
PHASEIM  EQU   X'40'
*
*    BIT 2   0 WHEN MEND/END STMT BUT NOT END OF MEMBER
*            1 WHEN END OF MEMBER REACHED
*
PHASEEM  EQU   X'20'
*
*    BIT 3   0 DURING PROLOGUE TO VARIABLE SYMBOL DEFINITION SCAN
*            1 AFTER PROLOGUE
*
PHASPRLG EQU   X'10'
*
*    BIT 4   0 WHEN A SYMBOL NAME HAS BEEN PUT INTO THE PRNT BUF
*            1 WHEN THE SYMBOL IS IN BUF FOR THE FIRST REF LINE
*
PHASENSY EQU   X'08'
*
*    BIT 5   0 WHEN AT LEAST 1 REF IS SET UP IN CURRENT PRNT BUF
*            1 WHEN THE CURRENT PRNT BUF IS STILL EMPTY
*
PHASENRF EQU   X'04'
*
*    BIT 6   0 WHEN REFERENCES ARE BEING SET UP IN PRNT BUF
*            1 WHEN THE LAST LINE IS TO BE PRINTED FOR A SYMBOL
*
PHASELL  EQU   X'02'
*
*   THE FOLLOWING IS USED TO SET THE SWITCH PROPERLY AT THE START
*        OF PHASE 2 FOR A GIVEN INNER/OUTER MACRO/PROGRAM
*
PHASE0   EQU   PHASEIM
*
PHASESW  DC    X'0'
         SPACE 2
***  OPSW SETTINGS AS FOLLOWS:
*      BIT 0   NOT USED
*      BIT 1   NOT USED
*      BIT 2   NOT USED
*      BIT 3   END OR MEND STATEMENT FOUND
*      BIT 4   OPCODE IS SETA/B/C
*      BIT 5   SEQUENCE SYMBOL NOT FOUND IN AGO/AIF
*      BIT 6   ON - SEQ SYM NOT PROC
*      BIT 7   OFF- FND ')' IN COL 71 - CHECK CONTIN FOR SYM
*              ON - LOOK FOR ').'
*
OPSWMEND EQU   X'10'               END/MEND
OPSWSETX EQU   X'08'               SETA/B/C
OPSWNULL EQU   0
AIFNOSS  EQU   X'04'               SEQ SYM NOT FND
AIFSSNP  EQU   X'02'               SEQ SYM NOT YET FOUND
AIFIDNS  EQU   X'01'               ID CHARS ARE NOT SPLIT
AIFDONE  EQU   255-AIFSSNP-AIFIDNS  SEQ SYM PROCESSED
*
OPSW     DS    CL1
         SPACE 3
***  NESTSW SET AS FOLLOWS:
*        BIT 7 ON -- PARM=NEST WAS SPECIFIED
*        BIT 6    NO LONGER USED
*        BIT 5 ON -- OPCODES PARMS ARE BEING PROCESSED
*        BITS 0-4 NOT USED
*
NESTPARM EQU   X'01'               PARM=NEST SWITCH
NESTOPPP EQU   X'04'               OPCODES PARM BEING PROCESSED
*
NESTSW   EQU   NESTEP
         SPACE 5
***  TYPESW USED TO SET THE TYPE FIELD IN THE DEFINITION TABLES
***  TYPE FIELD SET AS FOLLOWS:
*      BITS 0-3 NOT USED
*      IF BIT 4 =0 THEN:
*        BIT 5  0 = GLOBAL SYMBOL
*               1 = LOCAL SYMBOL
*           6-7 00 = SYMBOLIC PARAMETER IF LOCAL BIT ON
*               01 = LCL/GBL A
*               10 = LCL/GBL B
*               11 = LCL/GBL C
*      IF BIT 4 =1 THEN:
*        BITS 5-7 000 = SYSTEM VARIABLE SYMBOL
*                 001 = SEQUENCE SYMBOL
*                 010 = INNER MACRO
*                 011 = OPCODE
*                100-111 NOT USED
*
TYPLCL   EQU   X'04'               LOCAL FLAG
TYPGBL   EQU   0                   GLOBAL FLAG
TYPA     EQU   X'01'               LCL/GBL A
TYPB     EQU   X'02'               LCL/GBL B
TYPC     EQU   X'03'               LCL/GBL C
TYPSYM   EQU   0+TYPLCL            SYMBOLIC PARAMETER
TYPSYS   EQU   X'08'               SYSTEM VARIABLE SYMBOL
TYPSEQS  EQU   X'09'               SEQUENCE SYMBOL
TYPINNM  EQU   X'0A'               INNER MACRO
TYPOPCD  EQU   X'0B'               OP CODE
*
TYPESW   DS    CL1
         TITLE 'DATA CONTROL BLOCKS'
OUT      DCB   DSORG=PS,MACRF=PL,DDNAME=SYSPRINT,RECFM=FBA,            *
               LRECL=OUTLRECL,EXLST=OUTEXLST
         SPACE 1                                                 90280
IN       DCB   DSORG=PO,MACRF=R,DDNAME=LIBRARY,EODAD=ENDMEMB,BUFNO=2,  *
               KEYLEN=0,EXLST=WKD      * EXLST IS ERASED LATER * 073172
         SPACE 1                                                 90280
SYSIN    DCB   DSORG=PS,MACRF=GL,DDNAME=SYSIN,EODAD=ENDPARM
         SPACE 1                                                 90280
FMTFILE  DCB   DSORG=PS,DDNAME=SYSUT1,MACRF=WL,                        *
               KEYLEN=WKKEYLN,RECFM=F,BLKSIZE=WKBLKSZ
         SPACE 1                                                 90280
WKFILE   DCB   DSORG=DA,DDNAME=SYSUT1,MACRF=(RKIC,WAIC),SYNAD=WKSYNAD, *
               OPTCD=EF,LIMCT=3,RECFM=F,KEYLEN=WKKEYLN,BLKSIZE=WKBLKSZ
         SPACE 2                                                 90280
      WRITE    BSAM,SD,FMTFILE,DUMMY,MF=L
         SPACE 3
      WRITE    BDAM,DI,WKFILE,MF=L
         SPACE 3
         AIF   (NOT &SNAP).OPEN                                  081772
&SNAPNM  SETC  'SNAP'                                            081772
OPENLIST OPEN  (IN,,SYSIN,,OUT,OUTPUT,WKFILE,UPDAT,&SNAPNM,OUTPUT),MF=L
         AGO   .OPENSHT                                          90280
.OPEN    SPACE 1                                                 90280
OPENLIST OPEN  (IN,,SYSIN,,OUT,OUTPUT,WKFILE,UPDAT),MF=L         90280
.OPENSHT ANOP  ,                                                 90280
         TITLE 'MAPPINGS'                                        90280
         SPACE 3
***  BLDL TABLE  ***           MOVED 080172 FOR BETTER ADDRESSABILITY
*
BLDL     DS    F
BLDLNM   DC    CL8' '
BLDLTTR  DC    CL3' '                                            080172
         DC    CL3' '                                            080172
BLDLSZ   EQU   *-BLDLNM
         DC    63CL(BLDLSZ)' '                                   080172
DUMMY    DC    X'FF'               PHYSICAL END OF BLDL LIST
         DC    (WKKEYLN)XL1'00'    USED AS SYSUT1 DUMMY RECORD
         SPACE 10
         AIF   (NOT &SNAP).NOSNAP                                081772
         TITLE 'SNAP DUMP STUFF'
SNAP     DCB   DDNAME=SNAP,DSORG=PS,RECFM=VBA,MACRF=W,LRECL=125,       *
               BLKSIZE=1632
         SPACE 2                                                 90280
SNAPLIST SNAP  DCB=SNAP,SDATA=(CB),PDATA=(REGS,SPLS),                  *
               STORAGE=(GETMAIN,*),MF=L
.NOSNAP  ANOP  ,                                                 081772
         SPACE 2                                                 90280
         DCBD  DSORG=(PS,PO,DA),DEVD=DA
         SPACE 2                                                 90280
TABLE1   DSECT ,
ENT1NM   DS    CL(WKKEYLN)         TABLE ENTRY NAME
ENT1DF   DS    H         DEFINING STMT NO.
ENT1TYPE DS    CL1                 SYMBOL TYPE
ENT1CNT  DS    CL1                 REFERENCE COUNT
ENT1PT   DS    F         BYTE 1 = NO. OF COMPLETE REF BLOCKS ON DISK
*                        BYTES 2-4 = POINTER TO CURRENT (INCOMPLETE)
*                                    BLOCK - EITHER CORE ADDRESS OR
*                                    TTR POINTER
ENT1NXT  DS    F                   CHAIN POINTER
ENT1SZ   EQU   *-TABLE1  SIZE OF DSECT
         END   ,
MACR2    TITLE 'MACRO CROSS-REFERENCE SECONDARY MODULE'
MACRFNST CSECT ,
         SPACE 6
***  SECOND MACROREF MODULE WHICH CONTAINS TABLES OF OP-CODES
**       AND PERFORMS VARIOUS FUNCTIONS ON THOSE TABLES AS
*        REQUESTED BY THE MAIN MODULE.
         SPACE 4
***  PARAMETERS PASSED:
*
*     RZ CONTAINS THE FUNCTION CODE:
*        0     CHECK WHETHER 'OP-CODE' IS VALID OR INNER MACRO
*        4     DUMP INNER MACRO NAMES STORED IN TABLE
*        8     PROCESS THE 'OPCODES' PARAMETER LIST
*        12    RESET ALL OPCODES TO ORIGINAL STATE
*        16    DETERMINE IF OP-CODE IS VALID BEFORE VARIABLE SYMBOL
*              DEFINITIONS.
*        20    ENTER MACRO NAME IN TABLE & FLAG AS PROCESSED
*
*     R1 DEPENDS ON THE FUNCTION CODE:
*        RZ=:  R1=:
*        0     ADDR OF 'OP-CODE'
*        4     DCB ADDR FOR BLDL
*        8     ADDR OF OPCODES PARM LIST
*        12    UNDEFINED
*        16    ADDR OF 'OP-CODE'
*        20    ADDR OF MACRO NAME
*
*
*
*
***  RETURN CODE PASSED IN R15 DEPENDING ON FUNCTION:
*      FUNCT:  R15:
*        0     0 IF OP-CODE IS VALID AND CURRENTLY SET TO OPCODE STATUS
*              4 IF OPCODE IS SET TO INNER MACRO STATUS
*              8 IF INNER MACRO
*
*        4     0 IF NO MORE INNER MACRO NAMES IN TABLE
*              ADDR OF BLDL LIST FOR NEXT INNER MACRO NAME
*
*        8     0 IF ALL PARAMETERS WERE PROCESSED CORRECTLY
*              ADDR OF PARAMETER RECORD ERROR DETECTED
*
*        12    ALWAYS 0
*
*        16    0 IF OPCODE IS VALID BEFORE VAR SYM DEFNS
*              4 IF NOT
*        20    SAME AS FUNCT 0
*
         EJECT ,
***  REGISTERS
*
R13      EQU   13
R14      EQU   14
R15      EQU   15
RZ       EQU   0
R1       EQU   1
R2       EQU   2
RACC     EQU   3
RE       EQU   4
RO       EQU   5
RLIST    EQU   6
RX       EQU   7
RWK      EQU   8
REND     EQU   9
RB       EQU   10
         SPACE 6
***  OPCODE TYPE INDICATORS
*
OPMI     EQU   1
OPDEC    EQU   2
OPFP     EQU   4
OPASM    EQU   8
OPASMBM  EQU   OPASM*2
OPMAC    EQU   32
OP370    EQU   64                                                080172
OPINNER  EQU   128                                               080372
         TITLE 'MAINLINE'
         PRINT NOGEN         SAVE A TREE                         90280
       SAVE    (14,RB)
       USING   MACRFNST,RB
         LR    RB,R15
         LR    R2,RZ
         B     *+4(R2)
         B     VALOP          FUNCT=0
         B     ENDMAC              =4
         B     OPLIST              =8
         B     RESETOPS            =12
         B     BEFORMAC            =16
         B     VALOP               =20
         SPACE 8
***  VALIDATE THE OP-CODE
*
VALOP    DS    0H
         NI    COPYSW,X'0F'
         LR    RE,R1
         LA    R1,0(R1)
FNDBLK   DS    0H             FIND FIRST BLANK
         CLI   1(RE),X'40'
         LA    RE,1(RE)
         BNE   FNDBLK
         SR    RE,R1          LENGTH OF OP CODE
         CH    RE,H8          IF L GT 8
         BH    NOACTION           IGNORE
         LTR   R2,RE          IF L EQ 0
         BZ    NOACTION            ERROR
         BCTR  R2,0           L-1
         NOP   MACRO
COPYSW   EQU   *-3
         LR    RWK,R2
         CH    RE,H5          IF L GT 5
         BH    MACRO               NOT OP-CODE
*   LENGTH LE 5
         SLL   RWK,4      *16  SRCH PNTR TABLE GROUP INDEX
         MVC   WKC,0(R1)      FIRST CHAR OF OP
         NI    WKC,X'30'      A-I,J-R,S-Z,0-9
         TM    WKC,X'30'
         BO    NOACTION       IGNORE 0-9
         SR    RO,RO
         IC    RO,WKC
         SRL   RO,2      LO ORD 2 BITS *4 = SUB INDEX
         AR    RWK,RO       A-I=0,J-R=1,S-Z=2
         L     RACC,T(RWK)     START OF SRCH
         L     RO,T+4(RWK)     END OF SRCH +1 ENTRY
         LA    RE,1(RE)            INCLUDE TYPE BYTE IN LENGTH
         SR    RO,RE          END OF SRCH
SEARCH   DS    0H
         EX    R2,CLC         SEARCH
         BE    OPCODE              EXIT IF OPCODE
         BXLE  RACC,RE,SEARCH
*   NOT IN TABLE - ADD TO MACRO LIST
MACRO    DS    0H
         TM    OPCODESW,X'F0'      IF OPCODESW IS ON
         BO    4(R14)              BR AROUND RETURN INST
         L     RACC,MACLSTPT       NEXT AVAIL SLOT
       USING   MACENT,RACC    **********
         CLI   0(RACC),255      Q. END OF TABLE?
         BE    EXITRC4             NO MORE ROOM
         MVC   MACNAME,KBLK8       BLANK OUT THE NAME
         EX    R2,MVC              MOVE TO TABLE
         LR    RO,RACC
         LA    RE,MACENTSZ         SIZE OF ONE ENTRY
         L     R1,MACLSTHD
DUPSRCH  DS    0H             SEARCH FOR DUP ENTRY
         CR    R1,RACC
         BE    INCRPT
         CLC   MACNAME,0(R1)
         BE    DUP
         BXLE  R1,RE,DUPSRCH
INCRPT   DS    0H
         CLI   23(R13),20          CHECK ORIG FUNCT
         BE    INCRPT2             BR IF FUNCT 20
         LH    R2,MACCNT
         LA    R2,1(R2)            INCR MACRO COUNT
         STH   R2,MACCNT
         MVI   MACSTAT,0           STATUS IS 0
INCRPT2  DS    0H
         LA    RACC,MACENTSZ(RACC) INCR TO NEXT ENTRY
         ST    RACC,MACLSTPT
DUP      DS    0H
         LA    R15,8               INNER MACRO
         CLI   23(R13),20
         BNE   *+8
         MVI   MACSTAT,255         FLAG AS PROCESSED FOR FUNCT 20
         B     RETURN
         SPACE 3
CLC      CLC   0(0,R1),1(RACC)
MVC      MVC   MACNAME(0),0(R1)    EX MVC
         SPACE 5
**  OPCODE IS FOUND - IF IT'S 'COPY' PROCESS OPERAND AS A MACRO
*
OPCODE   DS    0H
         NOPR  R14
OPCODESW EQU   *-1
         CLC   KCOPY,0(R1)
         BNE   HAVEOPCD            BR IF NOT 'COPY'
         LA    R1,1(R2,R1)         CHAR AFTER OPCODE
FNDCPYOP DS    0H
         LA    R1,1(R1)
         CLI   0(R1),X'40'
         BE    FNDCPYOP
         ST    R1,24(R13)    SET ADDR OF COPY OPERAND FOR EXIT
         LR    RE,R1
         OI    COPYSW,X'F0'
         B     FNDBLK
         SPACE 6
HAVEOPCD DS    0H
         TM    0(RACC),OPINNER     IS IT FLAGGED AS INNER MACRO?
         BO    EXITRC4             YES - CALL IT INNER MACRO
         TM    0(RACC),OP370   +++ 370 OPCODE BYPASS +++         080372
         BO    MACRO           +++ 370 OPCODE BYPASS +++         080372
         B     NOACTION            BR IF NO
         EJECT ,
*
***  END OF THE OUTER MACRO - DUMP TABLE
*
ENDMAC   DS    0H
         L     R1,24(R13)     RELOAD REG1 IN CASE BLDL FAILED
         LH    R2,MACCNT
         LTR   R2,R2               CHECK IF NO MORE ENTRIES
         BZ    NOMORE
*   FIND LOWEST ONE IN TABLE
         L     RACC,MACLSTHD       FIRST ENTRY
         LA    RE,MACENTSZ         LENGTH OF ENTRY
         LA    R15,DUMMY           FORCE HIGH VALUE FOR LOWEST
         L     RO,MACLSTPT
         SR    RO,RE               LAST ENTRY
         SR    RACC,RE        (FOR BXH BELOW)
*
*    RACC = CURR ENTRY
*    RE   = MACENTSZ
*    RO   = LAST ENTRY
*    R15  = LOWEST ENTRY
*
LOWLP    DS    0H
         BXH   RACC,RE,HAVELOW
         CLC   MACNAME,0(R15)
         BNL   LOWLP
*    SEE IF THIS ENTRY ALREADY PROCESSED
         CLI   MACSTAT,0
         BNE   LOWLP               IF NE 0 ALREADY PROCESSED
         LR    R15,RACC       NEW LOWEST
         B     LOWLP
         SPACE 5
*** R15 HAS LOWEST ENTRY
*
HAVELOW  DS    0H
         LR    RACC,R15            FOR ADDRESSABILITY
         MVC   BLDLNM,MACNAME
         LH    R2,MACCNT
         BCTR  R2,0                DECR MACRO CNT
         STH   R2,MACCNT
         MVI   MACSTAT,255         FLAG AS PROCESSED
       BLDL    (R1),BLDL
         BXH   R15,R15,ENDMAC  NOT FOUND;I/O ERROR;NO SPACE...   91154
         SPACE 3
       DROP    RACC           **********
         SPACE 3
**  EXIT WITH INNER MACRO
*
EXITINNR DS    0H
         LA    R15,BLDLNM          RETURN CODE
         B     RETURN
         SPACE 4
**  EXIT WITH RETURN CODE OF 4
*
EXITRC4  DS    0H
         LA    R15,4
         B     RETURN
         SPACE 6
**  NO INNER MACROS LEFT
*
NOMORE   DS    0H
         MVC   MACLSTPT,MACLSTHD   RESET POINTERS
NOACTION DS    0H
***  TEST WHETHER RETURN IS EXPECTED
         TM    OPCODESW,X'F0'
         BO    4(R14)              BR IF YES - TAKE 'NOT FOUND' EXIT
         SR    R15,R15
RETURN   DS    0H
      RETURN   (14,RB),RC=(15)
         EJECT ,
***  PROCESS 'OPCODES' LIST TO TREAT CERTAIN OPCODES AS MACROS
*
OPLIST   DS    0H
         OI    OPCODESW,X'F0'
         LR    RLIST,R1            ADDR OF LIST AFTER KEYWORD
PRCOPCDL DS    0H
         LR    REND,RLIST          LOAD IN CASE BADLIST
         CLI   0(RLIST),C','
         BE    COMMA
         CLI   0(RLIST),C')'       IF RT PAREN HERE
         BE    BADLIST                IT IS INVALID
         CLI   0(RLIST),C'('
         BE    OCSUBLST            PROCESS SUBLIST
***  NOT SUBLIST -- PROCESS KEYWORDS
         CLI   0(RLIST),C'*'       'RESET' OPERAND?
         BE    RESETOPS            BR IF YES
         CLC   KDEC,0(RLIST)
         BE    DECOPS
         CLC   KFP,0(RLIST)
         BE    FPOPS
         CLC   KASM,0(RLIST)
         BE    ASMOPS
         CLC   KMI,0(RLIST)
         BE    MIOPS
         CLC   KMAC,0(RLIST)
         BE    MACOPS
         CLC   KALL,0(RLIST)
         BE    ALLOPS
         CLC   K370,0(RLIST)                                     080372
         BE    S370OPS                                           080372
         SPACE 2
***  SOMETHING IS WRONG WITH THE PARAMETER LIST
BADLIST  DS    0H
         LR    R15,REND            ADDR OF ERROR
         B     OCEXIT
         SPACE 4
OCEXIT0  DS    0H
         SR    R15,R15
         B     OCEXIT
OCEXIT4  DS    0H
         LA    R15,4
*
OCEXIT   DS    0H
         NI    OPCODESW,X'0F'
         B     RETURN
         SPACE 3
COMMA    DS    0H
         LA    RLIST,1(RLIST)
         B     PRCOPCDL
         EJECT ,
***  RESET ALL OPCODES TO THEIR ORIGINAL STATE
RESETOPS DS    0H
         LA    RLIST,1(RLIST)      BYPASS '*'
         XC    SETRESET(2),KFLIP   CHANGE OI TO NI
         B     ALLOPS2
ALLOPS   DS    0H
         LA    RLIST,L'KALL(RLIST)
ALLOPS2  DS    0H
         LA    R15,X'7F'
         B     MIOPS2
S370OPS  DS    0H                                                080372
         LA    R15,OP370                                         080372
         LA    RLIST,L'K370(RLIST)                               080372
         B     MIOPS2                                            080372
DECOPS   DS    0H
         LA    R15,OPDEC
         LA    RLIST,L'KDEC(RLIST)
         B     MIOPS2
FPOPS    DS    0H
         LA    R15,OPFP
         LA    RLIST,L'KFP(RLIST)
         B     MIOPS2
ASMOPS   DS    0H
         LA    R15,OPASM+OPASMBM
         LA    RLIST,L'KASM(RLIST)
         B     MIOPS2
MACOPS   DS    0H
         LA    R15,OPMAC
         LA    RLIST,L'KMAC(RLIST)
         B     MIOPS2
MIOPS    DS    0H
         LA    R15,OPMI+OPDEC+OPFP+OP370                         080772
         LA    RLIST,L'KMI(RLIST)
MIOPS2   DS    0H
         LA    RWK,5               NUMBER OF TABLES
         LA    R2,16               LENGTH OF ENTRY IN 'T'
         LR    R1,R2               FOR MR
         MR    RZ,RWK              LENGTH OF ALL 'T'S
         LA    R1,T(R1)            END OF 'T'
MILP1    DS    0H
         LA    RE,1(RWK)           LENGTH OF ONE ENTRY
         SR    R1,R2               ENTRY IN 'T'
         L     RACC,0(R1)          START OF OPCODE TABLE
         L     RO,12(R1)           END OF OPCODE TABLE
         SR    RO,RE               LAST ENTRY IN OPCODE TABLE
MILP2    DS    0H
         EX    R15,TM              TEST IF THIS ONE QUALIFIES
         BZ    *+8                 BR IF NO
***  FOLLOWING INSTRUCTION IS SWITCHED BETWEEN 'OI' & 'NI'
SETRESET OI    0(RACC),OPINNER
         BXLE  RACC,RE,MILP2       THROUGH OPCODE TABLE
         BCT   RWK,MILP1           THRU ALL OPCODE TABLES
         CLI   SETRESET+1,OPINNER  TEST IF ORIG INST
         BE    *+10                BR IF YES
         XC    SETRESET(2),KFLIP   RESET IT
         CLI   23(R13),12          TEST RESET REQ DIRECTLY
         BE    OCEXIT0             BR IF YES
         B     MIRET
         SPACE 2
TM       TM    0(RACC),0           *EXECUTED*
         SPACE 5
**  PROCESS THE SUBLIST
OCSUBLST DS    0H
         LA    RX,1(RLIST)
SUBLPROC DS    0H
         LR    REND,RX
SUBLSTLP DS    0H
         CLI   0(REND),C','
         BE    SBLHVCD
         CLI   0(REND),C')'
         BE    SBLHVCD
         CLI   0(REND),C' '
         BE    SBLHVCD
         CLI   0(REND),C'('        IF FOR SOME REASON LEFT PAREN
         BE    SBLHVCD
         LA    REND,1(REND)
         B     SUBLSTLP
         SPACE 2
SBLHVCD  DS    0H
         LR    RWK,REND
         SR    RWK,RX
         BZ    SBLNTFND
         BCTR  RWK,0
         MVC   BLDLNM,KBLK8
         MVC   BLDLNM(0),0(RX)
         EX    RWK,*-6
         LA    R1,BLDLNM
         BAL   R14,VALOP           GO FIND THE OP IN TABLE
         OI    0(RACC),OPINNER     IF FOUND IN TABLE RETURN HERE
*  IF NOT FOUND IN TABLE RETURN HERE
SBLNTFND DS    0H
         CLI   0(REND),C' '
         BE    BADLIST
         CLI   0(REND),C'('
         BE    BADLIST
         CLI   0(REND),C')'
         LA    RX,1(REND)          NEXT CODE IN LIST
         BNE   SUBLPROC            BR IF COMMA ENDED LAST OP
         LR    RLIST,RX            RT PAREN ENDED IT
MIRET    EQU   *
         CLI   0(RLIST),C' '       TEST FOR END OF LIST
         BE    OCEXIT0
         B     PRCOPCDL            RESUME MAIN LIST PROCESSING
         EJECT ,
***  DETERMINE IF OP-CODE IS VALID BEFORE VAR SYM DEFNS
*
BEFORMAC DS    0H
         OI    OPCODESW,X'F0'
         BAL   R14,VALOP
         B     *+8                 OPCODE WAS FOUND
         B     NOTBM               OPCODE WAS NOT FOUND
         MVC   WKC,0(RACC)         GET TYPE INDICATOR
         NI    WKC,X'7F'           REMOVE INNER MACRO FLAG
         CLI   WKC,OPASMBM         IS IT VALID BEFORE DEFNS
         BE    OCEXIT0             BR IF YES
NOTBM    DS    0H
         TM    COPYSW,X'F0'  WAS THIS A COPY REQUEST ?           91154
         BO    OCEXIT0       YES; SOMETIMES VALID BEFORE         91154
         B     OCEXIT4
         TITLE 'MISC CONSTS && STUFF'
MACLSTHD DC    A(MACLST)
MACLSTPT DC    A(MACLST)
MACCNT   DC    H'0'
H8       DC    H'8'
H5       DC    H'5'
BLDL     DC    H'1,14'
BLDLNM   DC    CL8' '
         DS    CL6
WKC      DS    CL1
KBLK8    DC    CL8' '
KCOPY    DC    C'COPY '
KDEC     DC    C'DEC'
KFP      DC    C'FP'
KASM     DC    C'ASM'
KMI      DC    C'MI'
KMAC     DC    C'MAC'
KALL     DC    C'ALL'
K370     DC    C'370'                                            080372
KFLIP    DC    X'02FF'   FLIP OI/NI & REVERSE MASK
         TITLE 'SEARCH TABLES'
*
***  TABLE OF SEARCH POINTERS
*
*        ADDR1 FIRST ENTRY
*        ADDR2 FIRST ENTRY FOR LTRS J-R
*        ADDR3 FIRST ENTRY FOR LTRS S-Z
*        ADDR4 LAST ENTRY
*
T        DS    0F
         DC    A(T1,T1L,T1S,T1END)
         DC    A(T2,T2L,T2S,T2END)
         DC    A(T3,T3L,T3S,T3END)
         DC    A(T4,T4L,T4S,T4END)
         DC    A(T5,T5L,T5S,T5END)
         SPACE 10
*
***  OP-CODE TABLES
*
T1       EQU   *    TABLE OF 1 CHAR OP-CODES
         DC    AL1(OPMI),C'A'
         DC    AL1(OPMI),C'B'
         DC    AL1(OPMI),C'C'
         DC    AL1(OPMI),C'D'
T1L      DC    AL1(OPMI),C'L'
         DC    AL1(OPMI),C'M'
         DC    AL1(OPMI),C'N'
         DC    AL1(OPMI),C'O'
T1S      DC    AL1(OPMI),C'S'
         DC    AL1(OPMI),C'X'
T1END    EQU   *
         SPACE 3
T2       EQU   *    TABLE OF 2 CHAR OP-CODES
         DC    AL1(OPFP),C'AD'
         DC    AL1(OPFP),C'AE'
         DC    AL1(OPMI),C'AH'
         DC    AL1(OPMI),C'AL'
         DC    AL1(OPDEC),C'AP'
         DC    AL1(OPMI),C'AR'
         DC    AL1(OPFP),C'AU'
         DC    AL1(OPFP),C'AW'
         DC    AL1(OPMI),C'BC'
         DC    AL1(OPMI),C'BE'
         DC    AL1(OPMI),C'BH'
         DC    AL1(OPMI),C'BL'
         DC    AL1(OPMI),C'BM'
         DC    AL1(OPMI),C'BO'
         DC    AL1(OPMI),C'BP'
         DC    AL1(OPMI),C'BR'
         DC    AL1(OPMI),C'BZ'
         DC    AL1(OPFP),C'CD'
         DC    AL1(OPFP),C'CE'
         DC    AL1(OPMI),C'CH'
         DC    AL1(OPMI),C'CL'
         DC    AL1(OPDEC),C'CP'
         DC    AL1(OPMI),C'CR'
         DC    AL1(OPASM),C'DC'
         DC    AL1(OPFP),C'DD'
         DC    AL1(OPFP),C'DE'
         DC    AL1(OPDEC),C'DP'
         DC    AL1(OPMI),C'DR'
         DC    AL1(OPASM),C'DS'
         DC    AL1(OPDEC),C'ED'
         DC    AL1(OPMI),C'EX'
         DC    AL1(OPMI),C'IC'
T2L      DC    AL1(OPMI),C'LA'
         DC    AL1(OPFP),C'LD'
         DC    AL1(OPFP),C'LE'
         DC    AL1(OPMI),C'LH'
         DC    AL1(OPMI),C'LM'
         DC    AL1(OPMI),C'LR'
         DC    AL1(OPMI+OP370),C'MC'                             080172
         DC    AL1(OPFP),C'MD'
         DC    AL1(OPFP),C'ME'
         DC    AL1(OPMI),C'MH'
         DC    AL1(OPDEC),C'MP'
         DC    AL1(OPMI),C'MR'
         DC    AL1(OPMI),C'NC'
         DC    AL1(OPMI),C'NI'
         DC    AL1(OPMI),C'NR'
         DC    AL1(OPMI),C'OC'
         DC    AL1(OPMI),C'OI'
         DC    AL1(OPMI),C'OR'
T2S      DC    AL1(OPFP),C'SD'
         DC    AL1(OPFP),C'SE'
         DC    AL1(OPMI),C'SH'
         DC    AL1(OPMI),C'SL'
         DC    AL1(OPDEC),C'SP'
         DC    AL1(OPMI),C'SR'
         DC    AL1(OPMI),C'ST'
         DC    AL1(OPFP),C'SU'
         DC    AL1(OPFP),C'SW'
         DC    AL1(OPMI),C'TM'
         DC    AL1(OPMI),C'TS'
         DC    AL1(OPMI),C'TR'
         DC    AL1(OPMI),C'XC'
         DC    AL1(OPMI),C'XI'
         DC    AL1(OPMI),C'XR'
T2END    EQU   *
         SPACE 3
T3       EQU   *    TABLE OF 3 CHAR OP-CODES
         DC    AL1(OPFP),C'ADR'
         DC    AL1(OPFP),C'AER'
         DC    AL1(OPMAC),C'AGO'
         DC    AL1(OPMAC),C'AIF'
         DC    AL1(OPMI),C'ALR'
         DC    AL1(OPFP),C'AUR'
         DC    AL1(OPFP),C'AWR'
         DC    AL1(OPFP),C'AXR'
         DC    AL1(OPMI),C'BAL'
         DC    AL1(OPMI),C'BCR'
         DC    AL1(OPMI),C'BCT'
         DC    AL1(OPMI),C'BNE'
         DC    AL1(OPMI),C'BNH'
         DC    AL1(OPMI),C'BNL'
         DC    AL1(OPMI),C'BNM'
         DC    AL1(OPMI),C'BNO'
         DC    AL1(OPMI),C'BNP'
         DC    AL1(OPMI),C'BNZ'
         DC    AL1(OPMI),C'BXH'
         DC    AL1(OPASM),C'CCW'
         DC    AL1(OPFP),C'CDR'
         DC    AL1(OPFP),C'CER'
         DC    AL1(OPMI),C'CLC'
         DC    AL1(OPMI),C'CLI'
         DC    AL1(OPMI+OP370),C'CLM'                            080172
         DC    AL1(OPMI),C'CLR'
         DC    AL1(OPASM),C'COM'
         DC    AL1(OPMI),C'CVB'
         DC    AL1(OPMI),C'CVD'
         DC    AL1(OPASM),C'CXD'
         DC    AL1(OPFP),C'DDR'
         DC    AL1(OPFP),C'DER'
         DC    AL1(OPASM),C'DXD'
         DC    AL1(OPASM),C'END'
         DC    AL1(OPASM),C'EQU'
         DC    AL1(OPFP),C'HDR'
         DC    AL1(OPMI+OP370),C'HDV'                            080172
         DC    AL1(OPFP),C'HER'
         DC    AL1(OPMI),C'HIO'
         DC    AL1(OPMI+OP370),C'ICM'                            080172
         DC    AL1(OPMI),C'ISK'
T3L      DC    AL1(OPMI),C'LCR'
         DC    AL1(OPFP),C'LDR'
         DC    AL1(OPFP),C'LER'
         DC    AL1(OPMI),C'LNR'
         DC    AL1(OPMI),C'LPR'
         DC    AL1(OPMI+OP370),C'LRA'                            080372
         DC    AL1(OPMI),C'LTR'
         DC    AL1(OPFP),C'MDR'
         DC    AL1(OPFP),C'MER'
         DC    AL1(OPMI),C'MVC'
         DC    AL1(OPMI),C'MVI'
         DC    AL1(OPMI),C'MVN'
         DC    AL1(OPMI),C'MVO'
         DC    AL1(OPMI),C'MVZ'
         DC    AL1(OPFP),C'MXD'
         DC    AL1(OPFP),C'MXR'
         DC    AL1(OPMI),C'NOP'
         DC    AL1(OPASM),C'ORG'
         DC    AL1(OPMI),C'RDD'
         DC    AL1(OPMI+OP370),C'RRB'                            080372
T3S      DC    AL1(OPMI+OP370),C'SCK'                            080172
         DC    AL1(OPFP),C'SDR'
         DC    AL1(OPFP),C'SER'
         DC    AL1(OPMI),C'SIO'
         DC    AL1(OPMI),C'SLA'
         DC    AL1(OPMI),C'SLL'
         DC    AL1(OPMI),C'SLR'
         DC    AL1(OPMI),C'SPM'
         DC    AL1(OPMI+OP370),C'SPT'                            080372
         DC    AL1(OPMI),C'SRA'
         DC    AL1(OPMI),C'SRL'
         DC    AL1(OPDEC+OP370),C'SRP'                           080772
         DC    AL1(OPMI),C'SSK'
         DC    AL1(OPMI),C'SSM'
         DC    AL1(OPMI),C'STC'
         DC    AL1(OPFP),C'STD'
         DC    AL1(OPFP),C'STE'
         DC    AL1(OPMI),C'STH'
         DC    AL1(OPMI),C'STM'
         DC    AL1(OPFP),C'SUR'
         DC    AL1(OPMI),C'SVC'
         DC    AL1(OPFP),C'SWR'
         DC    AL1(OPFP),C'SXR'
         DC    AL1(OPMI),C'TCH'
         DC    AL1(OPMI),C'TIO'
         DC    AL1(OPMI),C'TRT'
         DC    AL1(OPMI),C'WRD'
         DC    AL1(OPDEC),C'ZAP'
T3END    EQU   *
         SPACE 3
T4       EQU   *    TABLE OF 4 CHAR OP-CODES
         DC    AL1(OPMAC),C'ACTR'
         DC    AL1(OPMAC),C'ANOP'
         DC    AL1(OPMI),C'BALR'
         DC    AL1(OPMI),C'BCTR'
         DC    AL1(OPMI),C'BXLE'
         DC    AL1(OPMI+OP370),C'CLCL'                           080172
         DC    AL1(OPASM),C'CNOP'
         DC    AL1(OPASMBM),C'COPY'      ALLOWED BEFORE GBL/LCL  91153
         DC    AL1(OPASM),C'DROP'
         DC    AL1(OPDEC),C'EDMK'
         DC    AL1(OPMAC),C'GBLA'
         DC    AL1(OPMAC),C'GBLB'
         DC    AL1(OPMAC),C'GBLC'
         DC    AL1(OPASMBM),C'ICTL'
         DC    AL1(OPASMBM),C'ISEQ'
T4L      DC    AL1(OPFP),C'LCDR'
         DC    AL1(OPFP),C'LCER'
         DC    AL1(OPMAC),C'LCLA'
         DC    AL1(OPMAC),C'LCLB'
         DC    AL1(OPMAC),C'LCLC'
         DC    AL1(OPMI+OP370),C'LCTL'                           080172
         DC    AL1(OPFP),C'LNDR'
         DC    AL1(OPFP),C'LNER'
         DC    AL1(OPFP),C'LPDR'
         DC    AL1(OPFP),C'LPER'
         DC    AL1(OPMI),C'LPSW'
         DC    AL1(OPFP),C'LRDR'
         DC    AL1(OPFP),C'LRER'
         DC    AL1(OPFP),C'LTDR'
         DC    AL1(OPFP),C'LTER'
         DC    AL1(OPMAC),C'MEND'
         DC    AL1(OPMI+OP370),C'MVCL'                           080172
         DC    AL1(OPFP),C'MXDR'
         DC    AL1(OPMI),C'NOPR'
         DC    AL1(OPMI),C'PACK'
         DC    AL1(OPMI+OP370),C'PTLB'                           080372
T4S      DC    AL1(OPMI+OP370),C'SCKC'                           080372
         DC    AL1(OPMAC),C'SETA'
         DC    AL1(OPMAC),C'SETB'
         DC    AL1(OPMAC),C'SETC'
         DC    AL1(OPMI+OP370),C'SIOF'                           080172
         DC    AL1(OPMI),C'SLDA'
         DC    AL1(OPMI),C'SLDL'
         DC    AL1(OPMI),C'SRDA'
         DC    AL1(OPMI),C'SRDL'
         DC    AL1(OPMI+OP370),C'STCK'                           080172
         DC    AL1(OPMI+OP370),C'STCM'                           080172
         DC    AL1(OPMI+OP370),C'STPT'                           080372
         DC    AL1(OPMI),C'UNPK'
T4END    EQU   *
         SPACE 3
T5       EQU   *    TABLE OF 5 CHAR OP-CODES
         DC    AL1(OPASM),C'CSECT'
         DC    AL1(OPASM),C'DSECT'
         DC    AL1(OPASMBM),C'EJECT'
         DC    AL1(OPASM),C'ENTRY'
         DC    AL1(OPASM),C'EXTRN'
T5L      DC    AL1(OPASM),C'LTORG'
         DC    AL1(OPMAC),C'MACRO'
         DC    AL1(OPMAC),C'MEXIT'
         DC    AL1(OPMAC),C'MNOTE'
         DC    AL1(OPASM),C'OPSYN'                               080172
         DC    AL1(OPASMBM),C'PRINT'
         DC    AL1(OPASM),C'PUNCH'
         DC    AL1(OPASM),C'REPRO'
T5S      DC    AL1(OPASMBM),C'SPACE'
         DC    AL1(OPASM),C'START'
         DC    AL1(OPMI+OP370),C'STCKC'                          080372
         DC    AL1(OPMI+OP370),C'STCTL'                          080172
         DC    AL1(OPMI+OP370),C'STIDC'                          080172
         DC    AL1(OPMI+OP370),C'STIDP'                          080172
         DC    AL1(OPMI+OP370),C'STNSM'                          080372
         DC    AL1(OPMI+OP370),C'STOSM'                          080372
         DC    AL1(OPASMBM),C'TITLE'
         DC    AL1(OPASM),C'USING'
         DC    AL1(OPASM),C'WXTRN'                               080172
T5END    EQU   *
         SPACE 6
MACENT   DSECT ,
MACNAME  DS    CL8                 MACRO NAME
         DS    CL1
MACSTAT  DS    CL1                 STATUS FLAGS
*                                    00=ENTERED IN PHASE 2
*                                    FF=DUMPED FOR PHASE 3
MACENTSZ EQU   *-MACENT
         SPACE 6
MACRFNST CSECT ,
MACLST   DC    150CL(MACENTSZ)' '
DUMMY    DC    XL1'FF',(MACENTSZ-1)CL1'9'   END OF LIST/HI VALUE
         END   ,
