         MACRO
&LABEL   LCTLE &START,&END,&ADDRESS
.*
.**********************************************************************
.*                                                                    *
.*01* MACRO-NAME = LCTLE                                              *
.*                                                                    *
.*01* DESCRIPTIVE-NAME = LCTL EXTENDED                                *
.*                                                                    *
.*01* COPYRIGHT =  5740-XYN COPYRIGHT IBM CORP. 1980,                 *
.*               LICENSED MATERIAL PROGRAM,                           *
.*               PROPERTY OF IBM,                                     *
.*               REFER TO COPYRIGHT INSTRUCTIONS FORM NUMBER          *
.*               G120-2083.                                           *
.*                                                                    *
.*01* STATUS = OS/VS2 JBB1226                                         *
.*                                                                    *
.*01* FUNCTION = USED TO MAINTAIN COPIES OF CONTROL REGISTERS 1,      *
.*               3, 4, 5, 7, 12, AND 14 IN THE PSA OR HARDWARE,       *
.*               WHICHEVER IS APPROPRIATE.  THE OTHER CONTROL         *
.*               REGISTERS ARE MAINTAINED IN THE HARDWARE.            *
.*                                                                    *
.*01* MODULE-TYPE = MACRO                                             *
.*                                                                    *
.*02* PROCESSOR = ASSEMBLER                                           *
.*                                                                    *
.*02* MODULE SIZE = 240 LOC                                           *
.*                                                                    *
.*01* RESTRICTIONS = CONTROL REGISTER RANGE MUST NOT GO OFF END OF    *
.*                   BASE REGISTER OF &ADDRESS                        *
.*                                                                    *
.*01* MACROS = IHBERMAC, IHAPSA (NEEDED TO USE MACRO)                 *
.*                                                                    *
.*01* CHANGE-ACTIVITY = @G38FPXY - MICRO CODE/SIMULATION SUPPORT      *
.*                      @ZM50136 - CHANGE MASKS TO HARD CODE INSTEAD  *
.*                                 OF USING EQUATES IN PSA            *
.*                                                                    *
.*01* MNOTES =  IHB002 INVALID OPERAND SPECIFIED                      *
.*              IHB247 INCORRECT NUMBER OF OPERAND VALUES             *
.*                                                                    *
.**********************************************************************
.* A-000000-999999                                             @G38FPXY
.*
*        MACDATE = 80.029
.*
.*       MACRO VARIABLE DECLARES
.*
         LCLA  &I                 INDEX VARIABLE
         LCLC  &C                 BRANCH CONDITION
         LCLC  &X                 BRANCH CONTROL REG NUMBER
         LCLA  &CREG              CONTROL REG NUMBER
         LCLB  &SIMTEST           SIMULATION TEST NEEDED FLAG
         LCLB  &LOAD1             CNTL REG 1 LOADED INDICATOR
         LCLB  &LOAD7             CNTL REG 7 LOADED INDICATOR
         LCLB  &LOAD14            CNTL REG 14 LOADED INDICATOR
         LCLA  &OFFSET            MVC OFFSET OPERAND
         LCLA  &WRAPFAC           WRAP FACTOR FOR OFFSET
         LCLA  &LENGTH            MVC LENGTH OPERAND
         LCLC  &POSITN            MACRO OPERAND POSITION
         LCLC  &OPERAND           MACRO OPERAND
         LCLC  &FROM              MVC 'FROM' OPERAND
         LCLC  &FROMBEG           BEGINNING OF 'FROM' OPERAND
         LCLC  &FROMEND           END OF MVC 'FROM' OPERAND
         LCLC  &PARM1,&PARM2      IHBERMAC PARAMETERS
         LCLA  &SUBBEG            FIRST CNTL REG OF SUB-RANGE
         LCLA  &SUBEND            LAST CNTL REG OF SUB-RANGE
         LCLA  &TEMPBEG           FIRST CNTL REG OF TEMP SUB-RANGE
         LCLA  &TEMPEND           LAST CNTL REG OF TEMP SUB-RANGE
         LCLA  &PTI,&PTSIZE       CNTL REG TABLE (PT) INDEX & SIZE
         LCLA  &PTBEG(8)          FIRST CNTL REG OF SIMULATION REGS
         LCLA  &PTEND(8)          LAST CNTL REG OF SIMULATION CNTL REGS
         LCLC  &PTREGC(16)        CNTL REG CHAR REP FOR 0-F (HEX)
.*
.*
.*
.*  THE &PTBEG AND &PTEND ARRAYS CONTAIN RANGES OF SIMULATED
.*  CONTROL REGISTERS, &PTBEG BEING THE FIRST CNTL REG IN THE RANGE
.*  AND &PTEND BEING THE LAST CNTL REG IN THE RANGE. THESE RANGES
.*  MUST BE IN ASCENDING ORDER IN THE ARRAYS FROM ENTRY #1
.*  THRU ENTRY # &PTSIZE; I.E. THE FOLLOWING MUST HOLD:
.*
.*     &PTBEG(I) <= &PTEND(I) < &PTBEG(I+1) <= &PTEND(I+1)
.*             FOR I=1,2,...,&PTSIZE-1
.*
.*
.*
.*
.*
.**********************************************************************
.*                                                                    *
.*       INITIALIZE THE SIMULATION CONTROL REGISTER TABLES            *
.*                                                                    *
.**********************************************************************
.*
.*
&PTSIZE  SETA  4                  INIT NUMBER OF ENTRIES
.*
&PTBEG(1) SETA 1                  INIT ENTRY #1   (CNTL REG 1)
&PTEND(1) SETA 1
&PTBEG(2) SETA 3                  INIT ENTRY #2   (CNTL REGS 3-5)
&PTEND(2) SETA 5
&PTBEG(3) SETA 7                  INIT ENTRY #3   (CNTL REG 7)
&PTEND(3) SETA 7
&PTBEG(4) SETA 12                 INIT ENTRY #4   (CNTL REG 12)
&PTEND(4) SETA 12
.*
&PTREGC(1)  SETC  '0'             INIT CNTL REGS CHAR REP (IN HEX)
&PTREGC(2)  SETC  '1'
&PTREGC(3)  SETC  '2'
&PTREGC(4)  SETC  '3'
&PTREGC(5)  SETC  '4'
&PTREGC(6)  SETC  '5'
&PTREGC(7)  SETC  '6'
&PTREGC(8)  SETC  '7'
&PTREGC(9)  SETC  '8'
&PTREGC(10) SETC  '9'
&PTREGC(11) SETC  'A'
&PTREGC(12) SETC  'B'
&PTREGC(13) SETC  'C'
&PTREGC(14) SETC  'D'
&PTREGC(15) SETC  'E'
&PTREGC(16) SETC  'F'
.*
.*
.**********************************************************************
.*                                                                    *
.*       CHECK &START AND &END FOR VALID CONTROL REGISTER NUMBERS     *
.*                                                                    *
.**********************************************************************
.*
.*       REQUIRED NUMBER OF OPERANDS IS 3
.*
         AIF   (N'&SYSLIST NE 3).ERR1
.*
.*       FIRST AND SECOND OPERANDS MUST BE DECIMAL DIGITS
.*
&POSITN  SETC  'FIRST'            SET POSITION DESCRIPTION FOR IHBERMAC
&OPERAND SETC  '&START'           SET OPERAND FIELD FOR IHBERMAC
         AIF   (T'&START NE 'N').ERR2    &START NON-NUMERIC ?
         AIF   (&START LT 0 OR &START GT 15).ERR2   &START NOT VALID ?
.*
&POSITN  SETC  'SECOND'           SET POSITION DESCRIPTION FOR IHBERMAC
&OPERAND SETC  '&END'             SET OPERAND FIELD FOR IHBERMAC
         AIF   (T'&END NE 'N').ERR2      &END NON-NUMERIC ?
         AIF   (&END LT 0 OR &END GT 15).ERR2     &END NOT VALID ?
.*
.*
.*
.*
.*
.*       MACRO INVOCATION IS VALID.  CODE TO BE GENERATED CONSISTS
.*       OF THREE PARTS:  1) MOVING REGISTER VALUES TO PSA OR LOADING
.*                           PHYSICAL CONTROL REGISTERS
.*                        2) LOADING CONTROL REGISTER 14 AND MOVING
.*                           IT TO THE PSA IF IT IS IN THE RANGE
.*                        3) LOADING CONTROL REGISTER 1 IF CNTL REGS 1
.*                           OR 7 IS IN THE RANGE OF REGS TO BE LOADED
.*
.*
.*
.*
.*
.*
.**********************************************************************
.*                                                                    *
.*       SEPARATE BEGINNING AND ENDING OF &ADDRESS                    *
.*                                                                    *
.**********************************************************************
.*
.*
.*
&I       SETA  1                  INITIALIZE CHARACTER INDEX
.*
.LOOP    ANOP
         AIF   ('&ADDRESS'(&I,1) EQ '(').TYPE2  &ADDRESS HAS REG ?
         AIF   (&I EQ K'&ADDRESS).TYPE1   &ADDRESS IS SYMBOL ONLY ?
&I       SETA  &I+1               INCREMENT INDEX
         AGO   .LOOP              LOOP BACK
.*
.TYPE1   ANOP                     &ADDRESS IS SYMBOL ONLY
&FROMBEG SETC  '&ADDRESS'         SET BEGINNING OF ADDRESS
&FROMEND SETC  ''                 SET END OF ADDRESS
         AGO   .GEN0              BRANCH TO CONTINUE
.*
.TYPE2   ANOP                     &ADDRESS IS DISP/REG
&FROMBEG SETC  '&ADDRESS'(1,&I-1) SET DISP OF ADDRESS
&FROMEND SETC  '&ADDRESS'(&I,K'&ADDRESS-&I+1)  SET REG OF ADDRESS
.*
.*
.*       NOTE: THE DISPLACEMENT MUST NOT CONTAIN AN EXPRESSION WHICH
.*             CONTAINS A '(', AND THEREFORE, A ')'.  IF SO,
.*             ASSEMBLER ERRORS WILL RESULT ALTHOUGH MACRO MNOTES
.*             WILL NOT BE PRODUCED.
.*
.*
.*
.*
.*
.*
.**********************************************************************
.*                                                                    *
.*       TEST TO SEE IF SIMULATION CHECK IS NEEDED                    *
.*                                                                    *
.**********************************************************************
.*
.*
.GEN0    ANOP
.*
&PTI     SETA  1                  INIT PT INDEX FOR LOOP
.*
.PTLP    ANOP                     BEGINNING OF LOOP
.*
         AIF   (&END LT &START).CONT   CHECK FOR WRAP-AROUND; BR IF SO
.*
.*
.*       IF SPECIAL CONTROL REGISTER IN RANGE PTBEG-PTEND FOR THIS
.*       TABLE ENTRY IS IN RANGE &START-&END, THEN BRANCH TO
.*       GENERATE SIMULATION TEST.
.*
&LOAD14  SETB  ((&START LE 14) AND (14 LE &END))  CNTL REG 14 LOAD IND
         AIF   ((&START LE &PTEND(&PTI)) AND                           X
               (&END GE &PTBEG(&PTI))).GEN1    BRANCH IF SPECIAL REG
         AGO   .NEXT              TRY NEXT ENTRY IN TABLES
.*
.CONT    ANOP                     WRAP-AROUND PRESENT
.*
.*
.*       WRAP AROUND PRESENT.  IF SPECIAL CONTROL REGISTER IN RANGE
.*       PTBEG-PTEND FOR THIS TABLE ENTRY IS IN RANGE &START-&END,
.*       THEN BRANCH TO GENERATE SIMULATION TEST.
.*
&LOAD14  SETB  ((&START LE 14) OR (14 LE &END))  CNTL REG 14 LOAD IND
         AIF   ((&START LE &PTEND(&PTI)) OR                            X
               (&END GE &PTBEG(&PTI))).GEN1    BRANCH IF SPECIAL REG
.*
.*
.NEXT    ANOP                     CHECK FOR END OF PT TABLES
&PTI     SETA  &PTI+1             INCREMENT TABLE INDEX
         AIF   (&PTI LE &PTSIZE).PTLP  LOOP BACK IF MORE ENTRIES
.*
.*
.*
.*       SINCE THERE ARE NO SPECIAL CONTROL REGISTERS IN THE RANGE
.*       &START-&END, GENERATE A LCTL FOR THE CONTROL REGISTERS.
.*
&LABEL   LCTL  &START,&END,&ADDRESS          .LOAD CONTROL REGISTER(S)
.*
         AIF   (NOT &LOAD14).CONTME    BRANCH IF CNTL REG 14 NOT LOADED
&OFFSET  SETA  14-&START          CALCULATE THE OFFSET FROM &ADDRESS
         AIF   (&OFFSET GE 0).CONTMB   BRANCH IF WRAP FACTOR NOT NEEDED
&OFFSET  SETA  &OFFSET+16         ADD WRAP FACTOR TO OFFSET
.CONTMB  ANOP
&OFFSET  SETA  &OFFSET*4          GET NUMBER OF BYTES IN OFFSET
&FROM    SETC  '&FROMBEG'.'+'.'&OFFSET'.'&FROMEND'   FROM OPERAND
         MVC   PSAXMCRE-PSA(4,0),&FROM
*                                            .MOVE LOGICAL CNTL REG 14
.*
.*
.CONTME  ANOP
.*
         MEXIT
.*
.*
.*
.*
.*
.**********************************************************************
.*                                                                    *
.*       START GENERATION OF CODE TO HANDLE SIMULATION OF CNTL REGS   *
.*                                                                    *
.**********************************************************************
.*
.*
.GEN1    ANOP
&LABEL   TM    PSAXMFB1-PSA(0),X'20'         .HARDWARE FEATURE @ZM50136
         BZ    IHB&SYSNDX.A                  .BRANCH IF HARDWARE AVAIL
.*
.*
.*
.*
.**********************************************************************
.*                                                                    *
.*       INITIALIZE PT LOOP VARIABLES DEPENDING ON                    *
.*       WRAP-AROUND PRESENCE.                                        *
.*                                                                    *
.**********************************************************************
.*
         AIF   (&END LT &START).WRAP1    WRAP-AROUND PRESENT?
.*
.*
.*
.*       INITIALIZE FOR NO WRAP-AROUND
.*
&WRAPFAC SETA  0                  WRAP FACTOR FOR NON-WRAP SUBRANGE
&SUBBEG  SETA  &START             SET FIRST CNTL REG IN SUBRANGE
&SUBEND  SETA  &END               SET LAST CNTL REG IN SUBRANGE
&TEMPEND SETA  &SUBBEG-1          TEMPORARY END TO DEFAULT
&PTI     SETA  1                  INITIALIZE PT TABLE INDEX
         AGO   .PTLOOP            GO PROCESS SUBRANGE
.*
.*
.*
.*       INITIALIZE FOR WRAP-AROUND
.*
.WRAP1   ANOP
&WRAPFAC SETA  0                  WRAP FACTOR FOR NON-WRAP SUBRANGE
&SUBBEG  SETA  &START             SET FIRST CNTL REG IN SUBRANGE
&SUBEND  SETA  15                 SET LAST CNTL REG IN SUBRANGE
&TEMPEND SETA  &SUBBEG-1          TEMPORARY END TO DEFAULT
&PTI     SETA  1                  INITIALIZE PT TABLE INDEX
.*
.*
.*
.*
.*
.*
.**********************************************************************
.*                                                                    *
.*       PTLOOP --- PROCESS THE GIVEN SUBRANGE FOR CONTROL REGISTERS  *
.*             IN &SUBBEG AND &SUBEND GENERATING CODE TO MOVE THE     *
.*             REGS TO THE PSA OR HARDWARE AS NEEDED.                 *
.*                                                                    *
.**********************************************************************
.*
.*
.PTLOOP  ANOP                     BEGINNING OF PT LOOP
.*
.*
.*             IF SPECIAL CNTL REG IN PT RANGE PTBEG-PTEND FOR THIS
.*             TABLE ENTRY IS NOT IN SUBRANGE SUBBEG-SUBEND, THEN
.*             BRANCH TO TRY THE NEXT TABLE ENTRY.  OTHERWISE,
.*             GENERATE CODE FOR THE PT RANGE GIVEN THE SUBRANGE
.*             (I.E. DO NOT GO OUT OF SUBRANGE WITH PT RANGE
.*             CODE GENERATION).
.*
         AIF   (&SUBBEG GT &PTEND(&PTI)).NEXTPT   IF ENTRY NOT
         AIF   (&SUBEND LT &PTBEG(&PTI)).NEXTPT   IN USE, SKIP IT
.*
.**********************************************************************
.*       PROCESS THIS SUB-SUB-RANGE (I.E. PT RANGE)                   *
.**********************************************************************
.*
.*
.*             GET TEMPORARY BEGINNING CONTROL REGISTER
.*
&TEMPBEG SETA  &SUBBEG            ASSUME BEG OF SUBRANGE IS BEG OF
.*                                TEMPORARY RANGE
         AIF   (&SUBBEG GE &PTBEG(&PTI)).CONTLA   IF SO, BRANCH
.*
.*             IF SUBRANGE BEGINNING IS BEFORE PT RANGE BEGINNING,
.*             THEN GENERATE LCTL FOR CNTL REGS UP TO PT RANGE BEG.
.*
&OFFSET  SETA  (&SUBBEG-&START+&WRAPFAC)*4    SET OFFSET FROM ADDRESS
&FROM    SETC  '&FROMBEG'.'+'.'&OFFSET'.'&FROMEND'  GET FROM OPERAND
&CREG    SETA  &PTBEG(&PTI)-1          GET END CNTL REG FOR LCTL
         LCTL  &SUBBEG,&CREG,&FROM           .LOAD CONTROL REGISTER(S)
.*
&TEMPBEG SETA  &PTBEG(&PTI)       RESET TEMPORARY BEG CNTL REG
.*
.*
.*
.*
.*             GET TEMPORARY ENDING CONTROL REGISTER
.*
.CONTLA  ANOP                     GET TEMPORARY END CNTL REG
&TEMPEND SETA  &PTEND(&PTI)       ASSUME END OF PT RANGE IS END OF
.*                                TEMPORARY RANGE.
         AIF   (&SUBEND GE &PTEND(&PTI)).CONTLB   IF SO, BRANCH
.*
&TEMPEND SETA  &SUBEND            IF NOT, SET END OF SUBRANGE AS END
.*                                FOR CODE GENERATION
.*
.*
.*
.*
.**********************************************************************
.*             GENERATE MVC TO MOVE CONTROL REGISTER(S) TO PSA        *
.**********************************************************************
.*
.CONTLB  ANOP                     GENERATE MVC FOR TEMPORARY RANGE
&OFFSET  SETA  (&TEMPBEG-&START+&WRAPFAC)*4   SET OFFSET FROM ADDRESS
&LENGTH  SETA  (&TEMPEND-&TEMPBEG+1)*4   SET LENGTH FOR MVC
&FROM    SETC  '&FROMBEG'.'+'.'&OFFSET'.'&FROMEND'  GET FROM OPERAND
         MVC   PSAXMCR&PTREGC(&TEMPBEG+1).-PSA(&LENGTH.,0),&FROM
*                                            .MOVE LOGICAL CNTL REG(S)
.*
.*
.*
.**********************************************************************
.*             ADJUST SUBRANGE BEGINNING FOR NEXT LOOP ITERATION      *
.**********************************************************************
.*
         AIF   (&TEMPEND EQ &SUBEND).CONTLC   END OF SUBRANGE REACHED?
.*
&SUBBEG  SETA  &TEMPEND+1         NO, SET NEW SUBRANGE BEGINNING
.*
.*
.*
.NEXTPT  ANOP                     LOOP BACK IF NOT END OF TABLE
.*
&PTI     SETA  &PTI+1             INCREMENT TABLE INDEX
         AIF   (&PTI LE &PTSIZE).PTLOOP  LOOP BACK IF MORE TAB ENTRIES
.*
.*
.*
.*
.*
.**********************************************************************
.*                                                                    *
.*       PTLOOP TERMINATION FOR BOTH NO WRAP-AROUND AND               *
.*       WRAP-AROUND CASES.                                           *
.*                                                                    *
.**********************************************************************
.*
.CONTLC  ANOP                     CHECK FOR WRAP-AROUND
         AIF   (&END LT &START).WRAP2   BRANCH IF WRAP-AROUND PRESENT
.*
.*
.*
.**********************************************************************
.*                                                                    *
.*       PTLOOP TERMINATION FOR NO WRAP-AROUND ---                    *
.*                                                                    *
.*             IF CODE HAS NOT BEEN GENERATED FOR THE ENTIRE RANGE    *
.*             &START-&END(&SUBEND), THEN GENERATE A LCTL FOR THE     *
.*             REMAINING CONTROL REGISTER(S).  NO SPECIAL CONTROL     *
.*             REGISTERS REMAIN WITHIN THESE REMAINING CONTROL        *
.*             REGISTERS BECAUSE THE PT TABLE ENTRIES HAVE BEEN       *
.*             EXAUSTED.                                              *
.*                                                                    *
.**********************************************************************
.*
         AIF   (&TEMPEND GE &SUBEND).CONTWA  END OF SUBRANGE?
.*
&OFFSET  SETA  (&SUBBEG-&START)*4       SET OFFSET FOR ADDRESS
&FROM    SETC  '&FROMBEG'.'+'.'&OFFSET'.'&FROMEND'   GET FROM OPERAND
         LCTL  &SUBBEG,&SUBEND,&FROM         .LOAD CONTROL REGISTER(S)
.*
.CONTWA  ANOP
&LOAD1   SETB  ((&START LE 1) AND (1 LE &END))     SET CNTL REG 1,
&LOAD7   SETB  ((&START LE 7) AND (7 LE &END))     7, & 14 LOAD
&LOAD14  SETB  ((&START LE 14) AND (14 LE &END))   INDICATORS
         AGO   .EXIT              GO TERMINATE MACRO
.*
.*
.*
.**********************************************************************
.*       PT LOOP TERMINATION FOR WRAP-AROUND PRESENCE                 *
.**********************************************************************
.*
.WRAP2   ANOP
.*
         AIF   (&WRAPFAC EQ 16).WRAP3    SECOND WRAP-AROUND LOOP EXIT?
.*
.*
.*
.**********************************************************************
.*                                                                    *
.*       FIRST TIME WRAP-AROUND TERMINATION OF PTLOOP ---             *
.*                                                                    *
.*             THERE MAY BE MORE THAN ONE NON-SPECIAL CONTROL REG     *
.*             BETWEEN THE LAST SPECIAL CONTROL REGISTER OF THIS      *
.*             HALF OF WRAP-AROUND PROCESSING AND THE FIRST SPECIAL   *
.*             CONTROL REGISTER OF THE NEXT HALF.  IF THIS IS TRUE,   *
.*             THEN GENERATE A LCTL FOR THESE CONTROL REGISTERS.      *
.*             ALSO, THERE MAY NOT BE ANY SPECIAL CONTROL REGISTERS   *
.*             FOR WHICH THE NEXT HALF IS TO GENERATE CODE.  IF THIS  *
.*             IS THE CASE, THEN GENERATE A LCTL FOR THE REMAINING    *
.*             CONTROL REGISTER(S) AND INDICATE THE NEXT HALF IS      *
.*             NOT TO PROCESS BY SETTING THE BEGINNING CONTROL REG    *
.*             VALUE NEGATIVE.  SET UP THE BEGINNING CONTROL REG OF   *
.*             THE NEW SUBRANGE TO BEGIN WHERE THE LCTL ENDS, EXCEPT  *
.*             IN THE CASE WHERE IT IS SET NEGATIVE TO CAUSE          *
.*             PROCESSING TO STOP.                                    *
.*                                                                    *
.**********************************************************************
.*
         AIF   (&END GE &PTBEG(1)).CONTWB   BRANCH IF SPECIAL CNTL REG
.*                                          FOR THE NEXT HALF OF WRAP
.*
.*
.**********************************************************************
.*             NO SPECIAL CNTL REGS IN NEXT HALF OF WRAP-AROUND.      *
.*             GENERATE LCTL AND STOP.                                *
.**********************************************************************
.*
&SUBBEG  SETA  -1                 INDICATE THAT NEXT HALF NEED NOT RUN
&SUBEND  SETA  &END               SET LAST CNTL REG FOR LCTL
         AGO   .CONTWD            GO GENERATE LCTL
.*
.CONTWB  ANOP
         AIF   (&PTBEG(1) EQ 0).CONTWC   BRANCH IF NO NON-SPECIAL CNTL
.*                                       REGS BEFORE SPECIAL CNTL REGS
.*
&SUBBEG  SETA  &PTBEG(1)          SET FIRST CNTL REG IN NEXT SUBRANGE
&SUBEND  SETA  &PTBEG(1)-1        SET LAST CNTL REG FOR LCTL
         AGO   .CONTWD            GO GENERATE LCTL
.*
.CONTWC  ANOP
&SUBBEG  SETA  0                  SET FIRST CR IN NEXT SUBRANGE
         AIF   (&TEMPEND EQ 15).GEN3   BRANCH IF NO NON-SPECIAL CNTL
.*                                     REG LEFT IN THIS HALF
.*
.CONTWD  ANOP                     GENERATE LCTL FOR NON-SPECIAL CRS
&OFFSET  SETA  (&TEMPEND+1-&START)*4   SET OFFSET FOR ADDRESS
&FROM    SETC  '&FROMBEG'.'+'.'&OFFSET'.'&FROMEND'  GET FROM OPERAND
&CREG    SETA  &TEMPEND+1               GET LAST CR FOR LCTL
         LCTL  &CREG,&SUBEND,&FROM           .LOAD CONTROL REGISTER(S)
.*
.*
.**********************************************************************
.*       INITIALIZE LOOP VARIABLE FOR SECOND HALF OF WRAP-            *
.*       AROUND PROCESSING OR TERMINATE MACRO PROCESSING.             *
.**********************************************************************
.*
.GEN3    ANOP
.*
         AIF   (&SUBBEG LT 0).CONTWE   BRANCH IF NO PROCESSING
.*                                     REMAINS TO BE DONE
.*
&WRAPFAC SETA  16                 SET WRAP FACTOR FOR WRAP-AROUND
&SUBEND  SETA  &END               SET LAST CNTL REG IN NEW SUBRANGE
&TEMPEND SETA  &SUBBEG-1          SET NEW TEMPORARY END CNTL REG
&PTI     SETA  1                  SET PT TABLE INDEX
         AGO   .PTLOOP            ENTER PT LOOP FOR SECOND TIME
.*
.*
.*
.*
.**********************************************************************
.*                                                                    *
.*       SECOND TIME PT LOOP TERMINATION FOR WRAP-AROUND ---          *
.*                                                                    *
.*             IF THERE REMAINS ANY NON-SPECIAL CONTROL REGISTERS     *
.*             IN THE RANGE &START-&END AFTER BOTH WRAP-AROUND        *
.*             PROCESSING HALVES, THEN GENERATE A LCTL FOR THE        *
.*             REMAINING CONTROL REGISTERS.  IF NO CONTROL REGISTERS  *
.*             REMAIN IN THE RANGE, THEN TERMINATE PROCESSING BY      *
.*             SETTING SOME CONTROL REGISTER LOAD INDICATORS AND      *
.*             GOING TO .EXIT.                                        *
.*                                                                    *
.**********************************************************************
.*
.WRAP3   ANOP
         AIF   (&TEMPEND GE &SUBEND).CONTWE  BRANCH IF NO NON-SPECIAL
.*                                           CONTROL REGISTERS REMAIN
.*
.*             GENERATE LCTL FOR ANY REMAINING NON-SPECIAL
.*             CONTROL REGISTERS.
.*
&OFFSET  SETA  (&TEMPEND+17-&START)*4   SET OFFSET FOR ADDRESS
&FROM    SETC  '&FROMBEG'.'+'.'&OFFSET'.'&FROMEND'
&CREG    SETA  &TEMPEND+1               GET LAST CR FOR LCTL
         LCTL  &CREG,&SUBEND,&FROM           .LOAD CONTROL REGISTER(S)
.*
.*
.CONTWE  ANOP
&LOAD1   SETB  ((&START LE 1) OR (1 LE &END))     SET CNTL REG 1,
&LOAD7   SETB  ((&START LE 7) OR (7 LE &END))     7, & 14 LOAD
&LOAD14  SETB  ((&START LE 14) OR (14 LE &END))   INDICATORS
.*
.*
.*
.*
.*
.*
.**********************************************************************
.*                                                                    *
.*       END OF RANGE &START-&END PROCESSING --- GENERATE CODE TO     *
.*       LOAD HARDWARE CONTROL REGISTER 1 IF SIMULATION CONTROL       *
.*       REGISTER 1 OR 7 ARE LOADED AS REQUIRED BY THE CURRENT        *
.*       ADDRESSING MODE.  ALSO, GENERATE CODE TO MOVE CONTROL        *
.*       REGISTER 14 TO THE PSA IF NEEDED.                            *
.*                                                                    *
.*       NOTE: CONTROL REGISTERS 1 AND 7 ARE SPECIAL SIMULATED        *
.*             CONTROL REGISTERS BECAUSE THEY AFFECT THE ADDRESSING   *
.*             OF THE MACHINE BY CONTAINING STO VALUES.  THUS,        *
.*             IF THE PHYSICAL CONTROL REGISTERS ARE LOADED BLINDLY,  *
.*             THERE MADE BE A PROBLEM THAT THE NEW ADDRESSING MODE   *
.*             WILL NOT BE CORRECT RELATIVE TO THE LOCATION OF THE    *
.*             CODE.  THEREFORE, IF THE HARDWARE FEATURE IS NOT       *
.*             PRESENT, PHYSICAL CONTROL REGISTER 1 MUST BE LOADED    *
.*             RELATIVE TO THE CURRENT ADDRESSING MODE.               *
.*             CONTROL REGISTER 14 IS A SPECIAL SIMULATED CONTROL     *
.*             REGISTER BECAUSE IT CONTAINS BITS THAT WILL ALWAYS BE  *
.*             CONTAINED IN HARDWARE AND OTHERS WHICH MAY OR MAY NOT. *
.*             THEREFORE, IF CONTROL REGISTER 14 IS LOADED, IT MUST   *
.*             BE MOVED TO THE PSA AND LOADED INTO PHYSICAL CONTROL   *
.*             REGISTER 14.                                           *
.*                                                                    *
.**********************************************************************
.*
.EXIT    ANOP
.*
.*
.*
.**********************************************************************
.*       GENERATE MVC TO MOVE CONTROL REGISTER 14 TO PSA              *
.**********************************************************************
.*
.*
         AIF   (NOT &LOAD14).CONTA     BRANCH IF CNTL REG 14 NOT LOADED
.*
&OFFSET  SETA  14-&START          CALCULATE THE OFFSET FROM &ADDRESS
         AIF   (&OFFSET GE 0).CONTB    BRANCH IF WRAP FACTOR NOT NEEDED
&OFFSET  SETA  &OFFSET+16         ADD WRAP FACTOR TO OFFSET
.*
.CONTB   ANOP
&OFFSET  SETA  &OFFSET*4          GET NUMBER OF BYTES IN OFFSET
&FROM    SETC  '&FROMBEG'.'+'.'&OFFSET'.'&FROMEND'   GET FROM OPERAND
         MVC   PSAXMCRE-PSA(4,0),&FROM
*                                            .MOVE LOGICAL CNTL REG 14
.*
.*
.*
.**********************************************************************
.*       GENERATE CODE TO LOAD CONTROL REG 1 AS NEEDED                *
.**********************************************************************
.*
.CONTA   ANOP
         AIF   (&LOAD1 AND &LOAD7).BOTH   CNTL REGS 1 & 7 LOADED ?
.*
.*
.**********************************************************************
.*             PROCESS ONLY ONE OF CONTROL REGISTERS 1 & 7 LOADED     *
.**********************************************************************
.*
         AIF   (NOT &LOAD1).CONT1   BRANCH IF CNTL REG 1 NOT LOADED
.*
.*             GENERATE CODE TO CONDITIONALLY LOAD HARDWARE CONTROL
.*             REG 1 IF CNTL REG 1 WAS LOADED.
.*
         TM    PSAXMFLG-PSA(0),X'80'         .TEST ADDR MODE   @ZM50136
         BO    IHB&SYSNDX.B                  .SKIP LCTL IF S-BIT ON
         LCTL  1,1,PSAXMCR1-PSA(0)           .LOAD NEW PRIMARY STO
.*
         AGO   .CONT2               BRANCH TO COMPLETE EXIT PROCESSING
.*
.*
.CONT1   ANOP
         AIF   (NOT &LOAD7).CONT2   BRANCH IF CNTL REG 7 NOT LOADED
.*
.*             GENERATE CODE TO CONDITIONALLY LOAD HARDWARE CONTROL
.*             REG 1 IF CNTL REG 7 WAS LOADED.
.*
         TM    PSAXMFLG-PSA(0),X'80'         .TEST ADDR MODE   @ZM50136
         BZ    IHB&SYSNDX.B                  .SKIP LCTL IF S-BIT OFF
         LCTL  1,1,PSAXMCR7-PSA(0)           .LOAD NEW SECONDARY STO
.*
.*
.CONT2   ANOP                     GENERATE BRANCH AROUND LCTL FOR ALL
.*                                CNTL REGS IF ALL HARDWARE IS AVAIL
         B     IHB&SYSNDX.B                  .BRANCH AROUND LCTL
         AGO   .CONTE             CONTINUE MACRO TERMINATION
.*
.*
.*
.**********************************************************************
.*             PROCESS BOTH CONTROL REGISTERS 1 & 7 LOADED            *
.**********************************************************************
.*
.BOTH    ANOP                     GENERATE CODE TO CONDITIONALLY LOAD
.*                                CNTL REG 1 IF CNTL REGS 1&7 WERE LOAD
         TM    PSAXMFLG-PSA(0),X'80'         .TEST ADDR MODE   @ZM50136
         BO    IHB&SYSNDX.C                  .BRANCH IF S-BIT ON
         LCTL  1,1,PSAXMCR1-PSA(0)           .LOAD NEW PRIMARY STO
         B     IHB&SYSNDX.B                  .BRANCH AROUND LCTL'S
         SPACE
IHB&SYSNDX.C EQU *
         LCTL  1,1,PSAXMCR7-PSA(0)           .LOAD NEW SECONDARY STO
         B     IHB&SYSNDX.B                  .BRANCH AROUND LCTL
.*
.*
.CONTE   ANOP
         SPACE
IHB&SYSNDX.A EQU *                           .HARDWARE IS AVAILABLE
         LCTL  &START,&END,&ADDRESS          .LOAD CONTROL REG(S)
         SPACE
IHB&SYSNDX.B EQU *                           .ENDING LABEL
         SPACE
*        NOTE: THE CONDITION CODE IS NOW CHANGED
.*
         MEXIT
.*
.*       MACRO INVOCATION ERRORS
.*
.*
.*       INVALID NUMBER OF OPERANDS
.*
.ERR1    ANOP
         IHBERMAC 1012,OPERAND
         MEXIT
.*
.*       INVALID OPERAND (NOT A VALID DECIMAL DIGIT)
.*
.ERR2    ANOP
         IHBERMAC 1001,&POSITN,&OPERAND
         MEND
