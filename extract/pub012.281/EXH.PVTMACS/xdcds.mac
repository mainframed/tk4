         MACRO
&ID      XDCDS &DUMMY,&TESTRAN=NO,&DIAG=NO,&LEVEL=1
         GBLC  &COMPNM                  COMPONENT NAME
         LCLC  &NM                      MODULE NAME
         JHEAD 'SYMBOL RESOLUTION PHASE DC/DS EVALUATION',             ,
               PHASEID=&ID,                                            ,
               LEVEL=&LEVEL
&NM      SETC  '&COMPNM&ID'
*TITLE-  ASSEMBLER SYMBOL RESOLUTION PHASE DC/DS EVALUATION ROUTINE   *
*                                                                     *
*FUNCTION/OPERATION-                                                  *
*        EVALUATE OPERANDS OF ASSEMBLER OPERATION STATEMENTS DC, DS,  *
*   AND DXD, AND LITERALS IN MACHINE OPERATION STATEMENTS AND THE     *
*   LITERAL POOL.  WHEN EVALUATING A DC, DS, OR DXD STATEMENT, THE    *
*   LOCATION COUNTER IS INCREMENTED AND ALIGNED AS NECESSARY.  WHEN   *
*   EVALUATING A LITERAL IN THE MACHINE OPERATION STATEMENT, THE      *
*   OBJECT LENGTH IS RETURNED.  WHEN SCANNING A LITERAL IN THE        *
*   LITERAL POOL, A SYMBOL REFERENCE RECORD IS GENERATED FOR EACH     *
*   SYMBOL APPEARING IN THE LITERAL.                                  *
         AIF   ('&TESTRAN' NE 'YES').TEST16
*        PUNCH 'SYM' ITEMS.                                           *
.TEST16  ANOP
*                                                                     *
*ENTRY POINT-                                                         *
         ENTRY &NM.01                                                 *
*                                                                     *
*INPUT-                                                               *
*        REGISTER R5 IS THE POINTER TO THE FIRST CHARACTER TO BE      *
*   EVALUATED.                                                        *
*                                                                     *
*OUTPUT-                                                              *
*        REGISTER R14 IS THE POINTER TO THE CHARACTER WHICH LOGICALLY *
*   TERMINATED THE EVALUATION.                                        *
*        REGISTER R15 CONTAINS THE OBJECT LENGTH OF THE LITERAL IN    *
*   THE MACHINE OPERATION STATEMENT.                                  *
*        SYMBOL REFERENCE RECORDS ON 'JOUTFILE'.                      *
         AIF   ('&TESTRAN' NE 'YES').TEST17
*        'SYM' ITEMS ON THE PUNCH FILES.                              *
.TEST17  ANOP
*                                                                     *
*EXTERNAL ROUTINES-                                                   *
*        QCON-     ROUTINE IN X4E TO PROCESS SYMBOLS ENCOUNTERED IN   *
*                  Q-TYPE ADDRESS CONSTANTS.                          *
*        VCON-     ROUTINE IN X4E TO PROCESS SYMBOLS ENCOUNTERED IN   *
*                  V-TYPE ADDRESS CONSTANTS.                          *
*        EVAL-     ROUTINE IN X4V TO EVALUATE EXPRESSIONS.            *
*        REFER-    ROUTINE IN X4E TO OUTPUT SYMBOL REFERENCE RECORDS  *
*                  FOR LITERALS IN THE LITERAL POOL.                  *
*        ENTER-    ROUTINE IN X4S TO ENTER THE NAME OF A DC OR DS     *
*                  STATEMENT IN THE SYMBOL TABLE.                     *
*                                                                     *
*EXITS, NORMAL-                                                       *
*        RETURN TO THE CALLING ROUTINE.                               *
*                                                                     *
*EXITS, ERROR-                                                        *
*        RETURN TO THE CALLING ROUTINE.                               *
*                                                                     *
*TABLES/WORK AREAS-                                                   *
*        DCDSWORK- AN AREA DEFINED IN DSECT 'ICOMMON' AND USED AS     *
*                  WORK STORAGE EXCLUSIVELY BY THIS ROUTINE.          *
*                                                                     *
*ATTRIBUTES-                                                          *
*        REFRESHABLE.                                                 *
*                                                                     *
*NOTES-                                                               *
*                                                                     *
         EJECT
         COPY  JCOMMON
         EJECT
         COPY  JTEXT
         EJECT
         COPY  ICOMMON
         EJECT
JTEXT    DSECT ,
         ORG   JTEXT                    OVERLAY
         COPY  RSYMRCD
         EJECT
* VS1 RELEASE 3.1 CHANGES
*A060500,060600                                                 OX04107
*A445500,445600                                                 OX04090
*A058500,058600                                                 OX05810
*D060500,060600                                                 OX05810
*A058100,058200                                                 OY06131
*D445500-445600                                                @OX07274
&NM.00   CSECT
         JMODID
&NM.01   CONTENTS
         USING &NM.01,R8
         EJECT
DCSCAN   BALR  R14,R7                   SAVE REGISTERS IN STACK
         LR    R8,R12                   BASE REGISTER
         ST    R15,LEVELPTR             STACK LEVEL POINTER
         XC    DCDSWORK,DCDSWORK        INITIALIZATION
         SET   SDZDUPF,OFF              CLEAR ZERO DUPF SW
         LA    R2,D1                    BUMPER
         STH   R2,LATTRSAV              LENGTH ATTRIBUTE
         MVC   DCDSMODE,TYPECALL        ESD INHIBIT FLAG
         TM    TYPECALL,LTCALL          TEST FOR LITERAL        OY06131
         BO    NEWOPRN                  BR OVER OPERAND TST     OY06131
         TM    RFLDI,RFIELDX            ANY OPERAND             OX05810
         BZ    DCABORT                  INVALID - NOOPERAND     OX05810
NEWOPRN  SET   (NOESDS,LMOD,BMOD,SMOD),OFF   INITIAL SETTING
         ST    R2,DUPFAC                DEFAULT DUPLICATION FACTOR
         CLI   CHAR1,J9                 TEST FOR DUPLICATION FACTOR
         BH    DUPF                     NOT DECIMAL SELF-DEFINING
         BAL   R3,EXPR                  EVALUATE VALUE
         BAL   R3,SETUP                 GO SET UP DUPLICATION FACTOR
         LTR   R11,R11                       CHECK FOR SELFDEF ZERO
         BNZ   TYPE                          IF NOT BRANCH
         SET   SDZDUPF,ON                    IND DUPF SELF DEF ZERO
         B     TYPE                     READY TO ANALYZE TYPE
DUPF     CLI   CHAR1,JLPARN             SEE IF EXPRESSION
         BNE   TYPE                     OMITTED FIELD
         ST    R5,ADUPFAC               SAVE ADDRESS OF EXPRESSION
         BAL   R3,EXPR1                 EVALUATE EXPRESSION
TYPE     CLI   CHAR1,JZ                 TEST FOR VALID TYPE
         BH    DCABORT                  INVALID TYPE
         TRT   CHAR1,DCTABLE            EXAMINE CLOSELY
         BZ    DCABORT                  ILLEGAL TYPE
         LA    R2,DCTYPES(R2)           POINT TO SWITCH CODE
         MVC   DCSWORK,D0(R2)           MOVE SWITCH CODE TO WORK AREA
         AIF   ('&TESTRAN' NE 'YES').TEST07
         MVC   DATATYPE,CHAR1           SAVE TYPE
.TEST07  LA    R2,D1                    INCREMENT
         AR    R5,R2                    ADVANCE COLUMN POINTER
         CLI   CHAR1,JL                 SEE IF LENGTH MODIFIER
         BNE   NOLN                     NO LENGTH MODIFIER
         SET   DXDALIGN,OFF             SET DXD ALIGNMENT FACTOR
         SET   LMOD,ON                  INDICATE LENGTH MODIFIED
         AR    R5,R2                    BUMP COLUMN POINTER
         CLI   CHAR1,JPERIOD            SEE IF BIT LENGTH
         BNE   LNGM                     NO BIT LENGTH MODIFIER
         SET   BMOD,ON                  INDICATE BIT LENGTH MODIFIER
         AR    R5,R2                    BUMP COLUMN POINTER
         GOIF  BITLN,OFF=DCABORT        BIT LENGTH NOT ALLOWED
         L     R15,ELCTR                GET CURRENT LOCATION COUNTER
         B     LNGM1                    PUSH
LNGM     GOIF  LTCALL,ON=LNGM3          SEE IF LITERAL
         BAL   R1,ADDBIT                ADD RESIDUAL BITS
         ST    R15,ELCTR                UPDATE LOCATION COUNTER
LNGM1    BAL   R3,NOLN2                 GO MAKE SYMBOL TABLE ENTRY
LNGM3    CLI   CHAR1,J9                 SEE IF DECIMAL SELF DEFINING
         BH    LNGM4                    SKIP IF NOT
         BAL   R3,EXPR                  EVALUATE
         B     LNGM5                    CONTINUE
LNGM4    CLI   CHAR1,JLPARN             MUST BEGIN WITH THIS
         BNE   DCABORT                  INTOLERABLE
         BAL   R3,EXPR1                 EVALUATE
LNGM5    BNE   DCABORT                  MUST BE ABSOLUTE
         GOIF  BMOD,ON=LNGM6            SKIP IF BIT LENGTH
         SLA   R11,D3                   CONVERT TO BITS
         BO    DCABORT                  TOO MANY BITS
LNGM6    CL    R11,=FS3'65535'          TEST FOR ABSOLUTE MAXIMUM
         BH    DCABORT                  TOO LONG
         CLI   SCADDR,XBCON-SCAD        SEE IF B-, C-, OR X-TYPE
         BNE   LNGM7                    SKIP IF NOT
         GOIF  DSCALL,ON=LNGM8          SKIP IF MAXIMUM LENGTH ALLOWED
LNGM7    CH    R11,MAXLN                TEST FOR MAXIMUM ALLOWED
         BH    DCABORT                  TOO LONG
LNGM8    LR    R14,R2                   CLEAR
         IC    R14,MINLN                GET MINIMUM LENGTH
         CR    R11,R14                  SEE IF ENOUGH
         BL    DCABORT                  NOPE
         BAL   R9,AGAIN1                SET UP LENGTH ATTRIBUTE
         SPACE
EMOD     CLI   CHAR1,JS                 SEE IF SCALE MODIFIER
         BAL   R3,MODS                  SCAN EXPRESSION
         AIF   ('&TESTRAN' NE 'YES').TEST14
         BNE   EMOD1                    NO VALID SCALE MODIFIER
         LTR   R11,R11                  SEE IF SCALE ACTUALLY MODIFIED
         BZ    EMOD1                    NOPE
         SET   SCALING,ON               INDICATE SCAL MODIFIER
         STH   R11,SCALE                SCALE MODIFIER
.TEST14  ANOP
EMOD1    CLI   CHAR1,JE                 SEE IF EXPONENT MODIFIER
         BAL   R3,MODS                  EVALUATE EXPRESSION
         CLC   CHAR1,LFDEL              SEE IF CONSTANTS SUBFIELD
         BNE   NOCON                    IS OMITTED
         AR    R5,R2                    BUMP COLUMN POINTER
         AIF   ('&TESTRAN' NE 'YES').TEST13
         ST    R5,XPARM                 SAVE COLUMN POINTER
.TEST13  SR    R4,R4                    CLEAR REGISTER
         LR    R15,R4                   CLEAR
         IC    R15,SCADDR               GET ADDRESS OF SCAN ROUTINE
         B     SCAD(R15)                GO SCAN CONSTANTS
         SPACE
DMOD     C     R2,ADSYM                 SEE IF WE HAVE EVERYTHING
         BL    EMOD                     NO, JUST A LITTLE BIT LONGER
         BAL   R9,AGAIN2                EVALUATE THE DUPLICATION FACTOR
         B     EMOD                     GO ON
         SPACE
NOLN     LR    R11,R2                   CLEAR REGISTER
         IC    R11,DCALIGN              GET IMPLIED ALIGNMENT
         LR    R10,R11                  SAVE
         GOIF  TYPEL,OFF=NOLN1          SKIP IF NOT TYPE L
         AR    R11,R11                  LENGTH OF TYPE L
NOLN1    STH   R11,LATTR                LENGTH ATTRIBUTE
         SLL   R11,D3                   MULTIPLY BY EIGHT
         ST    R11,CONLNG               LENGTH OF ONE CONSTANT IN BITS
         LA    R3,DMOD                  EXIT TIME ROUTINE ADDRESS
         GOIF  LTCALL,ON=(R3)           SKIP IF LITERAL
         BAL   R1,ADDBIT                ROUND FOR BIT
         GOIF  SDZDUPF,ON=NOLN15        ALWAYS ALIGN IF DUPF SELF DEF 0
         GOIF  JALGN,OFF=NOLNX          DONT ALIGN IF OPTION IS OFF
NOLN15   LCR   R1,R10                   GET ALIDNMENT MASK
         BCTR  R10,0                    ROUND
         AIF   ('&TESTRAN' NE 'YES').TEST15
         LR    R0,R15                   SAVE
.TEST15  AR    R15,R10                  ADD CURRENT LOCATION COUNTER
         NR    R15,R1                   ROUND
         AIF   ('&TESTRAN' NE 'YES').TEST02
         TM    ETYPE,ETYPEXD            SEE IF DXD
         BO    NOLNX                    DXD, NO TESTRAN OUTPUT
         STM   R9,R1,TERMS              SAVE REGISTERS
         SR    R15,R0                   SEE IF BYTES SKIPPED
         BE    NOLNY                    NO BYTES SKIPPED
         SET   TSPACE                   ITEM TYPE
         MVC   ADDRESS,ELCTR+D1         ADDRESS OF BYTES SKIPPED
         STC   R15,NAME                 NUMBER OF BYTES SKIPPED
         LA    R10,D5                   LENGTH OF OUTPUT ITEM
         GOTO  SYMPUNCH                 GO TO OUTPUT ROUTINE
NOLNY    LM    R9,R1,TERMS              RESTORE REGISTERS
.TEST02  ANOP
NOLNX    ST    R15,ELCTR                NEW ADDRESS
         GOIF  DXDALIGN,OFF=NOLN2       SEE IF DXD ALIGNMENT SET
         SET   DXDALIGN,OFF             INDICATE SET
         ST    R10,EHILC                SET DXD ALIGNMENT
         AIF   ('&TESTRAN' NE 'YES').TEST04
NOLN2    SET   TDATA                    ORGANIZATION
         MVC   ADDRESS,ELCTR+D1         ADDRESS
         GOIF  DEFNAME,OFF=(R3)         RETURN IF NO NAME
         MVC   NAME,RNAME               NAME
         TR    NAME,JTRTABLE            TRANSLATE NAME
         IC    R1,RFLDI                 LENGTH OF SYMBOL
         N     R1,=F'7'                 LENGTH OF SYMBOL
         LA    R1,BIT0(,R1)             ORGANIZATION
         STC   R1,ORGBYTE               ORGANIZATION
         AGO   .TEST05
.TEST04  ANOP
NOLN2    GOIF  DEFNAME,OFF=(R3)         RETURN IF NO NAME
.TEST05  ANOP
         SET   DEFNAME,OFF              INDICATE NO SYMBOL TABLE ENTRY
         ST    R15,RLCTR                VALUE
         MVC   RLNGQ,LATTR              LENGTH ATTRIBUTE
         LR    R10,R4                   PARAMETER
         GOTO  ENTER                    ENTER IN SYMBOL TABLE
         BNE   NOLN4                    ALREADY IN SYMBOL TABLE
         GOIF  LMOD,ON=NOLN3            SKIP IF LENGTH MODIFIER PRESENT
         CLI   SCADDR,XBCON-SCAD        SKIP B-, C-, P-, X-, AND Z-TYPE
         BHR   R3                       BRANCH IF HIGH
NOLN3    ST    R14,ADSYM                SAVE SYMBOL TABLE ENTRY ADDRESS
         SET   LNGDEF,ON                INDICATE LENGTH NOT DEFINED
         BR    R3                       RETURN
NOLN4    SET   PRIORDEF,ON              INDICATE PREVIOUSLY DEFINED
         BR    R3                       RETURN
         SPACE
NOCON    GOIF  DSCALL,OFF=DCABORT       CONSTANT SUBFIELD IS REQUIRED
         L     R4,CONLNG                INFERS ONE CONSTANT
         STH   R2,CONCT                 ONE CONSTANT ASSUMED
         LR    R11,R2                   ONE
         BAL   R9,AGAIN3                CATCHUP
         SPACE
ENDOPRN  CLI   CHAR1,JBLANK             SEE IF VALID DELIMITER
         BE    ENDOPRN1                 SKIP IF YES
         CLI   CHAR1,JCOMMA             SEE IF VALID DELIMITER
         BNE   DCABORT                  OH, OH
ENDOPRN1 LR    R15,R4                   LENGTH OF CONSTANT OR CONSTANTS
         L     R1,DUPFAC                DUPLICATION FACTOR
         MR    R14,R1                   TIMES LENGTH OF CONSTANT
         LTR   R14,R14                  TEST FOR OVERFLOW
         BNZ   DCABORT                  OVERFLOWED
         CL    R15,=FS3'16777215'       SEE IF TOO LONG
         BH    DCABORT                  TOO LONG
         AH    R15,BITADD               ADD RESIDUAL BITS
         D     R14,=F'8'                GET LENGTH IN BYTES
         GOIF  LTCALL,OFF=ENDOPRN2      SEE IF LITERAL
ENDOPRN9 LTR   R14,R14                  RESIDUAL
         LR    R14,R5                   RETURN COLUMN POINTER
         BE    EXIT                     FINIS IF NONE
         AR    R15,R2                   ANY OVER COUNTS AS ONE
         B     EXIT                     FINIS
ENDOPRN2 DS    0H                       PIVOT
         AIF   ('&TESTRAN' NE 'YES').TEST00
         TM    ETYPE,ETYPEXD            SEE IF DXD
         BO    TESTRAN                  SKIP IF SO
ENDOPRN8 STM   R9,R1,TERMS              SAVE REGISTERS
         CLI   DCALIGN,D1               SEE IF B, C, P, X, OR Z-TYPE
         BH    ENDOPRN3                 BRANCH IF NOT
         GOIF  LMOD,OFF=ENDOPRN5        SKIP IF EXPLICIT LENGTH
ENDOPRN3 MH    R1,CONCT                 TIMES NUMBER OF CONSTANTS
         L     R0,CONLNG                GET LENGTH
         AH    R0,BITADD                PLUS ANY RESIDUAL
         LR    R4,R0                    FAKE IT
ENDOPRN5 LR    R0,R4                    GET IT
         SR    R0,R2                    MINUS ONE
         SRL   R0,D3                    OVER EIGHT
         STM   R0,R1,LENGTH             LENGTH AND MULTIPLICITY
         CR    R1,R2                    SEE IF ONE
         BE    ENDOPRN4                 SKIP IF YES
         SET   MULTIPLE,ON              TURN MULTIPLE ON
ENDOPRN4 LA    R10,NAME                 OUTPUT POINTER
         LA    R11,NAME-D6              REFERENCE
         GOIF  LABEL,ON=TESTRAN1        SKIP IF NO NAME
         IC    R10,ORGBYTE              GET NAME LENGTH
         N     R10,=F'7'                ISOLATE LENGTH CODE
         LA    R10,NAME+D1(R10)         POINT PAST NAME
TESTRAN1 TR    DATATYPE,DATABLE         TRANSLATE DATA TYPE
         MVC   D0(D1,R10),DATATYPE      MOVE DATA TYPE
         MVC   D1(D1,R10),LENGTH+D3     LENGTH
         CLI   SCADDR,XBCON-SCAD        SEE IF X-, B-, OR C-TYPE
         BNE   TESTRAN2                 SKIP IF NOT
         MVC   D1(D2,R10),LENGTH+D2     LENGTH
         AR    R10,R2                   BUMP POINTER
TESTRAN2 GOIF  MULTIPLE,OFF=TESTRAN3    SEE IF MULTIPLICITY PRESENT
         MVC   D2(D3,R10),MULTIP+D1     MULTIPLICITY
         LA    R10,D3(,R10)             BUMP POINTER
TESTRAN3 GOIF  SCALING,OFF=TESTRAN4     SEE IF SCALED
         MVC   D2(D2,R10),SCALE         SCALE
         LA    R10,D2(,R10)             BUMP POINTER
TESTRAN4 SR    R10,R11                  GET LENGTH OF OUTPUT ITEM
         GOTO  SYMPUNCH                 GO TO OUTPUT ROUTINE
         LA    R9,TESTRAN7              ADDRESS OF NEXT ROUTINE
         GOIF  CLUSTER,OFF=(R9)         SEE IF SUB-CLUSTER
         BALR  R14,R7                   PUSH DOWN ONE LEVEL
         TS    SCADDR                   TOUGH SKIDDING
         L     R5,XPARM                 PICK UP COLUMN POINTER
         MVC   NAME(D1),DATATYPE        DATA TYPE
TESTRAN5 MVI   ORGBYTE,TDATA+CLUSTER    ORGANIZATION
         BAL   R3,PZCON                 SCAN SUB-CLUSTER
         LR    R3,R11                   LENGTH
         BCTR  R11,D0                   MINUS ONE
         STC   R11,NAME+D1              LENGTH
         LA    R10,D6                   LENGTH OF TESTRAN ITEM
         LCR   R0,R0                    SEE IF SCALE
         BNP   TESTRAN6                 NO
         LA    R10,D8                   LENGTH OF ITEM WITH SCALE
         STH   R0,NAME+D2               SCALE MODIFIER
         SET   SCALING,ON               INDICATE SCALE
TESTRAN6 GOTO  SYMPUNCH                 OUTPUT TESTRAN ITEM
         CLI   CHAR1,JQUOTE             SEE IF ALL DONE
         BE    EXIT                     FINIS
         AR    R5,R2                    BUMP COLUMN POINTER
         AL    R3,ORGBYTE               NEXT ADDRESS
         ST    R3,ORGBYTE               NEXT ADDRESS
         B     TESTRAN5                 GO AGAIN
TESTRAN7 LM    R9,R1,TERMS              RESTORE REGISTERS
.TEST00  ANOP
TESTRAN  STH   R14,BITADD               RESIDUAL TO NEXT BYTE
         LH    R0,OPCNT                 GET COUNT OF OPERANDS
         LTR   R0,R0                    SEE IF FIRST OPERAND
         BNE   ENDOPRN7                 NOPE
         MVC   LATTRSAV,LATTR           LENGTH ATTRIBUTE
ENDOPRN7 AR    R0,R2                    COUNT OPERANDS
         STH   R0,OPCNT                 AND SAVE
         AL    R15,ELCTR                UPDATE LOCATION COUNTER
         ST    R15,ELCTR                SAVE
         CLI   CHAR1,JBLANK             SEE IF END
         BNE   ENDOPRN6                 SKIP IF NOT
         BAL   R1,ADDBIT1               TACK ON ANY RESIDUAL
         ST    R15,ELCTR                SAVE
         B     EXIT                     FINIS
ENDOPRN6 AR    R5,R2                    BUMP COLUMN POINTER
         XC    DCWORK,DCWORK            REINITIALIZE WORK AREA
         B     NEWOPRN                  FULL SPEED AHEAD
         SPACE
AGAIN    SLL   R11,D3                   MULTIPLY BY EIGHT
AGAIN1   ST    R11,CONLNG               LENGTH OF ONE CONSTANT
         LA    R11,D7(,R11)             ROUND
         SRL   R11,D3                   LENGTH ATTRIBUTE IN BYTES
         CH    R2,LATTR                 SEE IF LENGTH ATTRIBUTE SET
         BNHR  R9                       RETURN IF ALREADY SET
         STH   R11,LATTR                SET LENGTH ATTRIBUTE
AGAIN3   L     R14,ADSYM                POINTS TO SYMBOL TABLE ENTRY
         LTR   R14,R14                  SEE IF LENGTH ATTRIBUTE DEFINED
         BZ    AGAIN2                   NO
         STH   R11,SLNGQ                LENGTH ATTRIBUTE
         SET   LNGDEF,OFF               LENGTH ATTRIBUTE DEFINED
         SR    R14,R14                  ZERO REGISTER
         ST    R14,ADSYM                INDICATE COMPLETE
AGAIN2   BALR  R14,R7                   PUSH DOWN A LEVEL
         L     R5,ADUPFAC               GET ADDRESS OF EXPRESSION
         LTR   R5,R5                    SEE IF AVAILABLE
         BZ    EXIT                     NONE
         LR    R4,R11                   SAVE
         SET   SUBLIST,ON               EVALUATE WHAT'S INSIDE PARENS
         BAL   R3,EXPR3                 EVALUATE EXPRESSION
         BAL   R3,SETUP                 APPRAISE VALUE
         LR    R11,R4                   RESTORE
         B     EXIT                     RETURN
         SPACE
EXPR     MVI   SELFDEFN,D0              SELF DEFINING TERM
EXPR1    SET   SUBLIST,ON               INDICATE MODE OF SCAN
EXPR2    SET   DCOP,ON                  INDICATE IN DC
EXPR3    GOTO  EVAL                     GO EVALUATE
         BO    DCABORT                  SYNTACTIC ERRORS
         LR    R5,R14                   UPDATE COLUMN POINTER
         BR    R3                       RETURN
         SPACE
SETUP    BNE   DCABORT                  INVALID DUPLICATION FACTOR
         ST    R11,DUPFAC               MODIFY DUPLICATION FACTOR
         LTR   R11,R11                  TEST CHARACTERISTIC
         BCR   D2,R3                    RETURN IF POSITIVE
         BM    DCABORT                  INTOLERABLE
         SET   NOESDS,ON                INDICATE NO ESD
         BR    R3                       RETURN
         SPACE
ADDBIT   L     R15,ELCTR                GET CURRENT LOCATION COUNTER
ADDBIT1  CLI   BITADD+D1,D0             SEE IF RESIDUAL LEFT OVER
         BCR   D8,R1                    LEAVE IF NONE
         AR    R15,R2                   BUMP BY ONE
         MVI   BITADD+D1,D0             ZERO COUNT
         BR    R1                       RETURN
         SPACE
MODS     BCR   D7,R3                    RETURN IF OMITTED
         GOIF  ESMOD,OFF=DCABORT        ERROR IF NOT ALLOWED
         AR    R5,R2                    BUMP COLUMN POINTER
         CLI   CHAR1,JMINUS             SEE IF MINUS SIGN
         BE    MODS1                    BYPASS
         CLI   CHAR1,JPLUS              SEE IF PLUS SIGN
         BNE   MODS2                    SKIP IF NOT
MODS1    AR    R5,R2                    BUMP COLUMN POINTER
MODS2    CLI   CHAR1,J9                 SEE IF SELF-DEFINING VALUE
         BNH   EXPR                     EVALUATE
         CLI   CHAR1,JLPARN             SEE IF LEFT PARENTHESIS
         BE    EXPR1                    EVALUATE
         B     DCABORT                  ERROR
         SPACE
DCABORT  SR    R15,R15                  INDICATE ERROR
         MVC   JCLVLPTR,LEVELPTR        RESTORE STACK LEVEL POINTER
         BZ    EXIT                     RETURN
         EJECT
PZEND    LCR   R11,R11                  SEE IF NULL CONSTANT
         BNP   DCABORT                  ERROR IF NULL CONSTANT
         GOIF  TYPEZ,ON=PZEND1          SKIP IF ZONED TYPE
         LA    R11,D2(,R11)             COMPUTE LENGTH FOR PACKED TYPE
         SRL   R11,D1                   COMPUTE LENGTH FOR PACKED TYPE
PZEND1   CH    R11,=H'16'               CHECK LENGTH OF CONSTANT
         BH    DCABORT                  ERROR IF MORE THAN 16 BYTES
         AIF   ('&TESTRAN' NE 'YES').TEST09
         CLI   SCADDR,PZCON-SCAD        SEE IF CLUSTER SCAN
         BNER  R3                       SUB CLUSTER
         GOIF  SMOD,ON=PZEND2           SEE IF SCALE SET
         SET   SMOD,ON                  INDICATE SCALE SET
         LCR   R0,R0                    TEST FOR SCALE
         BNP   PZEND2                   NO SCALE
         STH   R0,SCALE                 SAVE SCALE
         SET   SCALING,ON               SCALE INDICATOR IN ORG BYTE
.TEST09  ANOP
PZEND2   BAL   R3,SCANDEL               END OF ONE CONSTANT
         AIF   ('&TESTRAN' NE 'YES').TEST08
         GOIF  LMOD,ON=PZCON            SEE IF EXPLICIT LENGTH
         SET   (MULTIPLE,CLUSTER),ON    INDICATE CLUSTER ITEM
         SET   SCALING,OFF              DEFER SCALE
.TEST08  ANOP
PZCON    MVI   PERIOD,D0                ALLOW ONE PERIOD
         AIF   ('&TESTRAN' NE 'YES').TEST10
         SR    R1,R1                    ZERO
         LR    R0,R2                    ONE
.TEST10  LR    R11,R2                   INITIALIZE DIGIT COUNT
         CLI   CHAR1,JMINUS             CHECK FOR OPTIONAL MINUS SIGN
         BE    PZCON1                   STEP PAST IF PRESENT
         CLI   CHAR1,JPLUS              CHECK FOR OPTIONAL PLUS SIGN
         BNE   PZCON2                   SKIP IF NOT PRESENT
PZCON1   AR    R5,R2                    ADVANCE COLUMN POINTER
PZCON2   SR    R11,R2                   KEEP COUNT OF DIGITS
         AIF   ('&TESTRAN' NE 'YES').TEST11
         SR    R0,R1                    COUNT SCALE
.TEST11  CLI   CHAR1,J9                 SEE IF VALID DECIMAL DIGIT
         BNH   PZCON1                   LOOP IF YES
         CLI   CHAR1,JPERIOD            CHECK FOR DECIMAL POINT
         BNE   PZEND                    END-OF-CONSTANT ENCOUNTERED
         AR    R11,R2                   PERIODS DO NOT COUNT
         TS    PERIOD                   SEE IF PERIOD ALLOWED
         AIF   ('&TESTRAN' NE 'YES').TEST12
         LR    R1,R2                    BUMPER
.TEST12  BZ    PZCON1                   ALLOW
         B     DCABORT                  MORE THAN ONE SPELLS ERROR
         SPACE
XBEND    SRA   R11,D3                   GET COUNT IN BYTES
         LCR   R11,R11                  GET ABSOLUTE COUNT
         BNP   DCABORT                  NULL CONSTANT
         BAL   R3,SCANDEL               TEST FOR END-OF-OPERAND
XBCON    L     R3,OPNEND                POINT TO END OF OPERAND
         SR    R11,R11                  INITIALIZE ACCUMULATOR
XBCON1   CLC   CHAR1,HILIMIT            TEST FOR VALID DIGIT
         BH    XBEND                    MAY BE END OF CONSTANT
         CLI   CHAR1,JQUOTE             SEE IF A QUOTE
         BNE   TSTAM                    SKIP IF NOT
         CLI   CHAR2,JQUOTE             SEE IF PAIRED QUOTES
         BNE   XBEND                    END-OF-CONSTANT ENCOUNTERED
         B     TSTAM1                   PAIRED QUOTES
         SPACE
ADEND    BAL   R3,SCANDEL1              TEST FOR END-OF-OPERAND
ADCON    MVC   SUBFIELD,DCSWTCH         SUBFIELD ALLOWED/DISALLOWED
ADCON1   BAL   R3,EXPR2                 SCAN EXPRESSION
         CLI   CHAR1,JLPARN             SUBFIELD ENCOUNTERED
         BNE   ADEND                    SKIP IF NO SUBFIELD
         TS    SUBFIELD                 SUBFIELD ALLOWED HERE
         BZ    EXPR1                    SCAN EXPRESSION
         B     DCABORT                  ERROR IF SUBFIELD NOT ALLOWED
         EJECT
QQEND    GOIF  (NOESD,NOESDS),ANY=QQEND1     SKIP IF ESD NOT OPTIONED
         GOTO  QCON                     GO CREATE ESD ENTRY
QQEND1   BAL   R3,SCANDEL1              END OF CONSTANT PROCESSING
QQCON    BAL   R3,SYMSCAN               SCAN SYMBOL
         B     QQEND                    LOOP
         SPACE
VVEND    GOIF  (NOESD,NOESDS),ANY=VVEND1     SKIP IF NO ESD
         GOTO  VCON                     GO MAKE ESD ENTRY
VVEND1   BAL   R3,SCANDEL1              END OF CONSTANT PROCESSING
VVCON    BAL   R3,SYMSCAN               SCAN FOR SYMBOL
         LH    R14,SYMCOUNT             COUNT OF SYMBOLS
         BCTR  R14,R0                   MINUS ONE
         SRDL  R14,D3                   GET BYTE
         SRL   R15,D29                  AND BIT
         LA    R1,BIT0                  GET BIT MASK
         SRL   R1,D0(R15)               SET UP BIT MASK
         LA    R15,VEETABLE(R14)        POINT TO ARRAY
         EX    R1,VVCON1                INDICATE V-CON
         B     VVEND                    SKIP
VVCON1   OI    D0(R15),D0               EXECUTED INSTRUCTION
         SPACE
FDEND    BAL   R3,SCANDEL1              TEST FOR END-OF-OPERAND
FDCON    STH   R2,PERIOD                ALLOW PERIOD AND EXPONENT
FDCON1   LR    R11,R2                   INITIALIZE DIGIT COUNT
         CLI   CHAR1,JMINUS             SEE IF MINUS SIGN
         BE    FDCON2                   BUMP COLUMN POINTER IF YES
         CLI   CHAR1,JPLUS              SEE IF PLUS SIGN
         BNE   FDCON3                   SKIP IF NOT
FDCON2   AR    R5,R2                    ADVANCE COLUMN POINTER
FDCON3   SR    R11,R2                   COUNT DECIMAL DIGITS
         CLI   CHAR1,JA                 SEE IF DECIMAL DIGIT
         BL    FDCON2                   LOOP FOR DECIMAL DIGITS
         CLI   CHAR1,JPERIOD            SEE IF PERIOD
         BNE   FDCON4                   SKIP IF NOT
         AR    R11,R2                   RESET COUNT
         TS    PERIOD                   PERIOD ALLOWED
         BZ    FDCON2                   GO IF PERIOD ALLOWED
         B     DCABORT                  ERROR IF PERIOD NOT ALLOWED
FDCON4   LTR   R11,R11                  SEE IF ANY VALID DECIMAL DIGITS
         BNM   DCABORT                  ERROR IF NO DIGITS
         CLI   CHAR1,JE                 SEE IF EXPONENT SPECIFIED
         BNE   FDEND                    SKIP IF NO EXPONENT SPECIFIED
         AR    R5,R2                    POINT PAST DELIMITER
         TS    PERIOD                   INDICATE PERIOD NOT ALLOWED
         TS    EXPONENT                 SEE IF EXPONENT ALLOWED
         BZ    FDCON1                   SCAN EXPONENT FIELD
         B     DCABORT                  ERROR IF MORE THAN ONE EXPONENT
         SPACE
TSTAM    CLI   CHAR1,JAMPER             SEE IF AN AMPERSAND
         BNE   TSTAM2                   SKIP IF NOT
         CLI   CHAR2,JAMPER             SEE IF PAIRED AMPERSANDS
         BNE   DCABORT                  ERROR IF AMPERSANDS NOT PAIRED
TSTAM1   AR    R5,R2                    ADVANCE COLUMN POINTER
TSTAM2   SH    R11,BITINCR              COUNT BITS IN ACCUMULATOR
         BXLE  R5,R2,XBCON1             REPEAT PROCEDURE
         B     DCABORT                  SYNTAX ERROR IF NO DELIMITER
         SPACE
SCANDEL  GOIF  LMOD,ON=SCANDEL1         SKIP IF EXPLICIT LENGTH
         TM    DCALIGN,BIT7             SEE IF B-, C-, P-, X-, Z-TYPE
         BZ    SCANDEL0                 SKIP IF NOT
         XI    DCALIGN,BIT7             ALLOW ONCE ONLY
         MVI   LATTR+D1,D0              ALLOW
SCANDEL0 BAL   R9,AGAIN                 SET LENGTH ATTRIBUTE
SCANDEL1 AL    R4,CONLNG                ACCUMULATE LENGTH OF CONSTANT
         LR    R14,R5                   SAVE COLUMN POINTER
         AR    R5,R2                    ADVANCE COLUMN POINTER
         AIF   ('&TESTRAN' NE 'YES').TEST06
         LH    R0,CONCT                 COUNT NUMBER OF CONSTANTS
         AR    R0,R2                    COUNT
         STH   R0,CONCT                 SAVE
.TEST06  ANOP
         CLC   CHAR1-CHAR1(,R14),RTDEL  SEE IF VALID DELIMITER
         BE    ENDOPRN                  END-OF-OPERAND ENCOUNTERED
         CLI   CHAR1-CHAR1(R14),JCOMMA  CHECK FOR MULTIPLE CONSTANTS
         BCR   D8,R3                    REPEAT FOR MULTIPLE CONSTANTS
         B     DCABORT                  INVALID DELIMITER
         SPACE
SYMSCAN  CLI   CHAR1,JAT                SEE IF VALID CHARACTER
         BH    DCABORT                  INVALID CHARACTER
         CLI   CHAR1,JA                 SEE IF VALID CHARACTER
         BL    DCABORT                  INVALID CHARACTER
         LR    R14,R5                   SAVE SYMBOL POINTER
SYMSCAN1 AR    R5,R2                    LOOK AT NEXT CHARACTER
         CLI   CHAR1,JEQUAL             SEE IF DELIMITER
         BL    SYMSCAN1                 LOOP FOR DELIMITER
         CLI   CHAR1,JRPARN             TEST FOR VALID DELIMITER
         BE    SYMSCAN2                 VALID DELIMITER
         CLI   CHAR1,JCOMMA             TEST FOR ALTERNATE DELIMITER
         BNE   DCABORT                  INVALID DELIMITER
SYMSCAN2 LR    R15,R5                   SAVE POINTER
         SR    R15,R14                  GET LENGTH OF SYMBOL
         CH    R15,=H'8'                SEE IF NOT TOO LONG
         BH    DCABORT                  SYMBOL TOO LONG
         SR    R15,R2                   GET MACHINE LENGTH
         MVC   XNAME,=8AL1(JBLANK)      PAD WITH BLANKS
         EX    R15,MOVENAME             ISOLATE NAME
         LH    R14,SYMCOUNT             GET SYMBOL COUNT
         AR    R14,R2                   INCREMENT BY ONE
         STH   R14,SYMCOUNT             PASS
         GOIF  LTORGSCN,OFF=(R3)        RETURN IF THROUGH
         GOIF  MODE2,ON=(R3)            CHECK MODE
         CLI   SCADDR,VVCON-SCAD        SEE IF V-TYPE ADDRESS CONSTANT
         BNE   SYMSCAN3                 NEAH
         OI    XNAME,BIT0               PERMUTE NAME TO INTERNAL FORM
SYMSCAN3 GOTO  REFER                    PUT OUT RECORD
         BR    R3                       RETURN
         SPACE
MOVENAME MVC   XNAME(0),CHAR1-CHAR1(R14)     EXECUTED INSTRUCTION
         SPACE
DCTYPES  EQU   *-1                      SWITCH CODE FOR DATA TYPES    X
ACON     DC    AL1(B'10000000',JLPARN,JRPARN,ADCON-SCAD,4,1),HL2'32'  X
BCON     DC    AL1(B'10000000',JQUOTE,JQUOTE,XBCON-SCAD,1,1),HL2'2048,1'
               ',AL1(J1)                                              X
CCON     DC    AL1(B'10000000',JQUOTE,JQUOTE,XBCON-SCAD,1,1),HL2'2048,8'
               ',AL1(X'FF')                                           X
DCON     DC    AL1(B'11000000',JQUOTE,JQUOTE,FDCON-SCAD,8,1),HL2'64'  X
ECON     DC    AL1(B'11000000',JQUOTE,JQUOTE,FDCON-SCAD,4,1),HL2'64'  X
HCON     DC    AL1(B'11000000',JQUOTE,JQUOTE,FDCON-SCAD,2,1),HL2'64'  X
LCON     DC    AL1(B'11100000',JQUOTE,JQUOTE,FDCON-SCAD,8,1),HL2'128' X
PCON     DC    AL1(B'10000000',JQUOTE,JQUOTE,PZCON-SCAD,1,1),HL2'128' X
QCON     DC    AL1(B'00000000',JLPARN,JRPARN,QQCON-SCAD,4,8),HL2'32'  X
SCON     DC    AL1(B'00000000',JLPARN,JRPARN,ADCON-SCAD,2,16),HL2'16' X
VCON     DC    AL1(B'00010000',JLPARN,JRPARN,VVCON-SCAD,4,24),HL2'32' X
XCON     DC    AL1(B'10000000',JQUOTE,JQUOTE,XBCON-SCAD,1,1),HL2'2048,4'
               ',AL1(JF)                                              X
YCON     DC    AL1(B'10000000',JLPARN,JRPARN,ADCON-SCAD,2,1),HL2'16'  X
ZCON     DC    AL1(B'10001000',JQUOTE,JQUOTE,PZCON-SCAD,1,1),HL2'128' X
         SPACE
DCTABLE  EQU   *                        DATA TYPE TABLE
         DC    10YL1(ILLEGAL-DCTYPES)   0-9 INVALID DC/DS TYPES
         DC    YL1(ACON-DCTYPES)        A-TYPE ADDRESS
         DC    YL1(BCON-DCTYPES)        BINARY
         DC    YL1(CCON-DCTYPES)        CHARACTER
         DC    YL1(DCON-DCTYPES)        DOUBLE PRECISION FLOATING POINT
         DC    YL1(ECON-DCTYPES)        SINGLE PRECISION FLOATING POINT
         DC    YL1(FCON-DCTYPES)        FULLWORD FIXED POINT
         DC    YL1(GCON-DCTYPES)        G-ILLEGAL DC/DS TYPE
         DC    YL1(HCON-DCTYPES)        HALFWORD FIXED POINT
         DC    YL1(ICON-DCTYPES)        I-ILLEGAL DC/DS TYPE
         DC    YL1(JCON-DCTYPES)        J-ILLEGAL DC/DS TYPE
         DC    YL1(KCON-DCTYPES)        K-ILLEGAL DC/DS TYPE
         DC    YL1(LCON-DCTYPES)        EXTRA LONG PRECISION FLT POINT
         DC    YL1(MCON-DCTYPES)        M-ILLEGAL DC/DS TYPE
         DC    YL1(NCON-DCTYPES)        N-ILLEGAL DC/DS TYPE
         DC    YL1(OCON-DCTYPES)        O-ILLEGAL DC/DS TYPE
         DC    YL1(PCON-DCTYPES)        PACKED DECIMAL
         DC    YL1(QCON-DCTYPES)        Q-TYPE ADDRESS
         DC    YL1(RCON-DCTYPES)        R-ILLEGAL DC/DS TYPE
         DC    YL1(SCON-DCTYPES)        S-TYPE ADDRESS
         DC    YL1(TCON-DCTYPES)        T-ILLEGAL DC/DS TYPE
         DC    YL1(UCON-DCTYPES)        U-ILLEGAL DC/DS TYPE
         DC    YL1(VCON-DCTYPES)        V-TYPE ADDRESS
         DC    YL1(WCON-DCTYPES)        W-INVALID DC/DS TYPE
         DC    YL1(XCON-DCTYPES)        HEXADECIMAL
         DC    YL1(YCON-DCTYPES)        Y-TYPE ADDRESS
         DC    YL1(ZCON-DCTYPES)        ZONED DECIMAL
         SPACE
SCAD     EQU   PZCON                    PIVOT
FCON     EQU   ECON                     SAME AS E-TYPE
ILLEGAL  EQU   DCTYPES                  ILLEGAL DC/DS TYPE
GCON     EQU   ILLEGAL                  ILLEGAL DC/DS TYPE
ICON     EQU   ILLEGAL                  ILLEGAL DC/DS TYPE
JCON     EQU   ILLEGAL                  ILLEGAL DC/DS TYPE
KCON     EQU   ILLEGAL                  ILLEGAL DC/DS TYPE
MCON     EQU   ILLEGAL                  ILLEGAL DC/DS TYPE
NCON     EQU   ILLEGAL                  ILLEGAL DC/DS TYPE
OCON     EQU   ILLEGAL                  ILLEGAL DC/DS TYPE
RCON     EQU   ILLEGAL                  ILLEGAL DC/DS TYPE
TCON     EQU   ILLEGAL                  ILLEGAL DC/DS TYPE
UCON     EQU   ILLEGAL                  ILLEGAL DC/DS TYPE
WCON     EQU   ILLEGAL                  ILLEGAL DC/DS TYPE
         SPACE
XDSCAN   BALR  R14,R7                   SAVE REGISTERS IN STACK
         LR    R6,R10                   FAKE CURRENT CONTROL SECTION
         MVC   RESDI(D6),EESDI          PASS ESDID
         MVI   TYPECALL,DSCALL+DXDALIGN+NOESD     PARAMETERS
         BALR  R9,R12                   SCAN OPERAND
         B     EXIT                     RETURN
         AIF   ('&TESTRAN' NE 'YES').MEND
         SPACE
SYMPUNCH BALR  R14,R7                   SAVE REGISTERS
         LR    R8,R12                   SET UP BASE REGISTER
         LR    R2,R10                   LENGTH PARAMETER
         LA    R3,ORGBYTE               LOAD ADDRESS OF ORGBYTE INTO R3
         LM    R10,R12,SYMCARD          GET ADDRESS OF CARD BUFFER
         LTR   R12,R12                  SEE IF ROOM LEFT ON CARD
         BZ    GETCARD                  NO MORE ROOM
         CR    R12,R2                   SEE IF ENOUGH ROOM
         BNL   SYMOVE                   ENOUGH, MOVE IT
         SR    R2,R12                   DO WHAT WE CAN
         BCTR  R12,D0                   MOVE LENGTH
         EX    R12,SYMOVA               MOVE IT IN
         LA    R3,D1(R3,R12)            POINT TO THE STUFF NOT MOVED
         MVI   D11(R11),D2*D28          LENGTH OF TESTRAN DATA
GETCARD  JPUNCH  SEQ=YES                GET A BUFFER
         MVC   D0(D4,R11),=AL1(X'02',JS,JY,JM)    'SYM' CARD IDENTIFIER
         TR    D1(71,R11),JTRTABLE      TRANSLATE TO EXTERNAL FORMAT
         MVI   D10(R11),D0              INITIALIZE DATA LENGTH
         LA    R12,D28*D2               LENGTH OF TESTRAN DATA ALLOWED
         LR    R10,R11                  ADDRESS OF FIRST BYTE OF DATA
SYMOVE   SR    R12,R2                   USING UP THIS MUCH
         BCTR  R2,D0                    MACHINE LENGTH
         EX    R2,SYMOVA                MOVE IT
         LA    R10,D1(R10,R2)           POINT TO NEXT AVAILABLE COLUMN
         STM   R10,R12,SYMCARD          SAVE THE GARBAGE
         SLR   R10,R11                  GET DATA LENGTH
         STC   R10,D11(,R11)            INDICATE DATA LENGTH ON CARD
         B     EXIT                     BUG OUT
SYMOVA   MVC   D16(D0,R10),D0(R3)       EXECUTED INSTRUCTION
         SPACE
DATABLE  EQU   *-D10                    TESTRAN DATA TYPE TABLE
         DC    AL1(DTYPEA)              A-TYPE
         DC    AL1(DTYPEB)              B-TYPE
         DC    AL1(DTYPEC)              C-TYPE
         DC    AL1(DTYPED)              D-TYPE
         DC    AL1(DTYPEE)              E-TYPE
         DC    AL1(DTYPEF)              F-TYPE
         DC    AL1(0)                   INVALID
         DC    AL1(DTYPEH)              H-TYPE
         DC    AL3(0)                   INVALID
         DC    AL1(DTYPEL)              L-TYPE
         DC    AL3(0)                   INVALID
         DC    AL1(DTYPEP)              P-TYPE
         DC    AL1(DTYPEQ)              Q-TYPE
         DC    AL1(0)                   INVALID
         DC    AL1(DTYPES)              S-TYPE
         DC    AL2(0)                   INVALID
         DC    AL1(DTYPEV)              V-TYPE
         DC    AL1(0)                   INVALID
         DC    AL1(DTYPEX)              X-TYPE
         DC    AL1(DTYPEY)              Y-TYPE
         DC    AL1(DTYPEZ)              Z-TYPE
.MEND    MEND
