 @EJECT;
 /*****START OF SPECIFICATIONS ***************************************/
 /*                                                                  */
 /* MODULE-NAME = SMFADEXP                                   @ZA51560*/
 /*                                                                  */
 /* DESCRIPTIVE-NAME = ADD AN EXCP ENTRY TO TYPE 30 RECORD           */
 /*                                                                  */
 /* FUNCTION = ADD AN EXCP SECTION TO A TYPE 30 SMF RECORD           */
 /*                                                                  */
 /* OPERATION:                                                       */
 /*       THIS MODULE IS CALLED TO ADD AN EXCP ENTRY TO A            */
 /*       TYPE 30 RECORD. IT IS USED AT DYNAMIC ALLOCATION TIME      */
 /*       TO COPY ENTRIES FROM THE TCTTIOT. IT IS USED AT            */
 /*       JOB AND STEP TERMINATION TO COPY ENTRIES FROM THE          */
 /*       TCTIOT AND FROM ONE TYPE 30 RECORD TO ANOTHER.             */
 /*       FOR EXAMPLE, IT MOVES AN ENTRY FROM THE STEP TOTAL         */
 /*       RECORD TO THE JOB TOTAL RECORD                             */
 /*                                                                  */
 /*       THE INPUT RECORD IS SEARCHED TO FIND AN ENTRY              */
 /*       WHICH MATCHES THE INPUT EXCP ENTRY.                        */
 /*       IF THE ENTRY IS FOUND, THE EXCP COUNT IN THE               */
 /*          INPUT IS ADDED TO THE ENTRY IN THE RECORD.              */
 /*       IF THE ENTRY IS NOT FOUND, IT MUST BE ADDED TO             */
 /*          THE RECORD.                                             */
 /*          IF THE RECORD IS ALREADY 32K BYTES LONG,                */
 /*             A NEW RECORD IS OBTAINED AND CHAINED TO              */
 /*             THE OLD RECORD. THE ENTRY WILL BE ADDED TO           */
 /*             THE NEW RECORD.                                      */
 /*          IF THE RECORD IS LESS THAN 32K, A NEW AREA              */
 /*             IS OBTAINED WHICH IS 50% LARGER THAN THE             */
 /*             OLD RECORD UP TO A MAXIMUM OF 32K. THE               */
 /*             OLD RECORD IS COPIED TO THE NEW RECORD AREA,         */
 /*             AND THE OLD RECORD IS FREED.                         */
 /*          IF A RECORD AREA IS AVAILABLE, THE ENTRY IS             */
 /*             INSERTED INTO IT. THE LENGTH OF THE RECORD           */
 /*             AND THE NUMBER OF ENTRIES IS UPDATED.                */
 /*          IF THE RECORD AREA IS NOT AVAILABLE, WHICH WILL         */
 /*             HAPPEN IF NO SPACE IS AVAILABLE, A FLAG IS           */
 /*             SET IN THE TCT WHICH INDICATES THAT THE              */
 /*             EXCP COUNTS MAY BE WRONG.                            */
 /*                                                                  */
 /* NOTES = SEE BELOW                                                */
 /*                                                                  */
 /*   DEPENDENCIES = NONE                                            */
 /*                                                                  */
 /*   RESTRICTIONS = NONE                                            */
 /*                                                                  */
 /*   REGISTER-CONVENTIONS = NONE                                    */
 /*                                                                  */
 /*   PATCH-LABEL = SAME AS MAINLINE                                 */
 /*                                                                  */
 /* MODULE-TYPE = CODE                                               */
 /*                                                                  */
 /*   PROCESSOR = PL/S COMPILER, ASSEMBLER XF                        */
 /*                                                                  */
 /*   MODULE SIZE = SEE ASSEMBLER LISTING                            */
 /*                                                                  */
 /*   ATTRIBUTES = REENTRANT                                         */
 /*                                                                  */
 /* ENTRY-POINT = SMFADEXP                                           */
 /*                                                                  */
 /*   PURPOSE = SEE FUNCTION                                         */
 /*                                                                  */
 /*   LINKAGE = CALL SMFADEXP(PARM1,PARM2)                           */
 /*             PARM1 = EXCP ENTRY                                   */
 /*             PARM2 = ADDRESS OF TYPE 30 RECORD HEADER             */
 /*                                                                  */
 /* INPUT = EXCP ENTRY TO BE ADDED                                   */
 /*         ADDRESS OF RECORD TO ADD IT TO                           */
 /*                                                                  */
 /* OUTPUT = UPDATED RECORD                                          */
 /*          UPDATED RECORD ADDRESS IF NEW AREA WAS OBTAINED         */
 /*                                                                  */
 /* EXIT-NORMAL = RETURN TO CALLER                                   */
 /*               CONDITION: ENTRY ADDED TO RECORD                   */
 /*                                                                  */
 /* EXIT-ERROR = RETURN TO CALLER                                    */
 /*               CONDITION: NO SPACE IN RECORD FOR ENTRY AND        */
 /*                          NO MORE SPACE AVAILABLE. TCTIEX         */
 /*                          FLAG SET.                               */
 /*                                                                  */
 /* EXTERNAL REFERENCES =  SEE BELOW                                 */
 /*                                                                  */
 /*   ROUTINES = NONE                                                */
 /*                                                                  */
 /*   DATA-AREAS = NONE                                              */
 /*                                                                  */
 /*   CONTROL BLOCKS =  TCT                                          */
 /*                     TCB                                          */
 /*                                                                  */
 /*   TABLES = NONE                                                  */
 /*                                                                  */
 /* MACROS = GETMAIN, FREEMAIN                                       */
 /*                                                                  */
 /* CHANGE-ACTIVITY = SEE BELOW                                      */
 /*                                                                  */
 /* A000000  - 999999                                        @G742PJW*/
 /* C CLEAR CORRECT LENGTH OF RECORD                         @ZA40809*/
 /* C GET RECORD STORAGE FROM SP 230 NOT LSQA                @ZA44071*/
 /* C CHECK FOR NON-ZERO BLOCK SIZE BEFORE MOVING SMF30BSZ   @ZA51560*/
 /*                                                                  */
 /*** END OF SPECIFICATIONS*******************************************/
 @EJECT;
 SMFADEXP:PROC(EXCPNTRY,RECADDR);
 /********************************************************************/
 /*                                                                  */
 /*       VARIABLES AND PARAMETERS                                   */
 /*                                                                  */
 /********************************************************************/
 DCL 1 ADEXPSW,                    /* SWITCHES                       */
        2 FOUNDSW BIT(1),          /* EXCP ENTRY FOUND               */
        2 OKSW BIT(1),             /* STORAGE FOUND                  */
     RECADDR PTR(31);              /*                                */
 DCL EXCPNTRY CHAR(*),             /* EXCP ENTRY TO BE ADDED         */
     EXPTR PTR(31),                /* POINTER TO EXCP ENTRY          */
     RPTR  PTR(31),                /* POINTER TO TYPE 30 RECORD      */
     ROLDPTR PTR(31),              /* POINTER TO A PREVIOUS RECORD   */
     RVOLDPTR PTR(31),             /* PTR TO PREVIOUS PREVIOUS RCD   */
     RECPTR  PTR(31),              /* PLACE HOLDER PTR               */
     ADD30PTR PTR(31),             /* PTR TO SMF TYPE 30 RECORD      */
     TPTR    PTR(31),              /* POINTER TO INPUT EXCP ENTRY    */
     IADEXP FIXED(31),             /* LOOP COUNTER                   */
     N1 FIXED(31);                 /* COUNTER                         */
 @EJECT;
 /********************************************************************/
 /*                                                                  */
 /*   DETERMINE IF ENTRY IS ALREADY IN RECORD. IF SO, ADD THE        */
 /*   EXCP COUNTS.                                                   */
 /*                                                                  */
 /********************************************************************/
 RFY T30AREA BASED(RPTR);
 FOUNDSW = '0'B;
 RPTR = RECADDR;                   /* POINT TO HEADER PORTION        */
 ROLDPTR = RPTR;                   /* SAVE POINTER TO RECORD         */
 TPTR = ADDR(EXCPNTRY);            /*                                 */
 RFY SMFRCD30 BASED(ADD30PTR);      /*                      @G743PJW*/
 DO WHILE(RPTR ^= 0 & FOUNDSW = '0'B); /* GO THRU EACH RECORD        */
 ADD30PTR=RPTR + LENGTH(T30LDR); /* POINT TO RECORD PORTION         */
 EXPTR=ADD30PTR+SMF30EOF;          /* POINT TO FIRST EXCP ENTRY      */
 RFY SMF30EXP BASED(EXPTR);        /* POINT TO EXCP ENTRY IN RECORD   */
 N1=SMF30EON;                      /* GET NUMBER OF ENTRIES IN RECORD*/
 DO IADEXP=1 TO N1 WHILE (FOUNDSW='0'B); /* LOOK FOR EQUAL ENTRIES   */
   IF SMF30KEY=TPTR -> SMF30KEY THEN /* IF KEY IN RECORD = INPUT KEY */
     DO;                           /*                                */
       SMF30BLK = SMF30BLK +       /* ADD COUNTS                     */
                TPTR -> SMF30BLK;  /*                                 */
       IF TPTR -> SMF30BSZ ^= 0 THEN /* IF BLOCK SIZE IS NOT @ZA51560*/
         SMF30BSZ = TPTR -> SMF30BSZ;  /* ZERO THEN MOVE IT  @ZA51560*/
       FOUNDSW='1'B;               /* DROP OUT OF LOOP               */
     END;                          /*                                */
   EXPTR=EXPTR+ LENGTH(SMF30EXP);/* MOVE TO NEXT ENTRY               */
  END;                             /*                                */
 RVOLDPTR = ROLDPTR;               /* SAVE PTR TO PREVIOUS RECORD    */
 ROLDPTR = RPTR;                   /* SAVE POINTER TO CURRENT RECORD */
 RPTR = T30NXT;                    /* MOVE TO NEXT RECORD            */
 END;                              /* END OF RECORD LOOP;            */
 RPTR = ROLDPTR;                   /* MOVE BACK TO RECORD TO ADD TO  */
 ADD30PTR = RPTR + LENGTH(T30LDR); /* POINT TO RECORD AREA           */
 /********************************************************************/
 /*                                                                  */
 /*   ADD THE ENTRY TO THE RECORD IF IT WASNT THERE:                 */
 /*   IF THE NEW ENTRY WON'T FIT INTO THE RECORD,                    */
 /*       IF THE RECORD IS ALREADY 32K,                              */
 /*           GET A NEW AREA. CHAIN THE OLD RECORD TO THE NEW        */
 /*       OTHERWISE,                                                 */
 /*          -GET A NEW AREA 50% LARGER THAN THE OLD, UP TO 32K      */
 /*          -COPY THE OLD RECORD INTO THE NEW AREA                  */
 /*          -FREE THE OLD RECORD                                    */
 /*          -UPDATE THE INPUT PARAMETER RECADDR TO REFLECT THE NEW  */
 /*             RECORD ADDRESS. THIS VALUE IS PASSED BACK TO THE     */
 /*             CALLER                                               */
 /*   INSERT THE EXCP ENTRY INTO THE APPROPRIATE RECORD:             */
 /*      -MOVE THE ENTRY INTO THE RECORD AREA                        */
 /*      -UPDATE THE NUMBER OF ENTRIES, THE LENGTH OF THE            */
 /*          EXCP SECTION AND THE LENGTH OF THE RECORD.              */
 /*                                                                  */
 /********************************************************************/
 IF FOUNDSW='0'B THEN              /* IF NOT FOUND, MUST             */
   DO;                             /*  ADD ENTRY TO RECORD           */
     OKSW = '1'B;                  /* INDICATE SPACE AVAILABLE       */
     IF SMF30LEN+LENGTH(SMF30EXP)+LENGTH(T30LDR)  /* IF ADDING ENTRY
      WILL OVERFLOW RECORD                             @VS50066*/
              > T30LNG  THEN
       DO;                         /*                                */
         IF T30LNG+LENGTH(SMF30EXP) >= 32767 THEN /* IF NEW ENTRY
                  WONT FIT IN MAXIMUM SIZE RECORD @ZM50196*/
           DO;                     /*                                */
 /********************************************************************/
 /*                                                                  */
 /*     IF RECORD IS ALREADY AT MAXIMUM SIZE(32K), GET AN            */
 /*     ADDITIONAL RECORD AND CHAIN THE CURRENT RECORD TO NEW ONE    */
 /*     NOTE: SINCE THE STORAGE IS OBTAINED FROM SUBPOOL 230 @ZA44071*/
 /*           FOR THE RCT TCB, IT IS NECESSARY TO BRANCH     @ZA44071*/
 /*           ENTER GETMAIN, USING THE RCT TCB IN REG 4.     @ZA44071*/
 /*           THE LOCAL LOCK MUST BE HELD.                   @ZA44071*/
 /*                                                                  */
 /*                                                                  */
 /********************************************************************/
             SZ = 2048;            /* START WITH 2K RECORD            */
             RFY (R3,R4,R7) RSTD;
             R0 = SZ;
             R3 = SPL;
            R4 = PSAAOLD->ASCBASXB->ASXBFTCB; /* USE RCT TCB @ZA44071*/
             R7 = PSAAOLD;
             GEN REFS(CVTCRMN,CVTPTR,CVTMAP);
               GETMAIN RC,LV=(0),BRANCH=YES,SP=(3)  BRANCH ENTER
             @ENDGEN;
           %ADEXPSK1:;
             RFY (R3,R4,R7);
             IF R15 = 0 THEN        /* IF GETMAIN FOUND STORAGE     */
                DO;
                RFY (R2,R3,R4,R5) RSTD;
                R2 = R1 + LENGTH(T30LDR); /* POINT TO RECORD AREA */
                R3 = SZ-LENGTH(T30LDR);  /* LENGTH TO FILL @ZA40809*/
                R4 = ADD30PTR;           /* OLD RECORD AREA        */
                R5 = SMF30UOF;           /* LENGTH OF SOURCE       */
                MVCL(R2,R4);        /* COPY HEADER,ID, PRODUCT,AND SELF
                                      DEFINING SECTIONS TO NEW RECORD*/
                RFY (R2,R3,R4,R5) UNRSTD;
             T30NXT = R1;          /* POINT RECORD TO NEW ONE        */
             RPTR=T30NXT;      /* STEP TO NEW RECORD             */
             ROLDPTR = RPTR;   /* SAVE POINTER TO RECORD             */
             T30SPSZ = SPSZ;     /* INITIALIZE SUBPOOL AND SIZE     */
             T30NXT=0; /* CLEAR POINTER TO NEXT @VS501XX*/
             ADD30PTR = RPTR + LENGTH(T30LDR); /* POINT TO NEXT RCD*/
             SMF30EOR = 0;          /* INDICATE NO EXCP SECTIONS IN
                                         SUBSEQUENT RECORDS          */
             SMF30LEN=SMF30UOF;   /* SET INITIAL LENGTH              */
             SMF30EOF = SMF30UOF; /* EXCP SECTIONS COME FIRST        */
             SMF30EON = 0;         /* INDICATE NO SECTIONS TO START  */
             SMF30EOR = 0;          /* INDICATE NO EXCP SECTIONS IN
                                         SUBSEQUENT RECORDS          */
            SMF30UON=0; /* SHOW I/O ACTIVITY SECTION MISSING @ZM50196*/
            SMF30TON=0; /* SHOW COMPLETION SECTION MISSING @ZM50196*/
            SMF30CON=0; /* SHOW CPU ACCTG   SECTION MISSING @ZM50196*/
            SMF30AON=0; /* SHOW ACCOUNTING  SECTION MISSING @ZM50196*/
            SMF30RON=0; /* SHOW STORAGE     SECTION MISSING @ZM50196*/
            SMF30PON=0; /* SHOW PERFORMANCE SECTION MISSING @ZM50196*/
            SMF30OON=0; /* SHOW OPERATOR    SECTION MISSING @ZM50196*/
           END;                    /* END OF GETMAIN CHECK           */
            ELSE OKSW = '0'B;      /* INDICATE NO SPACE AVAILABLE    */
           END;                    /* END OF GET CHAIN RECORD        */
         ELSE                      /* GET BIGGER RECORD              */
           DO;                     /*                                */
 /********************************************************************/
 /*                                                                  */
 /*   IF WE NEED A NEW RECORD, BUT HAVENT HIT 32K YET,               */
 /*   GET A NEW RECORD 50%  BIGGER, UP TO 32K. COPY THE OLD RECORD   */
 /*   TO THE NEW AREA, AND FREE THE OLD RECORD.                      */
 /*   NOTE: SINCE THE STORAGE IS OBTAINED FROM SUBPOOL 230   @ZA44071*/
 /*         ATTACHED TO THE RCT TCB, IT IS NECESSARY TO      @ZA44071*/
 /*         BRANCH ENTER GETMAIN AND FREEMAIN, USING THE     @ZA44071*/
 /*         RCT TCB.                                         @ZA44071*/
 /*         THE LOCAL LOCK MUST BE HELD.                     @ZA44071*/
 /*                                                                  */
 /********************************************************************/
             SZ = T30LNG + T30LNG/2; /* NEXT RECORD SIZE- 50% BIGGER  */
             SZ=MIN(32767,SZ);      /* GET EXTRA 50%, UP TO 32K MAX*/
                                   /* GET NEW AREA                   */
              RFY (R3,R4,R7) RSTD; /* SET UP FOR   GETMAIN          */
              R0 = SZ;
              R3 = SPL;
            R4 = PSAAOLD->ASCBASXB->ASXBFTCB; /* USE RCT TCB @ZA44071*/
             R7 = PSAAOLD;
             GEN REFS(CVTCRMN,CVTPTR,CVTMAP);
               GETMAIN RC,LV=(0),BRANCH=YES,SP=(3)  BRANCH ENTER
             @ENDGEN;
              IF R15 = 0 THEN       /* IF GETMAIN FOUND STORAGE      */
                DO;
              RFY (R2,R5)    RSTD;  /* COPY OLD RECORD TO NEW        */
              R2 = R1;              /* DESTINATION ADDRESS           */
              R3 = SZ;              /* LENGTH OF NEW AREA,ZERO REST  */
              R4 = ROLDPTR;         /* SOURCE ADDRESS -OLD RECORD    */
              R5 = T30LNG;          /* LENGTH TO COPY                */
              MVCL(R2,R4);          /* COPY RECORD                   */
              RFY (R2,R3,R4,R5,R7);
             RPTR = R1;            /* ADDRESS NEW RECORD             */
             T30SPSZ=SPSZ;         /* FILL IN HEADER                 */
             T30NXT = 0;
                                   /* FREE OLD RECORD                */
              RFY (R3,R4,R7) RSTD;
              R0 = ROLDPTR->T30LNG;
              R3 = ROLDPTR->T30SP;
              R1 = ROLDPTR;
             R4 = PSAAOLD-> ASCBASXB->ASXBFTCB;
             R7 = PSAAOLD;
             GEN REFS(CVTCRMN,CVTPTR,CVTMAP);
              FREEMAIN RU,LV=(0),BRANCH=YES,SP=(3),A=(1)
             @ENDGEN;
           %ADEXPSK3:;
              RFY (R3,R4,R7) ;
              IF ROLDPTR =RECADDR THEN /* IF WE REPLACED INPUT RCD  */
              RECADDR = RPTR;      /* RETURN NEW RECORD ADDRESS      */
              ELSE                 /* IF WE REPLACED A CHAINED RCD   */
               RVOLDPTR->T30NXT=RPTR;  /* POINT IT TO NEW AREA       */
           END;                    /* END OF GOT BIGGER RECORD       */
          ELSE OKSW = '0'B;        /* INDICATE NO SPACE AVAILABLE    */
         END;                      /* END OF GETMAIN CHECK           */
       END;                        /* END OF OVERFLOW PROCESSING      */
       IF OKSW = '1'B THEN         /* IF AREA AVAILABLE              */
        DO;
         ADD30PTR = RPTR + LENGTH(T30LDR); /*GET ADDRESSABILITY TO   THE
                                     THE RECORD AREA                 */
         EXPTR = ADD30PTR + SMF30EOF +SMF30EON*SMF30ELN;/* POINT TO
                     FIRST      AVAILABLE ENTRY IN RECORD            */
         RFY SMF30EXP BASED(EXPTR);
         SMF30EXP = EXCPNTRY(1:LENGTH(SMF30EXP)); /* MOVE ENTRY INTO
                                      RECORD                          */
         SMF30LEN=SMF30LEN+LENGTH(SMF30EXP); /* INCREMENT RECORD SIZE*/
         SMF30EON=SMF30EON+1;        /* INCREMENT # OF ENTRIES       */
         IF RPTR ^= RECADDR THEN     /* IF WE ARE ADDING TO A CHAINED
                                        RECORD                       */
         DO;                           /*                            */
         RECPTR = RECADDR;             /*START AT HEAD OF CHAIN      */
         DO WHILE (RECPTR ^= RPTR);    /* WALK DOWN CHAIN            */
            (RECPTR + LENGTH(T30LDR))->SMF30EOR=
           (RECPTR + LENGTH(T30LDR))->SMF30EOR +1; /* UPDATE COUNT
                                     IN PREVIOUS RECORDS  @ZM50196*/
            RECPTR = RECPTR-> T30NXT;  /* MOVE TO NEXT RECORD        */
          END;                         /* END OF WALK LOOP           */
         END;                          /* END OF RECORD CHECK        */
        END;                         /* END OF AREA AVAIL CHECK      */
       ELSE                          /* IF NO SPACE AVAILABLE        */
         TCTIEX = '1'B;              /* SET EXCP COUNT WRONG FLAG    */
   END;                            /* END OF ADD ENTRY TO RECORD     */
   RFY SMFRCD30;                    /*                       @G743PJW*/
 END SMFADEXP;
