         MACRO
&LABEL   STCTLE &START,&END,&ADDRESS
.*
.**********************************************************************
.*                                                                    *
.*01* MACRO-NAME = STCTLE                                             *
.*                                                                    *
.*01* DESCRIPTIVE-NAME = STCTL EXTENDED                               *
.*                                                                    *
.*01* COPYRIGHT =  5740-XYN COPYRIGHT IBM CORP. 1980,                 *
.*               LICENSED MATERIAL PROGRAM, PROPERTY OF IBM,          *
.*               REFER TO COPYRIGHT INSTRUCTIONS FORM NUMBER          *
.*               G120-2083.                                           *
.*                                                                    *
.*01* STATUS = OS/VS2 JBB1226                                         *
.*                                                                    *
.*01* FUNCTION = USED TO EXTRACT COPIES OF CONTROL REGISTERS 1,       *
.*               3, 4, 5, 7, 12, AND 14 FROM THE PSA OR HARDWARE,     *
.*               WHICHEVER IS APPROPRIATE.  THE OTHER CONTROL         *
.*               REGISTERS ARE MAINTAINED IN THE HARDWARE.            *
.*                                                                    *
.*01* MODULE-TYPE = MACRO                                             *
.*                                                                    *
.*02* PROCESSOR = ASSEMBLER                                           *
.*                                                                    *
.*02* MODULE SIZE = 140 LOC                                           *
.*                                                                    *
.*02* RESTRICTIONS = CONTROL REGISTER RANGE MUST NOT GO OFF END OF    *
.*                   BASE REGISTER OF &ADDRESS.                       *
.*                                                                    *
.*01* MACROS = IHBERMAC, IHAPSA (NEEDED TO USE MACRO)                 *
.*                                                                    *
.*01* CHANGE-ACTIVITY = @G38FPXY - MICRO CODE/SIMULATION SUPPORT      *
.*                      @ZM50136 - CHANGE MASKS TO HARD CODE INSTEAD  *
.*                                 OF USING EQUATES IN PSA            *
.*                                                                    *
.*01* MNOTES =  IHB002-INVALID OPERAND SPECIFIED                      *
.*              IHB247-INCORRECT NUMBER OF OPERAND VALUES             *
.*                                                                    *
.**********************************************************************
.* A-000000-999999                                             @G38FPXY
.*
*        MACDATE = 80.029
.*
.*       MACRO VARIABLE DECLARES
.*
         LCLA  &I                 INDEX VARIABLE
         LCLC  &C                 BRANCH CONDITION
         LCLB  &SIMTEST           SIMULATION TEST NEEDED FLAG
         LCLA  &OFFSET            MVC OFFSET FROM BEG OF OPER
         LCLA  &WRAPFAC           WRAP-AROUND FACTOR FOR OFFSET
         LCLA  &LENGTH            MVC LENGTH OPERAND
         LCLC  &TO                MVC 'TO' OPERAND
         LCLC  &TOBEG             BEGINNING OF MVC 'TO' OPERAND
         LCLC  &TOEND             END OF MVC 'TO' OPERAND
         LCLC  &POSITN            MACRO OPERAND POSITION
         LCLC  &OPERAND           MACRO OPERAND
         LCLC  &PARM1,&PARM2      IHBERMAC PARAMETERS
         LCLA  &SUBBEG            FIRST CONTROL REGISTER OF SUBRANGE
         LCLA  &SUBEND            LAST CONTROL REGISTER OF SUBRANGE
         LCLA  &TEMPBEG           FIRST CNTL REG OF TEMPORARY RANGE
         LCLA  &TEMPEND           LAST CNTL REG OF TEMPORARY RANGE
         LCLA  &PTI,&PTSIZE       CNTL REG TABLE (PT) INDEX & SIZE
         LCLA  &PTBEG(8)          FIRST CNTL REG OF SIMULATION REGS
         LCLA  &PTEND(8)          LAST CNTL REG OF SIMULATION CNTL REGS
         LCLC  &PTREGC(16)        CNTL REG CHAR REP FOR 0-F (HEX)
.*
.*  THE &PTBEG AND &PTEND ARRAYS CONTAIN RANGES OF SIMULATED
.*  CONTROL REGISTERS, &PTBEG BEING THE FIRST CNTL REG IN THE RANGE
.*  AND &PTEND BEING THE LAST CNTL REG IN THE RANGE. THESE RANGES
.*  MUST BE IN ASCENDING ORDER IN THE ARRAYS FROM ENTRY #1
.*  THRU ENTRY # &PTSIZE; I.E. THE FOLLOWING MUST HOLD:
.*
.*     &PTBEG(I) <= &PTEND(I) < &PTBEG(I+1) <= &PTEND(I+1)
.*             FOR I=1,2,...,&PTSIZE-1
.*
.*
.*
.*
.**********************************************************************
.*                                                                    *
.*       INITIALIZE THE SIMULATION CONTOL REGISTER TABLES             *
.*                                                                    *
.**********************************************************************
.*
&PTSIZE  SETA  5                  NUMBER OF TABLE ENTRIES
.*
&PTBEG(1) SETA 1                  INIT ENTRY #1   (CNTL REG 1)
&PTEND(1) SETA 1
&PTBEG(2) SETA 3                  INIT ENTRY #2   (CNTL REGS 3-5)
&PTEND(2) SETA 5
&PTBEG(3) SETA 7                  INIT ENTRY #3   (CNTL REG 7)
&PTEND(3) SETA 7
&PTBEG(4) SETA 12                 INIT ENTRY #4   (CNTL REG 12)
&PTEND(4) SETA 12
&PTBEG(5) SETA 14                 INIT ENTRY #5   (CNTL REG 14)
&PTEND(5) SETA 14
.*
&PTREGC(1)  SETC  '0'             INIT CNTL REGS CHAR REP (IN HEX)
&PTREGC(2)  SETC  '1'
&PTREGC(3)  SETC  '2'
&PTREGC(4)  SETC  '3'
&PTREGC(5)  SETC  '4'
&PTREGC(6)  SETC  '5'
&PTREGC(7)  SETC  '6'
&PTREGC(8)  SETC  '7'
&PTREGC(9)  SETC  '8'
&PTREGC(10) SETC  '9'
&PTREGC(11) SETC  'A'
&PTREGC(12) SETC  'B'
&PTREGC(13) SETC  'C'
&PTREGC(14) SETC  'D'
&PTREGC(15) SETC  'E'
&PTREGC(16) SETC  'F'
.*
.*
.**********************************************************************
.*                                                                    *
.*       CHECK &START AND &END TO BE VALID CONTROL REGISTER NUMBERS   *
.*                                                                    *
.**********************************************************************
.*
.*       REQUIRED NUMBER OF OPERANDS IS 3
.*
         AIF   (N'&SYSLIST NE 3).ERR1
.*
.*       FIRST AND SECOND OPERANDS MUST BE DECIMAL DIGITS
.*
&POSITN  SETC  'FIRST'            SET POSITION DESCRIPTION FOR IHBERMAC
&OPERAND SETC  '&START'           SET OPERAND FIELD FOR IHBERMAC
         AIF   (T'&START NE 'N').ERR2
         AIF   (&START LT 0 OR &START GT 15).ERR2
.*
&POSITN  SETC  'SECOND'           SET POSITION DESCRIPTION FOR IHBERMAC
&OPERAND SETC  '&END'             SET OPERAND FIELD FOR IHBERMAC
         AIF   (T'&END NE 'N').ERR2
         AIF   (&END LT 0 OR &END GT 15).ERR2
.*
.*
.*
.*
.*       MACRO INVOCATION IS VALID.  CODE TO BE GENERATED CONSISTS
.*       OF MOVING LOGICAL REGISTER VALUES FROM PSA TO &ADDRESS OR
.*       FROM HARDWARE CONTROL REGISTERS TO &ADDRESS.
.*
.*
.*
.**********************************************************************
.*                                                                    *
.*       TEST TO SEE IF SIMULATION CHECK IS NEEDED                    *
.*                                                                    *
.**********************************************************************
.*
&PTI     SETA  1                  INIT PT INDEX FOR LOOP
.*
.PTLP    ANOP                     BEGINNING OF LOOP
.*
         AIF   (&START LE &END).CONT  CHECK FOR WRAP-AROUND; BR IF NOT
.*
.*
.*       WRAP AROUND PRESENT.  IF SPECIAL CONTROL REGISTER IN RANGE
.*       PTBEG-PTEND FOR THIS TABLE ENTRY IS IN RANGE &START-&END,
.*       THEN BRANCH TO GENERATE SIMULATION TEST.
.*
         AIF   ((&START LE &PTEND(&PTI)) OR                            X
               (&END GE &PTBEG(&PTI))).GEN1   BRANCH IF SPECIAL REG
         AGO   .NEXT              TRY NEXT ENTRY IN TABLES
.*
.CONT    ANOP                     WRAP-AROUND NOT PRESENT
.*
.*
.*       IF SPECIAL CONTROL REGISTER IN RANGE PTBEG-PTEND FOR THIS
.*       TABLE ENTRY IS IN RANGE &START-&END, THEN BRANCH TO
.*       GENERATE SIMULATION TEST.
.*
         AIF   ((&START LE &PTEND(&PTI)) AND                           X
               (&END GE &PTBEG(&PTI))).GEN1   BRANCH IF SPECIAL REG
.*
.*
.NEXT    ANOP                     CHECK FOR END OF PT TABLE
&PTI     SETA  &PTI+1             INCREMENT TABLE INDEX
         AIF   (&PTI LE &PTSIZE).PTLP   LOOP BACK IF MORE ENTRIES
.*
.*
.*
.*       SINCE THERE ARE NO SPECIAL CONTROL REGISTERS IN THE RANGE
.*       &START-&END, GENERATE A STCTL FOR THE CONTROL REGISTERS.
.*
&LABEL   STCTL &START,&END,&ADDRESS          .STORE CONTROL REGISTER(S)
.*
         MEXIT
.*
.*
.*
.*
.*
.**********************************************************************
.*                                                                    *
.*       SEPARATE BEGINNING AND ENDING OF &ADDRESS                    *
.*                                                                    *
.*       TWO TYPES OF &ADDRESS OPERANDS ARE EXPECTED -                *
.*             1) &ADDRESS=LABEL BECOMES LABEL(&LENGTH), OR           *
.*             2) &ADDRESS=OFFSET(REG) BECOMES OFFSET(&LENGTH,REG)    *
.*       IN GENERATED MVC INSTRUCTION.                                *
.*                                                                    *
.**********************************************************************
.*
.GEN1    ANOP
.*
&I       SETA  1                  INITIALIZE CHARACTER INDEX
.*
.LOOP    ANOP
         AIF   ('&ADDRESS'(&I,1) EQ '(').TYPE2    &ADDRESS HAS REG ?
         AIF   (&I EQ K'&ADDRESS).TYPE1   &ADDRESS IS SYMBOL ONLY ?
&I       SETA  &I+1               INCREMENT CHARACTER INDEX
         AGO   .LOOP              LOOP BACK
.*
.TYPE1   ANOP
&TOBEG   SETC  '&ADDRESS'        INIT BEGINNING OF ADDRESS
&TOEND   SETC  ')'               INIT END OF ADDRESS
         AGO   .GEN2             BRANCH TO CONTINUE
.*
.TYPE2   ANOP
&TOBEG   SETC  '&ADDRESS'(1,&I-1)  INIT BEGINNING OF ADDRESS
&TOEND   SETC  ','.'&ADDRESS'(&I+1,K'&ADDRESS-&I) SET END OF ADDRESS
.*
.*
.*       NOTE: THE DISPLACEMENT MUST NOT CONTAIN AN EXPRESSION WHICH
.*             CONTAINS A '(', AND THEREFORE, A ')'.  IF SO,
.*             ASSEMBLER ERRORS WILL RESULT ALTHOUGH MACRO MNOTES
.*             WILL NOT BE PRODUCED.
.*
.*
.*
.*
.**********************************************************************
.*                                                                    *
.*       START GENERATION OF CODE TO HANDLE SIMULATION OF CNTL REGS   *
.*                                                                    *
.**********************************************************************
.*
.GEN2    ANOP
.*
&LABEL   STCTL &START,&END,&ADDRESS          .STORE CONTROL REGISTER(S)
         TM    PSAXMFB1-PSA(0),X'20'         .HARDWARE FEATURE @ZM50136
         BZ    IHB&SYSNDX                    .BRANCH IF HARDWARE AVAIL
.*
.*
.*
.**********************************************************************
.*                                                                    *
.*       INITIALIZE PT LOOP VARIABLES DEPENDING ON WRAP-              *
.*       AROUND PRESENT OR NOT PRESENT                                *
.*                                                                    *
.**********************************************************************
.*
         AIF   (&START LE &END).WRAP1    WRAP-AROUND PRESENT ?
.*
.*
.*       INITIALIZE FOR WRAP-AROUND
.*
&WRAPFAC SETA  0                  WRAP FACTOR FOR NON-WRAP SUBRANGE
&SUBBEG  SETA  &START             SET FIRST CNTL REG IN SUBRANGE
&SUBEND  SETA  15                 SET LAST CNTL REG IN SUBRANGE
&PTI     SETA  1                  INITIALIZE PT TABLE INDEX
         AGO   .PTLOOP            GO PROCESS SUBRANGE
.*
.*
.*       INITIALIZE FOR NO WRAP-AROUND
.*
.WRAP1   ANOP
&WRAPFAC SETA  0                  WRAP FACTOR FOR NON-WRAP SUBRANGE
&SUBBEG  SETA  &START             SET FIRST CNTL REG IN SUBRANGE
&SUBEND  SETA  &END               SET LAST CNTL REG IN SUBRANGE
&PTI     SETA  1                  INITIALIZE PT TABLE INDEX
.*
.*
.*
.*
.*
.*
.**********************************************************************
.*                                                                    *
.*       PTLOOP --- PROCESS THE SUBRANGE &SUBBEG-&SUBEND.  GENERATE   *
.*             AN MVC FOR ALL SPECIAL CONTROL REGISTERS IN THE PT     *
.*             TABLE WHICH ARE INCLUDED IN THE SUBRANGE.              *
.*                                                                    *
.**********************************************************************
.*
.*
.PTLOOP  ANOP                      BEGINNING OF PT LOOP
.*
.*
.*             IF SPECIAL CNTL REG IN PT RANGE PTBEG-PTEND FOR THIS
.*             TABLE ENTRY IS NOT IN SUBRANGE SUBBEG-SUBEND, THEN
.*             BRANCH TO TRY THE NEXT TABLE ENTRY.  OTHERWISE,
.*             GENERATE CODE FOR THE PT RANGE GIVEN THE SUBRANGE
.*             (I.E. DO NOT GO OUT OF SUBRANGE WITH PT RANGE
.*             CODE GENERATION).
.*
         AIF   (&SUBBEG GT &PTEND(&PTI)).NEXTPT    IF PT ENTRY NOT
         AIF   (&SUBEND LT &PTBEG(&PTI)).NEXTPT    IN RANGE, SKIP IT
.*
.**********************************************************************
.*       PROCESS THIS CONTROL REGISTER RANGE WHICH IS SIMULATED       *
.**********************************************************************
.*
.*
.*
.*             GET TEMPORARY BEGINNING CONTROL REGISTER
.*
&TEMPBEG SETA  &SUBBEG             ASSUME BEG OF SUBRANGE IS BEG OF
.*                                 TEMPORARY RANGE
         AIF   (&SUBBEG GE &PTBEG(&PTI)).CONTA      IF SO, BRANCH
.*
.*             IF SUBRANGE BEGINNING IS BEFORE PT RANGE BEGINNING,
.*             THEN CORRECT THE TEMPORARY BEGINNING REGISTER.
.*
&TEMPBEG SETA  &PTBEG(&PTI)        RESET TEMPORARY BEG CNTL REG
.*
.*
.*
.*             GET TEMPORARY ENDING CONTROL REGISTER
.*
.CONTA   ANOP                     GET LAST CNTL REG IN TEMPORARY RANGE
&TEMPEND SETA  &SUBEND            ASSUME END OF SUBRANGE IS END OF
.*                                TEMPORARY END
         AIF   (&SUBEND LE &PTEND(&PTI)).CONTB   IF SO, BRANCH
.*
.*             IF SUBRANGE ENDING IS AFTER PT RANGE ENDING,
.*             THEN CORRECT THE TEMPORARY ENDING REGISTER.
.*
&TEMPEND SETA  &PTEND(&PTI)       RESET TEMPORARY END CNTL REG
.*
.*
.*
.*
.**********************************************************************
.*             GENERATE MVC TO MOVE CONTROL REGISTER(S) FROM PSA      *
.**********************************************************************
.*
.*
.CONTB   ANOP                     BUILD MVC FOR THIS RANGE
&OFFSET  SETA  (&TEMPBEG-&START+&WRAPFAC)*4   GET OFFSET FROM ADDRESS
&LENGTH  SETA  (&TEMPEND-&TEMPBEG+1)*4   GET MVC LENGTH FOR CNTL REGS
&TO      SETC  '&TOBEG'.'+'.'&OFFSET'           GET THE 'TO'
&TO      SETC  '&TO'.'('.'&LENGTH'.'&TOEND'     OPERAND FOR MVC
.*
         MVC   &TO,PSAXMCR&PTREGC(&TEMPBEG+1).-PSA(0)
*                                            .MOVE LOGICAL CNTL REG(S)
.*
.NEXTPT  ANOP                     LOOP BACK IF NOT END OF TABLES
.*
&PTI     SETA  &PTI+1             INCREMENT PT INDEX
         AIF   (&PTI LE &PTSIZE).PTLOOP   LOOP IF MORE IN TABLES
.*
.*
.*
.*
.**********************************************************************
.*                                                                    *
.*       PTLOOP TERMINATION --- TERMINATE LOOP DEPENDING UPON WRAP-   *
.*             AROUND PRESENCE.  IF IT IS NOT PRESENT, THEN TERMINATE *
.*             THE MACRO.  IF IT IS PRESENT AND THIS IS THE LOOP'S    *
.*             FIRST TERMINATION, THEN RE-INITIALIZE THE LOOP         *
.*             VARIABLES FOR THE SECOND HALF OF PROCESSING AND        *
.*             PERFORM THE LOOP AGAIN.  IF WRAP-AROUND IS PRESENT AND *
.*             THIS IS THE LOOP'S SECOND TERMINATION, THEN            *
.*             TERMINATE THE MACRO.                                   *
.*                                                                    *
.**********************************************************************
.*
.*
         AIF   (&START LE &END).EXIT    BRANCH IF NO WRAP-AROUND
.*
         AIF   (&WRAPFAC EQ 16).EXIT    BRANCH IF SECOND TERMINATION
.*
.*
.**********************************************************************
.*             RE-INITIALIZE PT LOOP VARIABLES                        *
.**********************************************************************
.*
&WRAPFAC SETA  16                 SET WRAP FACTOR FOR WRAP-AROUND
&SUBBEG  SETA  0                  SET FIRST CNTL REG IN NEW SUBRANGE
&SUBEND  SETA  &END               SET LAST CNTL REG IN NEW SUBRANGE
&PTI     SETA  1                  SET PT TABLE INDEX
         AGO   .PTLOOP            ENTER PT LOOP FOR SECOND TIME
.*
.*
.**********************************************************************
.*                                                                    *
.*       MACRO TERMINATION                                            *
.*                                                                    *
.**********************************************************************
.*
.EXIT    ANOP                     END OF MACRO PROCESSING
.*
IHB&SYSNDX EQU *
         SPACE
*        NOTE: THE CONDITION CODE IS NOW CHANGED
.*
.*
         MEXIT
.*
.*       MACRO INVOCATION ERRORS
.*
.*
.*       INVALID NUMBER OF OPERANDS
.*
.ERR1    ANOP
         IHBERMAC 1012,OPERAND
         MEXIT
.*
.*       INVALID OPERAND (NOT A VALID DECIMAL DIGIT)
.*
.ERR2    ANOP
         IHBERMAC 1001,&POSITN,&OPERAND
         MEND
