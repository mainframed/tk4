         MACRO
&NAME    STABUILD &FLAG=,                                              X
               &LIST=,                                                 X
               &LISTNUM=,                                              X
               &ADDR=,                                                 X
               &CODE=,                                                 X
               &RTN=,                                                  X
               &NUM=,                                                  X
               &TYPE=A,                                                X
               &MF=
         GBLA  &$PSEUDO(5)
         LCLA  &FNUM
         LCLA  &FNUM1,&INCR
         LCLB  &F(8)
.*
.* THIS MACRO BUILDS THE CONTROL BLOCK THAT IKJEHSIR WILL EXAMINE
.* TO DETERMINE WHAT SPECIFIC ABENDS AND/OR WHAT TYPES OF ABENDS
.* A CP WANTS TO HANDLE.
.*
.*  &FLAG IS THE FLAG(S) TO SET IN THE BLOCK, CAN BE ONE OR MORE
.*     OF THE FOLLOWING:
.*        ONE  SAYS ONLY ONE ABEND CODE TO BE HANDLED BY &RTN
.*        MUL  SAYS MULTIPLE ABENDS TO BE HANDLED BY &RTN, ALSO
.*             IMPLIES THAT &LIST EXISTS
.*        ALL  SAYS THAT &RTN WILL HANDLE ALL ABEND CODES NOT
.*             SPECIFICALLY CALLED OUT BY A ONE OR MUL ENTRY
.*        NMSG TELLS IKJEHSIR THAT THE CP WANTS TO PUT OUT ITS
.*             OWN MESSAGE, AND THAT IKJEHSIR SHOULD NOT PUT
.*             OUT THE STANDARD MESSAGE.
.*        USER SAYS THAT THE CODES ARE USER ABENDS
.*        END  THIS SIGNIFIES THE END OF A TYPE OF CODE ENTRY,
.*             EITHER USER OR SYSTEM ABEND CODES
.*  &LIST THIS IS THE ADDRESS OF THE AREA FOR A LIST OF CODES TO
.*        BE STORED IN BY THIS MACRO ON AN MF=E.  THE CODES (FROM
.*        &CODE) WILL BE STORED IN THE ORDER THAT THEY APPEAR IN
.*        THE &CODE=( ) PARAMETER
.*  &LISTNUM  ONLY VALID FOR AN MF=L FORM.  THIS IS THE NUMBER OF
.*        CODES THAT AN MF=E FORM WILL FILL-IN IN AN &LIST
.*  &ADDR  THIS IS THE ADDRESS OF THE MF=L TO BE FILLED IN BY THE
.*        MF=E FORM OF THE MACRO.
.*  &CODE  THIS IS THE CODE OR CODES THAT &RTN WILL HANDLE
.*        CANNOT BE IN A REGISTER.
.*  &RTN  THIS IS THE ADDRESS OF THE ROUTINE THAT WILL HANDLE THE
.*        CODE OR LIST OF CODES GIVEN IN THE &CODE= PARAMETER
.*  &NUM  IS VALID ONLY FOR MF=L.  THIS IS USED BY THE 1ST
.*        STABUILD MF=L TO DETERMINE THE NUMBER OF STABUILDS
.*        THAT WILL BE USED IN THIS ASSEMBLY.  IT SETS UP AN
.*        ADDRESS REFERENCE POINT FOR THE &LIST PARAMETERS OF
.*        OTHER STABUILD MACROS.
.*  &TYPE  TYPE OF MACRO EXPANSION FOR MF=E
.*        A SAYS THAT NEW BLOCK IS BEING BUILT
.*        C SAYS THAT OLD BLOCK IS BEING CHANGED
.*
         AIF   (T'&NUM NE 'O').NUMIT
         AIF   ('&MF' EQ 'L').LISTFRM
.*
.*   EXECUTE FORM OF MACRO
.*
.TRYERS  AIF   ('&TYPE' EQ 'C').TYPEC  CHANGING A BLOCK
         AIF   (T'&FLAG EQ 'O').NOFLAG
         AIF   (T'&ADDR EQ 'O').NOADDR
         AIF   (T'&RTN EQ 'O').NORTN
         AIF   (N'&CODE GE 2 AND T'&LIST EQ 'O').BAD
.LOOP0   ANOP
&FNUM    SETA  0
&FNUM1   SETA  N'&FLAG
.LOOP1   ANOP
&FNUM    SETA  &FNUM+1
         AIF   ('&FLAG(&FNUM)' NE 'ONE').LOOP2
&F(8)    SETB  1
.LOOP2   AIF   ('&FLAG(&FNUM)' NE 'MUL').LOOP3
&F(7)    SETB  1
.LOOP3   AIF   ('&FLAG(&FNUM)' NE 'ALL').LOOP4
&F(6)    SETB  1
.LOOP4   AIF   ('&FLAG(&FNUM)' NE 'USER').LOOP5
&F(5)    SETB  1
.LOOP5   AIF   ('&FLAG(&FNUM)' NE 'NMSG').LOOP6
&F(4)    SETB 1
.LOOP6   ANOP
.LOOP7   ANOP
.LOOP8   AIF   ('&FLAG(&FNUM)' NE 'END').LOOP9
&F(1)    SETB  1
.LOOP9   ANOP
&FNUM1   SETA  &FNUM1-1
         AIF   (&FNUM1 NE 0).LOOP1
         AIF   ('&MF' EQ 'L').MFL001 BYPASS ON MF=L
         AIF   (&F(8)+&F(7)+&F(6) EQ 0).NONE
         AIF   (&F(8)+&F(7)+&F(6) NE 1).EXC
         AIF   ('&TYPE' EQ 'C').MFL001  BYPASS ON TYPE=C
         AIF   (&F(7) EQ 1 AND T'&LIST EQ 'O').BAD2
         AIF   (&F(6) NE 1 AND T'&CODE EQ 'O').NOCODE
.MFL001  SPACE 1
&FNUM SETA &F(1)*128+&F(2)*64+&F(3)*32+&F(4)*16+&F(5)*8+&F(6)*4+&F(7)*2+
               +&F(8)
.*
.*  SEE IF WE HAVE TO GO ON WITH MF=L PROCESSING
.*
         AIF   ('&MF' EQ 'L').MFL
         AIF   ('&TYPE' EQ 'C').TYPEC1  GO ON WITH TYPE=C
         AIF   (N'&CODE GE 2).LISTER
         AIF   ('&ADDR'(1,1) EQ '(').REGAD
&NAME    MVI   &ADDR,&FNUM         STORE FLAG BYTE
         AIF   (T'&CODE EQ 'O').ZERO
         AIF   ('&CODE'(1,1) EQ '(').REG1
         LA    15,X'&CODE'         ABEND CODE
         AGO   .STH15
.ZERO    LA    15,0                CODE OMITTED
.STH15   STH   15,&ADDR+2          STORE IT
         AGO   .REG2
.REG1    STH   &CODE(1),&ADDR+2    STORE ABEND CODE
.REG2    AIF   ('&RTN'(1,1) EQ '(').REG3
         LA    14,&RTN             RETRY ROUTINE ADDRESS
         ST    14,&ADDR+4          STORE IT
         AGO   .END
.REG3    ST    &RTN(1),&ADDR+4     STORE ROUTINE ADDRESS
.END     SPACE 1
         MEXIT
.REGAD   ANOP
&NAME    MVI   0(&ADDR(1)),&FNUM   STORE FLAG BYTE
         AIF   (T'&CODE EQ 'O').ZERO1
         AIF   ('&CODE'(1,1) EQ '(').REGAD1
         LA    15,X'&CODE'         ABEND CODE
         AGO   .STH15A
.ZERO1   LA    15,0                CODE OMITTED
.STH15A  STH   15,2(&ADDR(1))      STORE IT
         AGO   .REGAD2
.REGAD1  STH   &CODE(1),2(&ADDR(1))  STORE ABEND CODE
.REGAD2  AIF   ('&RTN'(1,1) EQ '(').REGAD3
         LA    14,&RTN             RETRY ROUTINE ADDRESS
         ST    14,4(&ADDR(1))      STORE IT
         AGO   .END
.REGAD3  ST    &RTN(1),4(&ADDR(1))  STORE ROUTINE ADDRESS
         AGO   .END
.LISTER  ANOP
         AIF   ('&ADDR'(1,1) EQ '(').LADR
         AIF   ('&LIST'(1,1) EQ '(').LLIST
&NAME    LA    14,&LIST            LIST OF CODES
.ST14A   ST    14,&ADDR            STORE IT
         MVI   &ADDR,&FNUM         STORE FLAG BYTE
         AIF   ('&RTN'(1,1) EQ '(').LRTN
         LA    15,&RTN             RETRY ROUTINE ADDRESS
         ST    15,&ADDR+4          STORE IT
         AGO   .CODES
.LADR    AIF   ('&LIST'(1,1) EQ '(').ALIST
&NAME    LA    14,&LIST            LIST OF CODES
.ST14    ST    14,0(&ADDR(1))      STORE IT
         MVI   0(&ADDR(1)),&FNUM   STORE FLAG BYTE
         AIF   ('&RTN'(1,1) EQ '(').ARTN
         LA    15,&RTN             RETRY ROUTINE ADDRESS
         ST    15,4(&ADDR(1))      STORE IT
         AGO   .CODES
.LRTN    ST    &RTN(1),&ADDR+4     STORE ROUTINE ADDRESS
         AGO   .CODES
.ALIST   ANOP
&NAME    LR    14,&LIST(1)         LIST OF CODES
         AGO   .ST14
.ARTN    ST    &RTN(1),4(&ADDR(1))  STORE ROUTINE ADDRESS
         AGO   .CODES
.LLIST   ANOP
&NAME    LR    14,&LIST(1)         LIST OF CODES
         AGO   .ST14A
.*
.*      LOOP TO SET UP THE CODES
.*
.CODES   SPACE 1
&FNUM    SETA  0        CLEAR COUNTER
&INCR    SETA  0           CLEAR INCREMENT
&FNUM1   SETA  N'&CODE      GET NUMBER OF CODES
.LOOPS   ANOP               ANY LABEL
&FNUM    SETA  &FNUM+1     UP POINTER BY ONE
         LA    15,X'&CODE(&FNUM)'  ABEND CODE
         STH   15,&INCR.(14)    STORE IN LIST
&FNUM1   SETA  &FNUM1-1 BACK UP ONE
         AIF   (&FNUM1 NE 0).LOOPS1
         OI    &INCR.(14),X'80'         END OF LIST
         AGO   .END
.LOOPS1  ANOP
&INCR    SETA  &INCR+2            UP POINTER
         AGO   .LOOPS
.*
.*       THIS IS THE TYPE=C PROCESSING
.*
.TYPEC   AIF   (T'&ADDR EQ 'O').NOADDR NEED AN ADDRESS
         AIF   (N'&CODE GE 2 AND T'&LIST EQ 'O').BAD NEED A LIST
         AIF   (T'&FLAG NE 'O').LOOP0  CHECK FLAG SETTING
.TYPEC1  AIF   ('&ADDR'(1,1) EQ '(').REGTC  ADDR IN REG
         AIF   (N'&CODE GE 2).TYPECL
         AIF   (T'&FLAG NE 'O' AND T'&CODE EQ 'O').TYPECF  FLAG ONLY
         AIF   (T'&CODE NE 'O' AND T'&FLAG EQ 'O').TYPECC CODE ONLY
         AIF   (T'&CODE EQ 'O' AND T'&FLAG EQ 'O').TYPECR  BOTH OMITTED
&NAME    MVI   &ADDR,&FNUM         STORE FLAG BYTE
         LA    15,X'&CODE'         ABEND CODE
         STH   15,&ADDR+2          STORE IT
         AGO   .TYPECR1            CHECK ROUTINE
.TYPECF  ANOP
&NAME    MVI   &ADDR,&FNUM         STORE NEW FLAG
         AGO   .TYPECR1
.TYPECC  ANOP
&NAME    LA    15,X'&CODE'         NEW ABEND CODE
         STH   15,&ADDR+2          STORE IT
         AGO   .TYPECR1
.TYPECR  AIF   (T'&RTN EQ 'O').TYPCLST  SEE IF THER IS A LIST
         AIF   ('&RTN'(1,1) EQ '(').TYPECRR  IN A REG
&NAME    LA    15,&RTN             NEW ROUTINE
         ST    15,&ADDR+4          STORE IT
         AGO   .END
.TYPECRR ANOP
&NAME    ST    &RTN(1),&ADDR+4     STORE NEW ROUTINE
         AGO   .END
.TYPECR1 AIF   (T'&RTN EQ 'O').END
         AIF   ('&RTN'(1,1) EQ '(').TYPECR2
         LA    15,&RTN             NEW ROUTINE
         ST    15,&ADDR+4          STORE IT
         AGO   .END
.TYPECR2 ST    &RTN(1),&ADDR+4     STORE NEW ROUTINE
         AGO   .END
.REGTC   AIF   (N'&CODE GE 2).TYPECLR
         AIF   (T'&FLAG NE 'O' AND T'&CODE EQ 'O').TYPCRF
         AIF   (T'&CODE NE 'O' AND T'&FLAG EQ 'O').TYPCRC
         AIF   (T'&CODE EQ 'O' AND T'&FLAG EQ 'O').TYPCRR
&NAME    MVI   0(&ADDR(1)),&FNUM   STORE FLAG BYTE
         LA    15,X'&CODE'         NEW ABEND CODE
         STH   15,2(&ADDR(1))      STORE IT
         AGO   .TYPCR1
.TYPCRF  ANOP
&NAME    MVI   0(&ADDR(1)),&FNUM   STORE NEW FLAG BYTE
         AGO   .TYPCR1
.TYPCRC  ANOP
&NAME    LA    15,X'&CODE'         NEW ABEND CODE
         STH   15,2(&ADDR(1))      STORE IT
         AGO   .TYPCR1
.TYPCRR  AIF   (T'&RTN EQ 'O').WHY
         AIF   ('&RTN'(1,1) EQ '(').TYPCRRR
&NAME    LA    15,&RTN             NEW ROUTINE
         ST    15,4(&ADDR(1))      STORE IT
         AGO   .END
.TYPCRRR ANOP
&NAME    ST    &RTN(1),4(&ADDR(1)) STORE NEW ROUTINE
         AGO   .END
.TYPCR1  AIF   (T'&RTN EQ 'O').END
         AIF   ('&RTN'(1,1) EQ '(').TYPCRR2
         LA    15,&RTN             NEW ROUTINE
         ST    15,4(&ADDR(1))      STORE IT
         AGO   .END
.TYPCRR2 ST    &RTN(1),4(&ADDR(1)) STORE NEW ROUTINE
         AGO   .END
.TYPECL  AIF   ('&LIST'(1,1) EQ '(').TYPECL1
         AIF   (T'&FLAG EQ 'O').TYPCL2
&NAME    LA    14,&LIST            LIST OF CODES
.TYPCS14 ST    14,&ADDR            STORE IT
         MVI   &ADDR,&FNUM         STORE FLAG BYTE
         AIF   (T'&CODE EQ 'O').END   OUT IF NO CODE
         AGO   .CODES
.TYPECL1 AIF   (T'&FLAG EQ 'O').TYPCL3
&NAME    LR    14,&LIST(1)         LIST OF CODES
         AGO   .TYPCS14
.TYPCL2  ANOP
&NAME    LA    14,&LIST            LIST OF CODES
.TYPCI15 IC    15,&ADDR            SAVE FLAG BYTE
         ST    14,&ADDR            STORE LIST ADDRESS
         STC   15,&ADDR            RESTORE FLAG BYTE
         AIF   (T'&CODE EQ 'O').END  OUT IF NO CODE
         AGO   .CODES
.TYPCL3  ANOP
&NAME    LR    14,&LIST(1)         LIST ADDRESS
         AGO   .TYPCI15
.TYPECLR AIF   ('&LIST'(1,1) EQ '(').TYPRCL
         AIF   (T'&FLAG EQ 'O').TYPRCL1
&NAME    LA    14,&LIST            LIST OF CODES
.TYPRS14 ST    14,0(&ADDR(1))      STORE IT
         MVI   0(&ADDR(1)),&FNUM   STORE FLAG BYTE
         AIF   (T'&CODE EQ 'O').END  OUT IF NO CODE
         AGO   .CODES
.TYPRCL  AIF   (T'&FLAG EQ 'O').TYPRCL3
&NAME    LR    14,&LIST(1)         LIST OF CODES
         AGO   .TYPRS14
.TYPRCL1 ANOP
&NAME    LA    14,&LIST            LIST OF CODES
.TYPRI15 IC    15,0(&ADDR(1))      SAVE FLAG BYTE
         ST    14,0(&ADDR(1))      STORE CODE ADDRESS
         STC   15,0(&ADDR(1))      RESTORE FLAG BYTE
         AIF   (T'&CODE EQ 'O').END  OUT IF NO CODE
         AGO   .CODES
.TYPRCL3 ANOP
&NAME    LR    14,&LIST(1)         ADDRESS OF CODES
         AGO   .TYPRI15
.TYPCLST AIF   (T'&LIST EQ 'O').WHY  NOTHING SPECIFIED
         AGO   .TYPECL             ONWARD
.*
.*          LIST FORM OF MACRO
.*
.* FIRST CHECK TO SEE IF THERE ARE ANY FLAGS
.*
.LISTFRM AIF   (T'&FLAG NE 'O').LOOP0
&FNUM    SETA  0
         AIF   (T'&NAME EQ 'O' AND T'&ADDR EQ 'O').BOTH
         SPACE 1
.MFL     AIF   (T'&LIST EQ 'O' AND N'&CODE GE 2).BAD
         AIF   (T'&LISTNUM NE 'O' AND T'&LIST EQ 'O').NOLIST1
         AIF   (T'&CODE EQ 'O' AND T'&LIST NE 'O' AND T'&LISTNUM EQ 'O')
               ).NOLIST2
         AIF   (T'&NAME EQ 'O' AND T'&ADDR EQ 'O').BOTH
         AIF   (T'&NAME NE 'O').NOADRS  BYPASS
         AIF   (T'&ADDR EQ 'O').NOADRS     IS THERE AN ADDRESS
         AIF   ('&ADDR'(1,1) EQ '(').BADADR     CAN'T DO THAT
.NOADRS  AIF   (T'&LIST EQ 'O').NOLIST     IS THERE A LIST
         AIF   ('&LIST'(1,1) EQ '(').BADLIST     CAN'T DO THAT EITHER
.NOLIST  ANOP
         AIF   (&$PSEUDO(2) EQ 0).FIRST1   FIRST TIME
         ORG   $STAELST+&$PSEUDO(2)*8  ORG AT NEXT SLOT
         AGO   .FIRST2
.FIRST1  ORG   $STAELST          ORG AT FIRST SLOT
.FIRST2  ANOP
&$PSEUDO(2) SETA &$PSEUDO(2)+1
         SPACE 1
.*
.*        THE NAME PARAMETER OVERRIDES THE ADDR PARAMETER
.*
         AIF   (T'&ADDR EQ 'O').NAME
         AIF   (T'&NAME NE 'O').NAME
&ADDR    DS    0F                  NAME THIS SECTION
         AGO   .DCNUM
.NAME    ANOP
&NAME    DS    0F                  NAME THIS SECTION
.DCNUM   DC    AL1(&FNUM)          FLAG BYTE
         AIF   (N'&CODE GE 2).LISTMFL
         AIF   (T'&LIST NE 'O').LISTMFL
         AIF   (T'&CODE EQ 'O').CODE0S
         DC    AL3(X'&CODE')       ABEND CODE
         AGO   .RTN0S
.CODE0S  DC    AL3(0)             ABEND CODE
.RTN0S   AIF   (T'&RTN EQ 'O').RTN1S
         DC    A(&RTN)             RETRY ROUTINE ADDRESS
         AGO  .LSTEND
.RTN1S   DC    A(0)               RETRY ROUTINE ADDRESS
         AGO   .LSTEND
.NUMIT   SPACE 1
         AIF   ('&MF' NE 'L').TRYERS
         AIF   (&$PSEUDO(4) EQ 1).NUMITE
&$PSEUDO(4) SETA 1
$STAELST DS    0F                  NAME THE POINTER ENTRIES
         SPACE 1
         ORG   $STAELST+&NUM*8     ORG TO END OF ENTRIES
         SPACE 1
$STAEEND DS    0F                 NAME THE END OF ENTRIES
.NUMITE  ANOP
         AIF   (T'&FLAG NE 'O' OR T'&LIST NE 'O' OR T'&ADDR NE 'O' OR T'
               '&CODE NE 'O' OR T'&RTN NE 'O' OR T'&LISTNUM NE 'O').LIST
               TFRM
         AGO   .LSTEND
.LISTMFL DC    AL3(&LIST)          ADDRESS OF LIST
         AIF   (T'&RTN EQ 'O').RTN2S
         DC    A(&RTN)             ADDRESS OF RETRY ROUTINE
         AGO   .RTN3S
.RTN2S   DC    A(0)               RETRY ROUTINE ADDRESS
.RTN3S   AIF   (&$PSEUDO(3) NE 0).BYPAS1
         SPACE 1
.MLORG   ORG   $STAEEND            ORG AT BOTTOM OF ENTRIES
         SPACE 1
$STAECOD DS    0F                  NAME LIST OF CODES
         AGO   .BYPAS2
.BYPAS1  SPACE 1
         ORG   $STAECOD+&$PSEUDO(3)*2  ORG AT NEXT SLOT
.BYPAS2  SPACE 1
&LIST    DS    0H                  NAME THIS LIST OF CODES
         AIF   (N'&CODE EQ 0).CODE1S
&FNUM    SETA  0         ZERO THE COUNTER
&FNUM1   SETA  N'&CODE  GET THE NUMBER OF CODES
.LISTLOP ANOP A LABEL
&FNUM    SETA &FNUM+1 UP POINTER BY ONE
         DC    AL2(X'&CODE(&FNUM)')  CODE ENTRY
&$PSEUDO(3) SETA &$PSEUDO(3)+1
&FNUM1   SETA  &FNUM1-1
         AIF   (&FNUM1 NE 0).LISTLOP
.LSTEND  SPACE 1
         ORG
         SPACE 1
         MEXIT
.CODE1S  DC    (&LISTNUM)AL2(0)   SPACE FOR ABEND CODES
&$PSEUDO(3) SETA &$PSEUDO(3)+&LISTNUM
         AGO   .LSTEND
.NONE    MNOTE 8,'NO FLAG PARAMETER CODES'
         SPACE 1
         MEXIT
.EXC     MNOTE 8,'MUTUALLY EXCLUSIVE PARAMETERS IN FLAG CODES'
         SPACE 1
         MEXIT
.NOFLAG  MNOTE 8,'FLAG PARAMETER OMITTED'
         SPACE 1
         MEXIT
.NOCODE  MNOTE 8,'CODE PARAMETER OMITTED'
         SPACE 1
         MEXIT
.NOADDR  MNOTE 8,'ADDR PARAMETER OMITTED'
         SPACE 1
         MEXIT
.NORTN   MNOTE 8,'RTN PARAMETER OMITTED'
         SPACE 1
         MEXIT
.BAD     MNOTE 8,'MORE THAN ONE ABEND CODE AND NO LIST PARAMETER'
         SPACE 1
         MEXIT
.BAD2    MNOTE 8,'FLAG=MUL AND NO LIST PARAMETER'
         SPACE 1
         MEXIT
.NOLIST1 MNOTE 8,'LIST PARAMETER OMITTED WITH LISTNUM PARAMETER'
         SPACE 1
         MEXIT
.NOLIST2 MNOTE 8,'LISTNUM PARAMETER OMITTED WITH LIST PARAMETER AND NO C
               CODE PARAMETER'
         SPACE 1
         MEXIT
.BOTH    MNOTE 8,'BOTH NAME AND ADDR PARAMETERS OMITTED'
         SPACE 1
         MEXIT
.BADADR  MNOTE 8,'CANNOT NAME THE SECTION WITH A REGISTER'
         SPACE 1
         MEXIT
.BADLIST MNOTE 8,'CANNOT NAME THE LIST WITH A REGISTER'
         SPACE 1
         MEXIT
.WHY     MNOTE 8,'NO OPERANDS ON TYPE=C'
         SPACE 1
         MEXIT
         MEND
