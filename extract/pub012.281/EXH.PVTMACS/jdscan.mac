         MACRO
         JDSCAN &PARM
.**********************************************************************
.*                                                                    *
.*   MODULE NAME = IEFJDSCN                                        @H1C
.*                                                                    *
.*   DESCRIPTIVE NAME = SYNTAX SYMBOL CHECKER                         *
.*                                                                    *
.*   COPYRIGHT = 5740-XYN COPYRIGHT IBM CORP. 1982                    *
.*               LICENSED MATERIAL - PROGRAM                          *
.*               PROPERTY OF IBM, REFER TO COPYRIGHT                  *
.*               INSTRUCTIONS FORM G120-2083                          *
.*                                                                    *
.*                                                                    *
.*   FUNCTION = THIS MACRO SCANS A PASSED VALUE  FOR VALIDATION       *
.*              OF UP TO 8 CHARACTERS.  FIRST, THE PASSED VALUE       *
.*              IS CHECKED TO MAKE SURE IT IS NOT BLANKS. NEXT,       *
.*              THE VALUE IS CHECKED TO INSURE THAT IT HAS ONLY       *
.*              1 TO 8  CHARACTERS.  THE  FIRST  CHARACTER MUST       *
.*              BE ALPHABETIC OR NATIONAL; I.E. @, #, OR $. THE       *
.*              NEXT SEVEN  CHARACTERS MUST  BE ALPHANUMERIC OR       *
.*              NATIONALS.  ALPHANUMERIC MEANS  THE LETTERS A-Z       *
.*              AND  NUMBERS 0-9.  IF ANY OF  THESE TESTS FAIL,       *
.*              THEN AN  ERROR BIT  IS SET TO A ONE.                  *
.*                                                                    *
.*              THIS MACRO MAY BE USED IN ONE OF TWO WAYS:            *
.*                                                                    *
.*              1.) THIS MACRO  IS USED AS  AN INNER MACRO AND        *
.*              THE  OUTER  MACRO   MUST  PASS  A  ONE-FOR-ONE        *
.*              PARAMETER VALUE WITH THE SAME NAME.                   *
.*     EXAMPLE:         MACRO                                         *
.*                      JDSCAN &VALUE    (PROTOTYPE STATEMENT)        *
.*                      ...                                           *
.*                      MEND                                          *
.*                      MACRO                                         *
.*                      OUTER  &VALUE    (PROTOTYPE STATEMENT)        *
.*                      ...                                           *
.*                      JDSCAN &VALUE                                 *
.*                      ...                                           *
.*                      MEND                                          *
.*                TEST  CSECT                                         *
.*                      OUTER  TESTONE   (WILL BE THE VALUE TESTED)   *
.*                      END                                           *
.*                                                                    *
.*              2.) THIS MACRO  IS USED AS  AN INNER MACRO AND        *
.*              THE   VALUE  IS   PASSED  VIA  A   SETC  MACRO        *
.*              STATEMENT.                                            *
.*                                                                    *
.*     EXAMPLE:         MACRO                                         *
.*                      JDSCAN &VALUE    (PROTOTYPE STATEMENT)        *
.*                      ...                                           *
.*                      MEND                                          *
.*                      MACRO                                         *
.*                      OUTER  &VALUE   (OR &VALUE= KEYWORD)          *
.*                      ...                                           *
.*                &TEMP SETC   '&VALUE'  MUST BE IN APOSTROPHES       *
.*                      JDSCAN &TEMP = NAME OF LEFT SIDE OF SETC      *
.*                      ...                                           *
.*                      MEND                                          *
.*                TEST2 CSECT                                         *
.*                      OUTER  TESTTWO   (WILL BE THE VALUE TESTED)   *
.*                      END                                           *
.*                                                                    *
.*     NOTES = NONE                                                   *
.*                                                                    *
.*      DEPENDENCIES = NONE                                           *
.*                                                                    *
.*      RESTRICTIONS = THIS MACRO WILL ONLY WORK IF IT IS USED        *
.*                     AS AN INNER MACRO.                             *
.*                                                                    *
.*   ENTRY POINT = N/A                                                *
.*                                                                    *
.*   MODULE TYPE = MACRO                                              *
.*                                                                    *
.*     PROCESSOR = ASSEMBLER                                          *
.*                                                                    *
.*     INPUT = THE FOLLOWING IS PASSED AS A PARAMETER TO JDSCAN       *
.*                                                                    *
.*             KEYWORD           DESCRIPTION                          *
.*                                                                    *
.*             - &PARM           USED AS THE PASSED SYMBOL TO BE      *
.*                               SCANNED.                             *
.*                                                                    *
.*     OUTPUT = A BIT TO INDICATE WHETHER AN ERROR WAS DETECTED       *
.*              OR NOT:                                               *
.*                                                                    *
.*             ERROR BIT        DESCRIPTION--(IF BIT IS TURNED ON)    *
.*             &$ERRBIT         MASTER BIT TO FLAG ERROR CONDITION    *
.*             &$ERRBLK         INDICATES A BLANK VALUE WAS PASSED    *
.*             &$ERRBIG         INDICATES TOO MANY CHARACTERS         *
.*             &$ERRBAD         INDICATES AN ILLEGAL CHARACTER FOUND  *
.*                                                                    *
.*   EXIT NORMAL =                                                    *
.*   CONDITION - NO ERRORS DETECTED                                   *
.*   OUTPUT    - THE ERROR GLOBAL BIT WILL NOT BE SET.                *
.*                                                                    *
.*   EXIT ERROR =                                                     *
.*   CONDITION - SYNTAX ERROR, A BLANK VALUE, OR TOO MANY             *
.*               CHARACTERS WERE PASSED.                              *
.*   OUTPUT    - MASTER ERROR BIT AND APPROPRIATE ERROR BIT           *
.*               WILL BE SET.                                         *
.*                                                                    *
.*   EXTERNAL REFERENCES = N/A                                        *
.*                                                                    *
.*   TABLES = NONE                                                    *
.*                                                                    *
.*   CHANGE ACTIVITY = H0,H1                                       @H1C
.*    $H0= EXTJCL JBB1328 810508 PDC5: SUPPORT FOR EXTENDED JCL       *
.*    $H1= EXTJCL JBB1328 811202 PDC5: SUPPORT FOR EXTENDED JCL    @H1A
.*                                                                    *
.**********************************************************************
.* A 000000-999999                                                 @H0A
.* CHANGED PROCESSING TO CATCH INVALID CHARACTERS WITHIN THE COLLATING
.*    SEQUENCE: I.E. CHARACTERS BETWEEN I AND J, R AND S, Z AND 0. @H1A
.**********************************************************************
.*       LOCAL AND GLOBAL VARIABLES DEFINED FOR MACRO.                *
.**********************************************************************
         LCLA  &NUM               VARIABLE TO HOLD NUMBER OF CHARACTERS
         LCLA  &N                   KEEPS TRACK OF  DIGIT          @H1A
         GBLB  &$ERRBIT             MASTER BIT TO FLAG ERROR CONDITION
         GBLB  &$ERRBLK             BIT FLAG BLANK VALUE CONDITION
         GBLB  &$ERRBIG             BIT FLAG TOO MANY CHARACTERS
         GBLB  &$ERRBAD             BIT FLAG ILLEGAL CHARACTER FOUND
.**********************************************************************
.*       RESET ERROR BITS FOR EACH INVOCATION.                        *
.**********************************************************************
&$ERRBIT SETB  0
&$ERRBLK SETB  0
&$ERRBIG SETB  0
&$ERRBAD SETB  0
.**********************************************************************
.*       DETERMINE IF ANY VALUE WAS PASSED AT ALL.                    *
.**********************************************************************
         AIF   ('&PARM' NE '').TESTAMT  NOT EQUAL TO BLANKS?
&$ERRBIT SETB  1        BLANKS--    SET MASTER ERROR BIT
&$ERRBLK SETB  1              --    SET ERROR BIT TO INDICATE BLANKS
         AGO   .OUT                 GET OUT OF MACRO
.**********************************************************************
.*       DETERMINE THE NUMBER OF CHARACTERS THE PASSED VALUE HAS.     *
.*       MUST BE FROM 1 TO 8.                                         *
.**********************************************************************
.TESTAMT ANOP
         AIF   (K'&PARM GE 1 AND K'&PARM LE 8).GETNUM
&$ERRBIT SETB  1        TOO MANY--  SET MASTER ERROR BIT
&$ERRBIG SETB  1                --  SET ERROR BIT TOO MANY CHARACTERS
         AGO   .OUT                 GET OUT OF MACRO
.**********************************************************************
.*       VALUE IS NOT BLANKS AND IS ALSO FROM 1 TO 8 CHARACTERS IN    *
.*       LENGTH. GET THE NUMBER TO DETERMINE HOW MANY SHOULD BE       *
.*       CHECKED.                                                     *
.**********************************************************************
.GETNUM  ANOP
&NUM     SETA  K'&PARM             GET THE NUMBER OF CHARACTERS PASSED
&N       SETA  2                   SET COUNTER TO SECOND DIGIT     @H1A
.***************************************************************** @H1A
.*  EXPLICITLY CHECK FIRST CHARACTER OF PARM VALUE TO INSURE     * @H1A
.*  THAT IT IS NOT A DECIMAL NUMBER OR AN INVALID CHARACTER.     * @H1A
.***************************************************************** @H1A
         AIF   ('&PARM'(1,1) GE 'A' AND '&PARM'(1,1) LE 'I').CONT  @H1A
         AIF   ('&PARM'(1,1) GE 'J' AND '&PARM'(1,1) LE 'R').CONT  @H1A
         AIF   ('&PARM'(1,1) GE 'S' AND '&PARM'(1,1) LE 'Z' OR         +
               '&PARM'(1,1)  EQ '$' OR  '&PARM'(1,1) EQ '@' OR         +
               '&PARM'(1,1)  EQ '#').CONT                          @H1A
         AGO   .SETBIT             GO SET ERROR BIT                @H1A
.CONT    AIF   (&NUM EQ 1).OUT     IF ONLY ONE CHARACTER, GET OUT  @H1A
.***************************************************************** @H1A
.*  CHECK THE REMAINING CHARACTERS FOR INVALID CHARACTERS.       * @H1A
.***************************************************************** @H1A
.LOOP    ANOP                                                      @H1A
         AIF   ('&PARM'(&N,1) GE 'A' AND '&PARM'(&N,1) LE 'I').CK  @H1A
         AIF   ('&PARM'(&N,1) GE 'J' AND '&PARM'(&N,1) LE 'R').CK  @H1A
         AIF   ('&PARM'(&N,1) GE 'S' AND '&PARM'(&N,1) LE 'Z').CK  @H1A
         AIF   ('&PARM'(&N,1) GE '0' AND '&PARM'(&N,1) LE '9'  OR      +
               '&PARM'(&N,1)  EQ '$' OR  '&PARM'(&N,1) EQ '@'  OR      +
               '&PARM'(&N,1)  EQ '#').CK                           @H1A
         AGO   .SETBIT               GO SET ERROR BIT              @H1A
.CK      ANOP                                                      @H1A
&N       SETA  &N+1                  SET COUNTER TO NEXT DIGIT     @H1A
         AIF   (&N GT &NUM).OUT      FINISHED ALL DIGITS?          @H1A
         AGO   .LOOP                 NO--DO NEXT ONE               @H1A
.**********************************************************************
.*       ERROR FOUND IN ONE OF THE CHARACTER CHECKING ROUTINES;       *
.*       SET THE ERROR BIT.                                           *
.**********************************************************************
.SETBIT  ANOP                       FOUND ERROR - SET ERROR BIT
&$ERRBIT SETB 1                     SET MASTER ERROR BIT
&$ERRBAD SETB 1                     BIT FLAG ILLEGAL CHARACTER FOUND
.OUT     ANOP
         MEND
