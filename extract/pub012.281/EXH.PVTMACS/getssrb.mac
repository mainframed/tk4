* %/*** START-OF-SPECIFICATIONS ***************************************
.*                                                                    *
.*01* MACRO-NAME = GETSSRB                                            *
.*                                                                    *
.*01* DESCRIPTIVE-NAME = GET SSRB                                     *
.*                                                                    *
.*01* COPYRIGHT =  5740-XYN COPYRIGHT IBM CORP. 1980,                 *
.*               LICENSED MATERIAL PROGRAM,                           *
.*               PROPERTY OF IBM,                                     *
.*               REFER TO COPYRIGHT INSTRUCTIONS FORM NUMBER          *
.*               G120-2083.                                           *
.*                                                                    *
.*01* STATUS = OS/VS2 JBB1226                                         *
.*                                                                    *
.*01* FUNCTION = USED BY SUPERVISOR ROUTINES TO OBTAIN AN SSRB FROM   *
.*               THE SUPERVISOR SSRB POOL.                            *
.*                                                                    *
.*01* MODULE-TYPE = MACRO  (BILINGUAL)                                *
.*                                                                    *
.*02* PROCESSOR = ASSEMBLER/PLS COMPILER                              *
.*                                                                    *
.*02* MACRO-SIZE = 105 LOC                                            *
.*                                                                    *
.*01* MACROS = IHBERMAC                                               *
.*                                                                    *
.*01* CHANGE-ACTIVITY = @G381PXY - CROSS MEMORY SUPPORT               *
.*                                                                    *
.*** END-OF-SPECIFICATIONS ********************************************
.* A-000000-999999                                             @G381PXY
.*
         MACRO
&LABEL   GETSSRB &REGS=
.*
*        MACDATE = 80.029
.*
.**********************************************************************
.*       DECLARE VARIABLES                                            *
.**********************************************************************
         LCLC  &OP1,&OP2               IHBERMAC OPERANDS
.*
.**********************************************************************
.*       POSITIONAL PARAMETERS ARE NOT ALLOWED                        *
.**********************************************************************
         AIF   (N'&SYSLIST NE 0 ).ERR1
.*
.**********************************************************************
.*       &REGS MUST BE SPECIFIED AS 'SAVE' OR 'USE'                   *
.**********************************************************************
.REGS    ANOP
         AIF   ('&REGS' EQ '').ERR2
         AIF   ('&REGS' EQ 'USE').GEN
         AIF   ('&REGS' NE 'SAVE').ERR3
.*
.**********************************************************************
.*       CODE EXPANSION FOR &REGS OPERAND - BEFORE GETSSRB CALL       *
.**********************************************************************
.GEN     ANOP
         AIF   ('&LABEL' EQ '').NOLABEL
&LABEL   DC    0H'0'
.*
.NOLABEL ANOP
         AIF   ('&REGS' EQ 'USE').LINK
.*
.*       &REGS = SAVE
         STM   2,5,0(13)               .SAVE USERS REGISTERS 2-5
         STM   11,12,16(13)            .SAVE USERS REGISTERS 11-12
         LR    5,13                    .SAVE ADDRESS OF SAVE AREA
.*
.**********************************************************************
.*       GENERATE LINKAGE TO GETSSRB SERVICE ROUTINE                  *
.**********************************************************************
.LINK    ANOP
         L     15,PSASVT-PSA(0,0)      .SVT ADDRESS
         L     15,SVTSSRBG-SVT(0,15)   .GETSSRB ENTRY ADDRESS
         BALR  14,15                   .CALL GETSSRB
.*
.**********************************************************************
.*       CODE EXPANSION FOR &REGS OPERAND - AFTER GETSSRB CALL        *
.**********************************************************************
         AIF   ('&REGS' EQ 'USE').EXIT
.*
.*       &REGS = SAVE
         LR    13,5                    .RESTORE SAVE AREA ADDRESS
         LM    2,5,0(13)               .RESTORE USERS REGISTERS 2-5
         LM    11,12,16(13)            .RESTORE USERS REGISTERS 11-12
.EXIT    ANOP
         MEXIT
.*
.**********************************************************************
.*       MACRO INVOCATION ERRORS                                      *
.**********************************************************************
.*
.*       INVALID POSITIONAL PARAMETER SPECIFIED
.ERR1    ANOP
&OP1     SETC   'POSITIONAL'
         IHBERMAC 1014,&OP1
         MEXIT
.*
.*       REGS OPERAND REQUIRED, NOT SPECIFIED
.ERR2    ANOP
&OP1     SETC   'REGS'
         IHBERMAC 1006,&OP1
         MEXIT
.*
.*       INVALID &REGS PARAMETER SUPPLIED
.ERR3    ANOP
&OP1     SETC   'REGS'
&OP2     SETC   '&REGS'
         IHBERMAC 1001,&OP1,&OP2
         MEND
* */
* GETSSRB: MACRO KEYS(REGS);
*
*        /* VARIABLE DECLARES */
*
*        DCL EHAREGS CHAR EXT;         /*REGS DCLD BY EPILOG*/
*        DCL EHAMAPS CHAR EXT;         /*REG SAVE AREA DCLD BY EPILOG*/
*        DCL RC FIXED;                 /*MACRO GEN SEVERITY CODE*/
*        DCL CMT CHAR;                 /*DO-END COMMENT*/
*
*        /* GENERATE MACRO INVOCATION */
*
*        IF MACLABEL^='' THEN          /*LABEL ON MACRO CALL?*/
*          ANS(MACLABEL) COL(MACLMAR); /*YES: GEN LABEL*/
*        CMT='?'××MACLABEL××' '××MACNAME××' '××MACLIST××MACKEYS××
*        ' MACDATE(78.290)';
*        ANS ('DO; '××COMMENT(CMT)) SKIP COL(MACCOL);
*
*        /* INITIALIZE MACRO RETURN CODE */
*
*        RC=12;                        /*MACRO ERROR UNTIL CHANGED*/
*
*        /* POSITIONAL PARAMETERS ARE NOT ALLOWED */
*
*        IF NUMBER(MACLIST)^=0 THEN    /*ANY POSITIONAL PARAMETERS?*/
*          DO;                         /*YES: ERROR*/
*            ANS MSG('AHA0023  ''MACLIST'' IS INVALID WITH GETSSRB.'××
*            ' NO TEXT IS GENERATED.'); /*MSOURCE MSG*/
*            ANS ('/*AHA0023  ''MACLIST'' IS INVALID WITH GETSSRB.'××
*            ' NO TEXT IS GENERATED.*/') SKIP COL(10); /*TEXT MSG*/
*            GOTO LHA03000;
*          END;                        /*NO: CONTINUE*/
*
*        /* REGS PARAMETER MUST BE SPECIFIED AS 'SAVE' OR 'USE' */
*
*        IF REGS='' THEN               /*REGS SUPPLIED?*/
*          DO;                         /*NO: ERROR*/
*            ANS MSG('AHA0013  ''REGS'' IS REQUIRED BUT IS NOT '××
*            'SUPPLIED. NO TEXT IS GENERATED.'); /*MSOURCE MSG*/
*            ANS ('/*AHA0013  ''REGS'' IS REQUIRED BUT IS NOT '××
*            'SUPPLIED. NO TEXT IS GENERATED.*/')
*            SKIP COL(10);             /*TEXT MSG*/
*            GOTO LHA03000;
*          END;                        /*YES: CONTINUE*/
*
*        IF NUMBER(REGS)>1 THEN        /*EXCESSIVE VALUES SUPPLIED?*/
*          DO;                         /*YES: ERROR*/
*            ANS MSG('AHA0033  REGS'××REGS××' IS TOO LONG. NO TEXT '××
*            'IS GENERATED.');         /*MSOURCE MSG*/
*            ANS ('/*AHA0033  REGS'××REGS××' IS TOO LONG. NO TEXT '××
*            'IS GENERATED.*/') SKIP COL(10); /*TEXT MSG*/
*            GOTO LHA03000;
*          END;                        /*NO: CONTINUE*/
*
*        IF REGS(1)='SAVE' THEN        /*REGS VALID?*/
*          GOTO LHA01000;              /*YES: CONTINUE*/
*
*        IF REGS(1)^='USE' THEN        /*REGS VALID?*/
*          DO;                         /*NO: ERROR*/
*            ANS MSG('AHA0023  '××REGS(1)××' IS INVALID WITH '××
*            '''REGS''. NO TEXT IS GENERATED.'); /*MSOURCE MSG*/
*            ANS ('/*AHA0023  '××REGS(1)××' IS INVALID WITH '××
*            '''REGS''. NO TEXT IS GENERATED.*/')
*            SKIP COL(10);             /*TEXT MSG*/
*            GOTO LHA03000;
*          END;                        /*NO: CONTINUE*/
*
*        /* GENERATE LINKAGE CODE */
*
* LHA01000: ;
*
*        RC=0;                         /*NO MACRO ERROR FOUND*/
*
*        IF REGS(1)='SAVE' THEN        /*SAVE USERS REGS?*/
*          DO;                         /*YES: GEN SAVE*/
*            ANS('RFY (GPR00F,GPR01F,GPR05F,GPR13P) RSTD; '××
*            '/*RESTRICT REGS USED BY GETSSRB*/') SKIP COL(MACCOL+2);
*            ANS('STM(GPR02F,GPR05F,GPR13P->SA@); /*SAVE CALLERS '××
*            'REGS 2-5*/') SKIP COL(MACCOL+2);
*            ANS('STM(GPR11F,GPR12F,GPR13P->SA@(17:24)); /*SAVE '××
*            'CALLERS REGS 11-12*/') SKIP COL(MACCOL+2);
*            ANS('GPR05F=GPR13P; /*SAVE ADDRESS OF SAVE AREA*/')
*            SKIP COL(MACCOL+2);
*          END;
*        ELSE                          /*NO: MUST BE REGS(USE)*/
*          ANS('RFY (GPR00F,GPR01F,GPR02F,GPR03F,GPR04F,GPR11F,'××
*          'GPR12F,GPR13P) RSTD; /*RESTRICT REGS USED BY GETSSRB*/')
*          SKIP COL(MACCOL+2);
*
*        ANS('CALL IEAVSPM2; /*CALL GETSSRB EP*/') SKIP COL(MACCOL+2);
*
*        IF REGS(1)='SAVE' THEN        /*RESTORE USERS REGS?*/
*          DO;                         /*YES: GEN RESTORE*/
*            ANS('GPR13P=GPR05F; /*RESTORE SAVE AREA ADDRESS*/')
*            SKIP COL(MACCOL+2);
*            ANS('LM(GPR02F,GPR05F,GPR13P->SA@);/*RESTORE CALLERS '××
*            'REGS 2-5*/') SKIP COL(MACCOL+2);
*            ANS('LM(GPR11F,GPR12F,GPR13P->SA@(17:24));/*RESTORE '××
*            'CALLERS REGS 11-12*/') SKIP COL(MACCOL+2);
*            ANS('RFY (GPR00F,GPR01F,GPR05F,GPR13P) UNRSTD; '××
*            '/*UNRESTRICT REGS*/') SKIP COL(MACCOL+2);
*          END;
*        ELSE                          /*NO: MUST BE REGS(USE)*/
*          ANS('RFY (GPR00F,GPR01F,GPR02F,GPR03F,GPR04F,GPR11F,'××
*          'GPR12F,GPR13P) UNRSTD; /*UNRESTRICT REGS*/')
*          SKIP COL(MACCOL+2);
*
*        /* REQUEST GLOBAL VARIABLE DECLARES FROM EPILOG */
*
*        IF INDEX(EHAREGS,'00F')=0 THEN /*DCL FOR R0 REQUESTED?*/
*          EHAREGS=EHAREGS××'00F';     /* NO: REQUEST IT*/
*        IF INDEX(EHAREGS,'01F')=0 THEN /*DCL FOR R1 REQUESTED?*/
*          EHAREGS=EHAREGS××'01F';     /* NO: REQUEST IT*/
*        IF INDEX(EHAREGS,'02F')=0 THEN /*DCL FOR R2 REQUESTED?*/
*          EHAREGS=EHAREGS××'02F';     /* NO: REQUEST IT*/
*        IF INDEX(EHAREGS,'11F')=0 THEN /*DCL FOR R11 REQUESTED?*/
*          EHAREGS=EHAREGS××'11F';     /* NO: REQUEST IT*/
*        IF INDEX(EHAREGS,'12F')=0 THEN /*DCL FOR R12 REQUESTED?*/
*          EHAREGS=EHAREGS××'12F';     /* NO: REQUEST IT*/
*        IF INDEX(EHAREGS,'13P')=0 THEN /*DCL FOR R13 REQUESTED?*/
*          EHAREGS=EHAREGS××'13P';     /* NO: REQUEST IT*/
*
*        IF REGS(1)='USE' THEN         /*REGS(USE)?*/
*          DO;                         /*YES: DCL REGS USED*/
*            IF INDEX(EHAREGS,'03F')=0 THEN /*DCL FOR R3 REQUESTED?*/
*              EHAREGS=EHAREGS××'03F'; /* NO: REQUEST IT*/
*            IF INDEX(EHAREGS,'04F')=0 THEN /*DCL FOR R4 REQUESTED?*/
*              EHAREGS=EHAREGS××'04F'; /* NO: REQUEST IT*/
*          END;
*        ELSE                          /*REGS(SAVE)*/
*          DO;                         /*DCL REG AND SAVEAREA*/
*            IF INDEX(EHAREGS,'05F')=0 THEN /*DCL FOR R5 REQUESTED?*/
*              EHAREGS=EHAREGS××'05F'; /* NO: REQUEST IT*/
*            IF INDEX(EHAMAPS,'SA@')=0 THEN /*SAVEAREA DCL REQUESTED?*/
*              EHAMAPS=EHAMAPS××'SA@,'; /* NO: REQUEST IT*/
*          END;
*
*LHA03000: ;
*
*        ANS ('END; '××COMMENT(CMT)) SKIP COL(MACCOL);
*        RETURN CODE(RC);              /*MACRO END*/
*%       END GETSSRB;
