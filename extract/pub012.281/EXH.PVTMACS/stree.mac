         MACRO
&TAG     STREE &TREE,&TSP=,&T=,&TYPE=,&FIX=NO,&K=,&IVS=,&S=,&MAP=,&C=, *
               &TSPACE=,&RSPACE=,&RSP=,&KEYL=,&OFFSET=,&RECL=
.**********************************************************************
.*               ****** SEPTEMBER 27,1973.  *******
.**********************************************************************
.* THE STREE MACRO-INSTRUCTION IS USED TO CREATE A RADIX PARTITION    *
.* TREE FOR SUBSEQUENT USE. THE STREE SUBROUTINE IN THE MODULE        *
.* IGARPT01 OBTAINS SPACE FOR THE RPT, AND STORES THE INFORMATION     *
.* SUPPLIED IN A CONTROL BLOCK FOR THE RPT. THE ADDRESS OF THIS       *
.* CONTROL BLOCK IS RETURNED IN REGISTER 1, AND IS (OPTIONALLY) STORED*
.* IN THE MAIN STORAGE LOCATION SPECIFIED BY THE TREE PARAMETER.      *
.*                                                                    *
.* THE ADDRESS RETURNED BY THE STREE MACRO-INSTRUCTION MUST BE USED   *
.* FOR ALL SUBSEQUENT OPERATIONS WITH IT USING THE OTHER RPT          *
.* MACRO-INSTRUCTIONS, SUCH AS SRCH, DEL, INS, SCANL, SCANR, FTREE,   *
.* ETC. THE ADDRESS CAN BE STORED EITHER IN A MAIN STORAGE LOCATION   *
.* VIA THE TREE PARAMETER, OR MAY BE PUT IN A REGISTER BY CODING      *
.* "(GPR)" FOR THE TREE PARAMETER, WHERE "GPR" IS THE REGISTER NAME OR*
.* NUMBER.                                                            *
.*                                                                    *
.* THE SPACE FOR THE RPT CAN BE OBTAINED VIA THE GSPACE               *
.* MACRO-INSTRUCTION USING A PREVIOUSLY ESTABLISHED SPACE CONTROL     *
.* AREA, OR MAY BE OBTAINED IMPLICITLY VIA THE GSPACE                 *
.* MACRO-INSTRUCTION USING THE APPROPRIATE SPACE CONTROL AREA FROM THE*
.* TCB (SEE THE DESCRIPTION OF THE GSPACE MACRO-INSTRUCTION FOR THE   *
.* USE OF SPACE CONTROL AREAS).                                       *
.*                                                                    *
.* THERE ARE DIFFERENT TYPES OF RADIX PARTITION TREES, WHICH ARE      *
.* DIFFERENTIATED FROM ONE ANOTHER BY CODING THE T PARAMETER ON ALL   *
.* THE MACRO-INSTRUCTIONS THAT DEAL WITH RPTS. THERE ARE LIMITATIONS  *
.* ON THE OPERATIONS THAT MAY BE INVOKED WITH THE DIFFERENT RPT TYPES,*
.* DEPENDING ON THE RPT TYPE.                                         *
.*                                                                    *
.* THE ALLOCATION OF SPACE, AS DESCRIBED ABOVE, APPLIES TO TYPE 8     *
.* RADIX PARTITION TREES. THE GSPACE MACRO-INSTRUCTION IS ALWAYS USED *
.* TO ALLOCATE THE SPACE FOR A TYPE 8 RPT.                            *
.* THE SPACE FOR THE RPT CAN BE OBTAINED EITHER CONDITIONALLY OR      *
.* UNCONDITIONALLY, DEPENDING ON THE C PARAMETER. IF "C=C" IS CODED,  *
.* THEN THE ALLOCATION IS VIA A CONDITIONAL GSPACE OPERATION, WHICH   *
.* HAS A RETURN CODE FOR THE STREE MACRO-INSTRUCTION OF -1 IF THE     *
.* SPACE COULD NOT BE ALLOCATED, OR HAS A RETURN CODE IN REGISTER 15  *
.* WHICH IS THE ADDRESS OF THE RPT'S CONTROL BLOCK (CALLED THE TREE   *
.* HEADER, OR THE ADDRESS OF THE RPT).                                *
.* FOR TYPE 5 RADIX PARTITION TREE, THE SPACE IS ALWAYS OBTAINED VIA  *
.* THE GETMAIN MACRO-INSTRUCTION, AND A CONDITIONAL GETMAIN IS ALWAYS *
.* USED, UNLESS THE C PARAMETER IS CODED "C=U".                       *
.*                                                                    *
.**********************************************************************
.* WITH TYPE 8 RADIX PARTITION TREES, THE FOLLOWING OPERATIONS ARE    *
.* EFFECTIVE:                                                         *
.*                                                                    *
.* SRCH: SEARCH FOR A GIVEN KEY.                                      *
.* INS:  INSERT A NEW KEY-ADDRESS ASSOCIATION PAIR.                   *
.* DEL:  DELETE A KEY-ADDRESS ASSOCIATION PAIR SELECTED BY THE CURRENT*
.*       SETTING OF THE CURSOR (SEE THE DESCRIPTION OF THE CURSOR     *
.*       UNDER THE ISCAN MACRO-INSTRUCTION DESCRIPTION).              *
.* ISCAN:INITIALIZE THE CURSOR FOR SUBSEQUENT SCANNING OPERATIONS.    *
.* SCANL:SCAN LEFT TO THE NEXT KEY IN DESCENDING ORDER.               *
.* SCANR:SCAN RIGHT TO THE NEXT KEY IN ASCENDING ORDER.               *
.* FTREE:RELEASE ALL THE SPACE FOR THE RPT TO THE SYSTEM VIA THE      *
.*       FSPACE MACRO-INSTRUCTION.                                    *
.*                                                                    *
.* THE MAXIMUM KEY LENGTH THAT CAN BE SUPPORTED WITH TYPE 8 RADIX     *
.* PARTITION TREES IS 256 BYTES.                                      *
.**********************************************************************
.*                                                                    *
.* WITH TYPE 5 RADIX PARTITION TREES, THE FOLLOWING OPERATIONS ARE    *
.* VALID:                                                             *
.*                                                                    *
.* SRCH: SEARCH FOR A GIVEN KEY AND SET THE CURSOR TO THE             *
.*       CORRESPONDING KEY-ADDRESS PAIR.                              *
.* INS:  INSERT A NEW KEY-ADDRESS PAIR.                               *
.* DEL:  DELETE A KEY-ADDRESS PAIR BASED ON THE CURRENT SETTING OF THE*
.*       CURSOR.                                                      *
.* FTREE:FREE THE SPACE FOR THE TREE BY RELEASING IT TO THE SYSTEM VIA*
.*       THE FREEMAIN MACRO-INSTRUCTION.                              *
.*       NO OTHER OPERATIONS ARE VALID FOR TYPE 5 TREES.              *
.*                                                                    *
.*       THE MAXIMUM SIZE KEY PERMITTED WITH TYPE 5 TREES IS 16 BYTES.*
.*       THE KEY MUST ALWAYS BE PRESENTED AS A SINGLE FIELD FOR THE   *
.*       SRCH AND INS MACRO-INSTRUCTIONS, UNLIKE TYPE 8 TREES, WHERE  *
.*       THE KEY IS PERMITTED TO BE COMPOSED OF A NUMBER OF SCATTERED *
.*       FIELDS.                                                      *
.*                                                                    *
.* THE MAIN REASON FOR HAVING TYPE 5 RADIX PARTITION TREES IS TO ALLOW*
.* SEARCHES TO PROCEED IN A MULTIPROCESSING SITUATION SIMULTANEOUSLY  *
.* WITH AN INSERT OR DELETE IN PROGRESS. THIS IS ACCOMPLISHED WITHOUT *
.* NEEDING TO LOCK THE RPT HEADER.                                    *
.**********************************************************************
.* THE MEANING AND USE OF THE VARIOUS PARAMETERS FOR THE STREE        *
.* MACRO-INSTRUCTION ARE AS FOLLOWS:                                  *
.*                                                                    *
.* TREE: THIS PARAMETER SPECIFIES WHERE TO PUT THE ADDRESS OF THE     *
.*       RADIX PARTITION TREE AFTER IT HAS BEEN ESTABLISHED. IT MAY   *
.*       SPECIFY EITHER A MAIN STORAGE LOCATION OR A GENERAL REGISTER.*
.*                                                                    *
.* TSP:  THIS PARAMETER SPECIFIES THE SUBPOOL TO BE USED FOR          *
.*       ALLOCATING SPACE FOR THR RPT, BOTH INITIALLY AND LATER WHEN  *
.*       SPACE IS NEEDED FOR INSERTIONS.                              *
.*                                                                    *
.* T:    THIS SPECIFIES THE RPT TYPE. IT MAY BE 5 OR 8. IF IT IS      *
.*       ELIDED, THE RPT TYPE IS 8.                                   *
.*                                                                    *
.* FIX:  THIS PARAMETER SPECIFIES WHETHER A PGFIX OPERATION MUST BE   *
.*       PERFORMED ON THE PAGES CONTAINING THE IGARPT01 MODULE. IF    *
.*       "FIX=YES" IS CODED, THEN THE PGFIX OPERATION IS GENERATED AS *
.*       PART OF THE STREE MACRO EXPANSION.                           *
.*                                                                    *
.* K:    THIS SPECIFIES THE DISPLACEMENT AND LENGTH OF THE KEY, AS A  *
.*       DISPLACEMENT-LENGTH PAIR. IT IS CODED AS "K=(D,L)", WHERE D  *
.*       IS THE DISPLACEMENT FROM THE START OF ANY ADDRESS ASSOCIATED *
.*       WITH A KEY AND THE FIRST BYTE OF THE KEY. THE DISPLACEMENT   *
.*       MAY NOT EXCEED 4095 BYTES.                                   *
.*       L IS THE LENGTH OF THE KEYS, IN BYTES. IF VARIABLE LENGTH    *
.*       KEYS ARE USED, THEY ARE TREATED AS IF THEY ARE ALL THE SAME  *
.*       LENGTH, I. E. L BYTES LONG. AS LONG AS THE SET OF KEYS DO NOT*
.*       CONTAIN TWO BYTE STRINGS SUCH THAT ONE IS A PROPER SUBSTRING *
.*       OF THE OTHER ONE, THIS WILL NOT CAUSE A PROBLEM, SINCE THE   *
.*       COMPARISONS DO NOT EXTEND PAST THE POINT OF INEQUALITY OF ANY*
.*       TWO KEYS.                                                    *
.*                                                                    *
.* S:    THIS SPECIFIES THE ADDRESS OF THE SPACE CONTROL AREA IF A    *
.*       SPACE CONTROL AREA IS EXPLICITLY USED TO ALLOCATE AND RELEASE*
.*       THE STORAGE FOR THE RPT. THE SPACE CONTROL ADDRESS IS THE    *
.*       WORD THAT IS RETURNED FROM THE GSPACE MACRO-INSTRUCTION WHEN *
.*       "GSPACE S,..ETC. " IS CODED. SEE THE DESCRIPTION OF THE      *
.*       GSPACE MACRO-INSTRUCTION FOR A MORE COMPLETE DISCUSSION OF   *
.*       THE USE OF THE SPACE CONTROL WORD.                           *
.*                                                                    *
.* C:    THIS IS USED TO SPECIFY A CONDITIONAL OR UNCONDITIONAL       *
.*       ATTEMPT TO ALLOCATE THE SPACE FOR THE RPT INITIALLY. IF "C=C"*
.*       IS CODED, THE REQUEST IS A CONDITIONAL REQUEST. IF "C=U" IS  *
.*       CODED THE REQUEST IS UNCONDITIONAL. IF THE C PARAMETER IS NOT*
.*       CODED, THE REQUEST IS CONDITIONAL.                           *
.*                                                                    *
.* MAP:  THIS PARAMETER IS USED WHEN THE ADDRESSES ASSOCIATED WITH    *
.*       KEYS IN THE RPT ARE NOT ADDRESSES OF AREAS CONTAINING THE    *
.*       CORRESPONDING KEYS. THIS PARAMETER SPECIFIES THE ADDRESS OF A*
.*       SUBROUTINE TO BE EXECUTED WHEN THE RPT MODULE (IGARPT01) MUST*
.*       ACCESS A KEY USING ONE OF THE ADDRESSES FROM A KEY-ADDRESS   *
.*       PAIR. THE ADDRESS SPECIFIED BY THE MAP PARAMETER IS STORED IN*
.*       THE TREE HEADER, AND WHENEVER THE IGARPT01 MODULE MUST ACCESS*
.*       A KEY FROM ONE OF THE ADDRESSES THE ADDRESS ASSOCIATED WITH  *
.*       THE KEY IS PLACED IN REGISTER 1, AND A LINK IS MADE TO THE   *
.*       SUBROUTINE SPECIFIED BY THE MAP PARAMETER. UPON ENTRY TO THIS*
.*       ROUTINE A REGISTER SAVE AREA IS AVAILABLE USING THE ADDRESS  *
.*       IN REGISTER 13. THE MAPPING SUBROUTINE MAY STORE IT'S        *
.*       REGISTERS IN THE SAVE AREA PROVIDED. THE MAPPING SUBROUTINE  *
.*       MUST RESTORE ALL REGISTERS EXCEPT 0, 14, AND 15 TO THEIR     *
.*       CONTENTS UPON ENTRY.                                         *
.*                                                                    *
.*       THE MAPPING SUBROUTINE MUST COMPUTE THE ADDRESS OF THE       *
.*       CORRESPONDING KEY FROM THE ADDRESS FURNISHED IN REGISTER 1,  *
.*       AND LEAVE IT IN REGISTER 0 UPON RETURN TO THE IGARPT01       *
.*       MODULE. IF THE K PARAMETER HAS BEEN CODED "K=(D,L)" IN THE   *
.*       STREE MACRO-INSTRUCTION, THEN THE ADDRESS LEFT IN REGISTER 0 *
.*       MUST BE EQUAL TO THE ADDRESS OF THE CORRECT KEY MINUS THE    *
.*       DISPLACEMENT D, SINCE THE IGARPT01 MODULE WILL ADD THE       *
.*       DISPLACEMENT D TO THE ADDRESS IN REGISTER 0 TO FORM THE      *
.*       ADDRESS OF THE FIRST BYTE OF THE KEY.                        *
.*                                                                    *
.*       A TYPICAL USE OF THIS FEATURE WOULD BE TO STORE RECORDS ON A *
.*       DISK USING A BDAM ORGANIZATION, WHERE THE ADDRESSES          *
.*       ASSOCIATED WITH THE KEYS ARE THE BDAM BLOCK NUMBERS OF THE   *
.*       CORRESPONDING RECORDS. THEN THE MAPPING SUBROUTINE TAKES THE *
.*       BDAM BLOCK NUMBER IN REGISTER 1, READS THE CORRESPONDIN BDAM *
.*       BLOCK, AND PUTS THE MAIN STORAGE ADDRESS OF THE REOCRD READ  *
.*       IN REGISTER 0 PRIOR TO RETURNING TO THE IGARPT01 MODULE. IN  *
.*       THIS WAY THE ADDRESSES ASSOCIATED WITH THE KEYS IN THE RPT   *
.*       CAN BE COMPLETELY ARBITRARY, TO BE RESOLVED WHEN NEEDED BY   *
.*       THE MAPPING SUBROUTINE.                                      *
.*                                                                    *
.*       THE ADDRESS OF THE MAPPING SUBROUTIE CAN BE IN A REGISTER BY *
.*       CODING "MAP=(GPR)", WHERE "GPR" IS THE NAME OR NUMBER OF THE *
.*       REGISTER CONTAINING THE ADDRESS OF THE MAPPING SUBROUTINE. IF*
.*       "MAP=LABEL" IS CODED, THE ADDRESS OF THE MAPPING SUBROUTINE  *
.*       IS AT THE LOCATION "LABEL". A BRANCH TO THE SPECIFIED LABEL  *
.*       SHOULD RESULT IN EXECUTION OF THE MAPPING SUBROUTINE. THE    *
.*       ADDRESS IS FORMED BY EXECUTINNG A LOAD-ADDRESS INSTRUCTION   *
.*       WITH THE SPECIFIED LABEL.                                    *
.*                                                                    *
.*       IF THE MAP PARAMETER IS NOT CODED THERE IS NO ATTEMPT MADE TO*
.*       EXECUTE A MAPPING SUBROUTINE BY THE IGARPT01 MODULE. IN THIS *
.*       CASE EVERY ADDRESS ASSOCIATED WITH A KEY MUST BE THE MAIN    *
.*       STORAGE ADDRESS OF AN AREA CONTAINING THE KEY.               *
.*                                                                    *
.*       THE PARAMETERS IVS, TYPE, TSPACE, RSPACE, RSP, KEYL, OFFSET, *
.*       AND RECL ARE ONLY PRESENT FOR COMPATIBILITY WITH EARLIER     *
.*       VERSIONS OF THE STREE MACRO-INSTRUCTION, AND SHOULD NOT BE   *
.*       USED, AS THEY ARE NOT SUPPORTED IN ANY CONTEXT OTHER THAN THE*
.*       ONE THEY WERE USED IN ORIGINALLY.                            *
         GBLA  &IGALEFT(256)   LEFT EDGES FOR BINARY TREE PARSE.
         GBLA  &IGARGHT(256)   RIGHT EDGES FOR BINARY TREE PARSE.
         GBLB  &IGARL(256)     LEFT/RIGHT FLAG BITS FOR BINARY PARSE.
         GBLB  &IGAIS(256)     INNER/SINK BIT FLAGS FOR PARSE TREE.
         GBLB  &IGAOKAY        1 IF PARSE DISCOVERED BAD SYNTAX.
         GBLA  &IGAX     TRIPLE FOR SCANNING OPERATION.
         GBLA  &IGAY     XX
         GBLA  &IGAZ     XX
         GBLC  &IGASTRE
         GBLB  &IGALONE  ON TO RUN THE RPT PROGRAMS STANDALONE.
         GBLC  &IGARPT#  THE RADIX PARTITION TREE TYPE.
         GBLB  &IGAPGM  ON IF THIS IS IGARPT01.
         LCLC  &X        LOCAL CHARACTER STRING.
         LCLA  &N        LOCAL VARIABLE.
         LCLA  &I        LOCAL INDEX VARIABLE.
         LCLA  &J        LOCAL VARIABLE.
.*A000000                                                        Y02147
.**********************************************************************
.* CHECK TO SEE IF ANY OF THE OLD PARAMETERS OF THE STREE MACRO ARE   *
.* SPECIFIED, AND IF THEY ARE TRANSLATE THEM TO THE NEW PARAMETERS VIA*
.* THE MACRO RECURSION TECHNIQUE.                                     *
.**********************************************************************
         AIF   ((K'&KEYL EQ 0)AND(K'&OFFSET EQ 0)).NEW  SEE IF THEY ARE*
                         BOTH NOT SPECIFIED.
&TAG     STREE &TREE,TSP=&TSP,T=&T,TYPE=&TYPE,FIX=&FIX,IVS=&IVS,S=&S,  *
               MAP=&MAP,K=(&OFFSET,&KEYL)
         AGO   .FIN      ALL DONE WITH THE MAPPING FROM THE OLD TO THE *
                         NEW FORMATS, NOW EXIT FROM THE STREE MACRO.
.NEW     ANOP
.**********************************************************************
.* CHECK THE TYPE AND T PARAMETERS TO SEE IF A VALID RPT TYPE IS      *
.* SPECIFIED. IF NEITHER IS SPECIFIED, ASSUME IT IS TYPE 8 RPT. THE   *
.* TYPE IS PUT INTO THE GLOBAL VARIABLE &IGARPT# AT THE END OF THE    *
.* TYPE CHECKING SECTION.                                             *
.**********************************************************************
.RPT#    AIF   (K'&T EQ 0).RPT#TMT  SEE IF THE T PARAMETER IS CODED.
         AIF   (K'&TYPE EQ 0).RPT#TCK  USE THE T PARAMETER IF IT IS    *
                         CODED AND THE TYPE PARAMETER IS NOT CODED.
.**********************************************************************
.* BOTH THE T AND TYPE PARAMETERS ARE CODED; SEE IF THEY ARE THE SAME,*
.* AND IF THEY ARE NOT THEN USE T.                                    *
.**********************************************************************
         AIF   ('&T' EQ '&TYPE').RPT#TCK  IF THEY ARE THE SAME THEN USE*
                         T.
         MNOTE 4,'TYPE CONFLICT, ONLY T OR TYPE SHOULD BE CODED.'
.RPT#TCK ANOP
&IGARPT# SETC  '&T'      GET THE RPT TYPE.
         AGO   .RPT#CHK  GO TO CHECK THE VALIDITY OF THE RADIX         *
                         PARTITION TREE TYPE.
.**********************************************************************
.* THE T PARAMETER IS NOT CODED, SEE IF THE TYPE PARAMETER IS CODED.  *
.**********************************************************************
.RPT#TMT AIF   (K'&TYPE EQ 0).RPT#8  IF BOTH ARE LEFT OUT USE TYPE 8   *
                         RPT.
&IGARPT# SETC  '&TYPE'   SET THE TYPE TO THE TYPE THAT IS SPECIFIED BY *
                         THE TYPE PARAMETER.
         AGO   .RPT#CHK  GO CHECK IT FOR VALIDITY.
.RPT#8   ANOP
&IGARPT# SETC  '8'       SET THE RPT TYPE TO 8.
.RPT#CHK AIF   (('&IGARPT#' EQ '8')OR('&IGARPT#' EQ '5')OR('&IGARPT#' E*
               Q '4')).RPT#FIN
         MNOTE 4,'INVALID RPT TYPE, TYPE 8 ASSUMED.'
&IGARPT# SETC  '8'       USE TYPE 8 RPT.
.RPT#FIN ANOP
      RPTDSECT T=&IGARPT#,DS=NO
.**********************************************************************
.* GET THE ADDRESS OF THE MODULE IGARPT01 IN REGISTER 14 FOR THE LINK *
.* TO THE APPROPRIATE ROUTINE TO SET UP THE RPT.                      *
.**********************************************************************
         AIF   (K'&S NE 0).USE@S  SEE IF THE SPACE CONTROL ADDRESS IS  *
                         CODED; BECAUSE IF IT IS THE ADDRESS CAN BE    *
                         LOADED DIRECTLY FROM IT.
         AIF   (&IGALONE).LOAD  IF THIS IS THE STAND-ALONE CASE USE THE*
               LOAD MACRO TO LOAD THE MODULE IGARPT01.
&TAG   RPTDSECT GEN=(CVTRPT,14)  GET THE ADDRESS FROM THE CVT.
         AGO   .LOADED   THE ADDRESS IS IN GPR 14.
.LOAD    LOAD  EP=IGARPT01  LOAD THE MODULE.
         LR    14,0
         AGO   .LOADED   ALL DONE GETTING THE ADDRESS IN R14.
.USE@S   AIF   ('&S'(1,1) EQ '(').USESGPR  SEE IF THE SPACE CONTROL    *
               ADDRESS IS IN A GENERAL PURPOSE REGISTER.
         L     15,&S     LOAD THE ADDRESS OF THE SPACE CONTROL AREA.
         L     14,0(,15) ADDRESS OF IGARPT01.
         AGO   .LOADED   ALL LOADED NOW.
.USESGPR AIF   ('&S' EQ '(15').LOAD14  SEE IF IT IS ALREADY IN R15.
         LR    15,&S(1)  SPACE CONTROL ADDRESS.
.LOAD14  L     14,0(,15)  ADDRESS OF IGARPT01.
.LOADED  ANOP
.**********************************************************************
.* CHECK TO SEE IF A PGFIX OPERATION MUST BE DONE ON THE RPT MODULE.  *
.**********************************************************************
         AIF   (K'&FIX EQ 0).NOFIX  GO AROUND THE PGFIX IF IT IS NOT   *
               CODED IN THE STREE MACRO-INSTRUCTION.
         AIF   (('&FIX'(1,1) NE 'Y')AND('&FIX'(1,1) NE '1')).NOFIX
         STM   14,3,12(13) SAVE REGS.
         LR    2,14
         LA    3,(3*X'C')(13) ECB ADDRESS.
         MVI   0(3),X'00'
         PGFIX R,A=(2),ECB=(3)
         WAIT  ECB=(3)
         LM    14,12,12(13)  RESTORE REGISTERS.
.NOFIX   ANOP
.**********************************************************************
.* NOW PUT THE STREE PARAMETERS IN REGISTERS 0, 1, AND 15, AND LINK TO*
.* THE MODULE IGARPT01 TO SET UP THE RADIX PARTITION TREE OF THE      *
.* INDICATED TYPE.                                                    *
.* THE REGISTER CONTENTS UPON LINKING TO THE MODULE IGARPT01 ARE:     *
.* R0    KEYI, TYPE, AND KEY LENGTH. THE KEY INDEX IS A HALFWORD      *
.*       OFFSET, THE TREE TYPE IS A 7-BIT #, AND THE KEY LENGTH IS A  *
.*       9-BIT #.                                                     *
.* R1    THE ADDRESS OF THE MAPPING SUBROUTINE (IF THERE IS A MAPPING *
.*       SUBROUTINE).                                                 *
.* 14    THE ADDRESS OF THE MODULE IGARPT01.                          *
.* R15   TSP,S - THE TREE SUBPOOL AND THE ADDRESS OF THE SPACE CONTROL*
.*       AREA (IF THERE IS ONE).                                      *
.**********************************************************************
         AIF   (K'&TSP EQ 0).SPZERO  SEE IF THE SUBPOOL IS NOT CODED.
         AIF   ('&TSP' EQ '0').SPZERO  SEE IF SUBPOOL ZERO IS          *
                         EXPLICITLY CODED.
         AIF   (K'&S EQ 0).SELIDED  SEE IF THE SPACE CONTROL ADDRESS IS*
                         NOT CODED.
         AIF   ('&S'(1,1) EQ '(').SINGPR  SEE IF THE SPACE CONTROL     *
                         ADDRESS IS IN A GPR.
         LA    15,0(,15)
.S15AL   AL    15,=AL1(&TSP,0,0,0)  RPT SUBPOOL.
         AGO   .GOT15    GOT REGISTER 15 SET UP NOW.
.SINGPR  LA    15,0(,&S(1))  SPACE CONTROL ADDRESS.
         AGO   .S15AL    NOW GO ADD IN THE SUBPOOL NUMBER.
.SELIDED LA    15,&TSP   RPT SUBPOOL.
         SLL   15,24
         AGO   .GOT15    GOT REGISTER 15 ALL SET UP NOW.
.SPZERO  AIF   (K'&S EQ 0).NOSORSP  SEE IF THERE IS NEITHER A SPACE    *
                         CONTROL ADDRESS NOR A SUBPOOL CODED.
         LA    15,0(,15)
         AGO   .GOT15    ALL DONE SETTING UP REGISTER 15 NOW.
.NOSORSP SLR   15,15     SUBPOOL ZERO.
.GOT15   ANOP
.**********************************************************************
.* NOW PUT THE KEY INDEX, THE RPT TYPE #, AND THE KEY LENGTH IN       *
.* REGISTER 0.                                                        *
.**********************************************************************
         AIF   (K'&K NE 0).KNOTMT  SEE IF THE K PARAMETER IS CODED.
.KMNOTE  MNOTE 12,'"K=(DISPLACEMENT,KEY LENGTH)" MUST BE CODED.'
         AGO   .FIN      CAN'T DO ANY MORE WITH THIS, EXIT.
.KNOTMT  AIF   (N'&K EQ 2).KHAS2  SEE IF THERE ARE EXACTLY 2 OPERANDS  *
                         IN THE K PARAMETER.
         AIF   (N'&K NE 1).KMNOTE  SEE IF THERE IS JUST ONE.
&X       SETC  '&K(1)'(1,1)  GET THE FIRST CHARACTER OF THE FIRST      *
                         ELEMENT IN THE K PARAMETER.
         AIF   ((('&X' EQ '0')OR('&X' EQ '1')OR('&X' EQ '2')OR('&X' EQ *
               '3')OR('&X' EQ '4')OR('&X' EQ '5')OR('&X' EQ '6')OR('&X'*
                EQ '7')OR('&X' EQ '8')OR('&X' EQ '9'))).K1#
         LA    0,&K
         LH    1,*-2     OFFSET TO KEY + BASE REGISTER.
         N     1,=XL4'00000FFF'  ELIMINATE BASE REGISTER.
         SLL   1,7
         LA    0,&IGARPT#.(,1)  RPT TYPE.
&X       SETC  'L'''
         LA    1,&X&K
         SLL   0,16
         ALR   0,1
         AGO   .GETMAP   GO SEE IF THE MAP IS CODED.
.K1#     L     0,=AL4(B'1000000000'*&IGARPT#+&K)  RPT# &KL.
         MNOTE 0,'DISPLACEMENT TO KEY ASSUMED ZERO.'
         AGO   .GETMAP   ALL DONE WITH K NOW.
.KHAS2   ANOP
         AIF   (K'&K(1) EQ 0).KDSP0  CHECK FOR A ZERO DISPLACEMENT.
         AIF   ('&K(1)' EQ '0').KDSP0  SEE IF THE ZERO DISPLACEMENT IS *
                         EXPLICITLY CODED.
         LA    1,&K(1)   DISPLACEMENT TO THE KEY.
         SLL   1,7
         LA    0,&IGARPT#.(,1)  RPT TYPE.
         AGO   .GOTKDSP  ALL FINISHED SETTING UP DISPLACEMENT AND RPT  *
                         TYPE NOW.
.KDSP0   LA    0,&IGARPT#  RPT TYPE.
.GOTKDSP SLL   0,9
         LA    1,&K(2)   KEY LENGTH IN BYTES.
         ALR   0,1
.GETMAP  ANOP
         AIF   (K'&MAP EQ 0).NOMAP  SEE IF THE ADDRESS OF THE MAPPING  *
                         SUBROUTINE IS SPECIFIED.
         AIF   ('&MAP' EQ '0').NOMAP  SEE IF IT IS EXPLICITLY CODED AS *
                         ZERO.
         AIF   ('&MAP'(1,1) EQ '(').MAPGPR  SEE IF THE ADDRESS OF THE  *
                         MAPPING SUBROUTINE IS IN A GENERAL REGISTER.
         L     1,=AL4(&MAP)  ADDRESS OF MAPPING SUBROUTINE.
         AGO   .GOTMAP   ALL FINISHED SETTING UP REGISTER 1 NOW.
.MAPGPR  LR    1,&MAP(1)  ADDRESS OF MAPPING SUBROUTINE.
         AGO   .GOTMAP   ALL DONE WITH R1 NOW.
.NOMAP   SLR   1,1       INDICATE NO MAPPING SUBROUTINE PRESENT.
.GOTMAP  ANOP
.**********************************************************************
.* CHECK THE INNER VERTEX SIZE FOR 8 OR 12 BYTES, AND SET BIT 0 OF    *
.* REGISTER R1 TO 0 IF IT IS 8 BYTES, OR TO 1 IF IT IS 12 BYTES. IF IT*
.* IS NEITHER 8 NOR 12 BYTES GENERATE THE MNOTE.                      *
.**********************************************************************
         AIF   ('&IGARPT#' NE '8').SKIPIVS  SEE IF THIS IS A TYPE 8    *
                         RPT.
         AIF   (K'&IVS EQ 0).IVSIS8  THE DEFAULT INNER VERTEX SIZE IS 8*
                         BYTES.
         AIF   ('&IVS' EQ '8').IVSIS8  SEE IF THE INNER VERTEX SIZE IS *
                         8 BYTES.
         AIF   ('&IVS' EQ '12').IVSIS12  SEE IF THE INNER VERTEX SIZE  *
                         IS 12 BYTES.
         MNOTE 12,'INVALID INNER VERTEX SIZE, CAN ONLY BE 8 OR 12.'
         AGO   .IVSFIN   GO ON AND CHECK OTHER THINGS.
.IVSIS8  LA    1,0(,1)   SET BIT 0 TO 0 FOR IVS=8.
         AGO   .IVSFIN   ALL DONE SETTING UP R1 NOW.
.IVSIS12 O     1,=XL4'80000000'  INDICATE IVS=12.
.IVSFIN  ANOP
.SKIPIVS ANOP
.**********************************************************************
.* LINK TO THE STREE SUBROUTINE IN THE MODULE IGARPT01. IF THE C      *
.* PARAMETER IS CODED "C=Y", "C=1", OR "C=" THEN A BAL IS GENERATED TO*
.* INDICATE CONDITIONAL GSPACE/GETMAIN OPERATIONS. IF "C=N" OR "C=0"  *
.* IS CODED THE REQUEST IS UNCONDITIONAL, AND A BALR IS GENERATED FOR *
.* THE LINK TO THE STREE ROUTINE IN THE MODULE IGARPT01.              *
.**********************************************************************
         AIF   (K'&C EQ 0).LINKC  SEE IF THE C PARAMETER IS NOT CODED.
         AIF   ('&C' EQ 'C').LINKC  SEE IF IT A CONDITIONAL REQUEST.
         AIF   (('&C'(1,1) NE 'Y')AND('&C' NE '1')).LINKU  SEE IF THE  *
                         REQUEST IS UNCONDITIONAL.
.LINKC   BAL   14,&IGASTRE.(,14)  INDICATE CONDITIONAL GSPACE/GETMAIN.
         AGO   .TREE     ALL DONE NOW, EXCEPT FOR THE REGISTER TO      *
                         CONTAIN THE TREE ADDRESS.
.LINKU   LA    14,&IGASTRE.(,14)
         BALR  14,14     INDICATE UNCONDITIONAL GSPACE/GETMAIN.
.TREE    ANOP
         AIF   (K'&TREE EQ 0).STR5R1   GO IF IT'S TO BE LEFT IN R1.
         AIF   ('&TREE'(1,1) NE '(').STR5L   GO IF IT'S NOT A REGISTER.
         AIF   ('&TREE' EQ '(1)').STR5R1  GO IF IT'S ALREADY THERE.
         LR    &TREE(1),1      SAVE THE TREE ADDRESS.
         AGO   .STR5R1         MERGE.
.STR5L   ST    1,&TREE(1)  STORE THE TREE ADDRESS.
.STR5R1  ANOP
         AIF   ('&IGARPT#' NE '5').END  SEE IF THIS IS A TYPE 5 TREE.
      RPTDSECT T=5,DS=YES  GENERATE THE DSECT FOR TYPE 5 TREES.
.END     ANOP
.FIN     ANOP
         MEND
