         MACRO
&ID      XSTBL &DUMMY,&TESTRAN=NO,&DIAG=NO,&LEVEL=1
         GBLC  &COMPNM                  COMPONENT NAME
         LCLC  &NM                      MODULE NAME
         JHEAD 'SYMBOL TABLE SUBROUTINES',                             ,
               PHASEID=&ID,LEVEL=&LEVEL
&NM      SETC  '&COMPNM&ID'
*TITLE-  SYMBOL TABLE ROUTINES                                        *
*                                                                     *
*FUNCTION/OPERATIONS-                                                 *
*        THESE ROUTINES MAINTAIN THE SYMBOL TABLE IN THE ASSEMBLER    *
*   SYMBOL RESOLUTION PHASE.  THE FORMAT OF THE SYMBOL TABLE AND      *
*   SYMBOL TABLE ENTRIES ARE DESCRIBED IN THE PROLOGUE OF THIS        *
*   ASSEMBLY.  THE 'STBLOFLO' BIT OF 'SWTCH1' IS SET TO '1' WHEN NO   *
*   MORE SPACE IS AVAILABLE FOR NEW ENTRIES.   ENTRIES TO THE SYMBOL  *
*   TABLE ARE HANDELED BY ROUTINE 'ENTER'.  ROUTINE 'FIND' LOOKS UP   *
*   AN EXISTING ENTRY IN THE SYMBOL TABLE.  ROUTINE 'SUBSET' IS       *
*   CALLED AT THE END OF SUBSTITUTION MODE TO SUBSET THE SYMBOL       *
*   TABLE.                                                            *
*                                                                     *
*ENTRY POINT-                                                         *
         ENTRY &NM.01                                                 *
*                                                                     *
*INPUT-                                                               *
*        REGISTERS-      R10 IS AN ADDRESS OF THE ARGUEMENT RECORD.   *
*                                                                     *
*OUTPUT-                                                              *
*        REGISTERS-      R14 IS THE POINTER TO THE SYMBOL TABLE ENTRY.*
*                                                                     *
*        PARAMETERS-                                                  *
*             STBLOFLO-  A SWITCH IN STORAGE, WHEN SET TO ONE,        *
*                        INDICATES THAT THE SYMBOL TABLE IS FULL      *
*                                                                     *
*EXTERNAL ROUTINES-                                                   *
*        NONE                                                         *
*                                                                     *
*EXITS, NORMAL-                                                       *
*        RETURN TO THE CALLER                                         *
*                                                                     *
*EXITS, ERROR-                                                        *
*        RETURN TO THE CALLER                                         *
*                                                                     *
*TABLES/WORK AREAS-                                                   *
*        HASHTBL-  CONTAINS THE ADDRESS OF A HASH TABLE OF CONTIGUOUS *
*   FULLWORDS INITIALIZED TO ZEROS.                                   *
*        SYMDIMEN- 4 CONTIGUOUS FULLWORDS CONTAINING THE ADDRESS OF   *
*   THE LATEST ENTRY, THE LENGTH OF AN ENTRY IN COMPLEMENT FORM, AND  *
*   THE ADDRESS AVAILABLE FOR THE LAST ENTRY, RESPECTIVELY.           *
*                                                                     *
*ATTRIBUTES-                                                          *
*        REFRESHABLE                                                  *
*                                                                     *
*NOTES-                                                               *
*                                                                     *
         EJECT
         COPY  JCOMMON
         EJECT
         COPY  ICOMMON
         EJECT
&NM.00   CSECT
* VS1 REL 2.6 CHANGES
*C644000                                                        OX00106
         JMODID
&NM.01   CONTENTS
         USING &NM.01,R8                BASE REGISTER
         EJECT
ENTER    BALR  R14,R7                   SAVE REGISTERS IN STACK
         LR    R8,R12                   SET UP BASE REGISTER
         MVC   XFLGA(D20),XFLGA-XWORK(R10)   SAVE PARAMETERS
         BALR  R9,R12                   LOOKUP IN SYMBOL TABLE
         BE    ENTER9                   ALREADY IN SYMBOL TABLE
         LM    R2,R5,SYMDIMEN           GET SYMBOL TABLE POINTERS
         BXH   R3,R4,ENTER1             POINT TO NEXT AVAILABLE SPACE
         SET   STBLOFLO,ON              SYMBOL TABLE FULL SIGN
ENTER1   TM    XFLGB,ESDNRSW            SEE IF ESD ITEM
         BZ    ENTER5                   NO, JUST A COMMON ENTRY
         LR    R5,R3                    COMPARAND REGISTER
         BXLE  R2,R4,ENTER5             SPACE ABOVE THE CROWD
         STM   R2,R3,SYMDIMEN           SAVE NEW POINTERS
         MVC   D0(D20,R3),D0(R2)        ROLL OUT
         CR    R14,R2                   SEE IF SAME ONE AS LAST
         BNE   ENTER2                   NOPE
         LR    R11,R2                   PASS POINTER
         B     ENTER4                   SKIP
ENTER2   CR    R11,R2                   SEE IF THIS ONE POINTS TO IT
         BE    ENTER3                   IT SURE DOES
         LR    R3,R11                   PASS POINTER
ENTER3   LR    R4,R14                   SAVE THIS POINTER
         LR    R10,R2                   AND THIS
         AH    R10,=H'-8'               FAKE THIS ONE
         BALR  R9,R12                   LOOKUP THIS ONE IN SYMBOL TABLE
         ST    R4,D0(,R2)               CHAIN POINTER
         MVC   D1(D3,R3),SYMDIMEN+D1    CHAIN THEM TOGETHER THE NEW WAY
ENTER4   MVC   D1(D3,R11),SYMDIMEN+D5   CONNECT THIS TO THE CHAIN
         LR    R14,R2                   MAKE NEW ALSO CURRENT
         B     ENTER6                   SKIP
ENTER5   STM   R2,R3,SYMDIMEN           SAVE NEW POINTERS
         MVC   D1(D3,R11),SYMDIMEN+D5   CHAIN POINTER
         ST    R14,D0(,R3)              CHAIN POINTER
         LR    R14,R3                   CURRENT ENTRY POINTER
ENTER6   SR    R10,R10                  DEFINE EXIT
ENTER7   MVC   SNAME(D10),XNAME         NAME AND LENGTH ATTRIBUTE
ENTER8   MVC   SESDI(D6),XESDI          ESDID AND VALUE
         MVC   SFLGS,XFLGB              FLAGS
         LTR   R10,R10                  SEE IF ALL DONE
         BZ    EXIT                     FINIS
         TM    XFLGB,ESDNRSW            SEE IF VALID ENTRY
         BO    ENTRY88                  NOT VALID ENTRY
         TM    XESDI,CSW+DSW+ESW        SEE IF INVALID ENTRY    OX00106
         BNZ   ENTRY88                  NO GOOD ENTRY
         LH    R0,XESDI                 SEE IF ABSOLUTE
         LTR   R0,R0                    SEE IF ABSOLUTE
         BE    EXIT                     ILLEGAL ENTRY IF ABSOLUTE
         SET   XENTRY,ON                INDICATE VALID ENTRY
         LR    R5,R14                   SAVE POINTER
         GOTO  GETESD                   GET ESD ENTRY
         MVI   ETYPE-EITEM(R10),ETYPELD      NEW TYPE
         MVC   EESDI-EITEM(D6,R10),XESDI     ESDID AND VALUE
         MVC   ENAME-EITEM(D8,R10),XNAME     NAME
         LR    R14,R5                   RESTORE POINTER
ENTRY88  SR    R10,R10                  SET CONDITION CODE
         B     EXIT                     AND RETURN
ENTER9   GOIF  ENTRYSW,ON=ENTER10       SEE IF ENTRY ITEM
         TM    *,BIT0                   INDICATE PREVIOUSLY DEFINED
         B     EXIT                     RETURN
ENTER10  LH    R10,SLNGQ                GET ESD ASCENDSION NUMBER
         B     ENTER7                   SET LENGTH ATTRIBUTE
         SPACE
         DROP  R8                       CHANGE BASE
         USING &NM.01,R12               BASE REGISTER
FIND     LM    R14,R15,XNAME-XWORK(R10) GET NAME
         MR    R14,R14                  HASH
         XR    R14,R15                  FOLD
         SRL   R14,D3                   X
         N     R14,=F'252,-4'           MASK
         LA    R14,HASHTBL(R14)         POINT TO BEGINNING OF CHAIN
FIND2    LR    R11,R14                  CLIMB
         L     R14,SCHPT-SCHPT(,R11)    FIND NEXT ENTRY
         LA    R14,SCHPT                ZERO FLAG BYTE
         LTR   R14,R14                  SEE IF END-OF-CHAIN
         BZ    FIND3                    END-OF-CHAIN, NOT FOUND
         CLC   SNAME,XNAME-XWORK(R10)   SEE IF FOUND
         BL    FIND2                    ENTRY NOT REACHED
         BCR   D8,R9                    RETURN FOUND
FIND3    TM    *,BIT0                   SET NOT FOUND CONDITION
         BCR   D1,R9                    RETURN NOT FOUND
         SPACE
SUBSET   BZR   R9                       EXIT IF SUBSETTED THIS ROUND
         SET   STBLOFLO,OFF             INDICATE SUBSETTED
         L     R0,SYMDIMEN              GET
         LM    R10,R11,=F'252,-4'       HASH TABLE INDEX
SUBSET1  LA    R15,HASHTBL(R10)         PASS ONE END OF THE CHAIN
         BAL   R1,SUBSET3               SUBSET ONE CHAIN AT A TIME
         BXH   R10,R11,SUBSET1          JUGGLE INDEX
         ST    R0,SYMDIMEN+D4           NEWLY RECLAIMED AREA POINTER
         BR    R9                       RETURN
SUBSET2  MVC   D1(D3,R15),D1(R14)       YOU'RE A LOSER
SUBSET3  L     R14,D0(,R15)             GET NEXT ENTRY POINTER
         LA    R14,D0(,R14)             ISOLATE ADDRESS PORTION
         LTR   R14,R14                  SEE IF AT END-OF-CHAIN
         BCR   D8,R1                    RETURN IF AT END
         CR    R14,R0                   IS THIS WORTHY
         BL    SUBSET2                  BAD, ON THE WRONG SIDE OF TRACK
         LR    R15,R14                  TUCK ON THE CHAIN
         B     SUBSET3                  CLIMB
         MEND
