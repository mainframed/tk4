*        %GOTO STKEL1;                 /*
         MACRO
         IHASTKE
*                    */
*%STKEL1 : ;
*/********************************************************************/
*/*                                                                  */
*/*     PCLINK STACK ELEMENT (STKE)                                  */
*/*                                                                  */
*/*  MACRO NAME = IHASTKE                                            */
*/*                                                                  */
*/*  MACDATE = 01/04/80                                              */
*/*                                                                  */
*/*  COPYRIGHT =                                                     */
*/*      5740-XYN COPYRIGHT IBM CORP. 1980,                          */
*/*      LICENSED MATERIAL-PROGRAM, PROPERTY OF IBM,                 */
*/*      REFER TO COPYRIGHT INSTRUCTIONS FORM NUMBER                 */
*/*      G120-2083.                                                  */
*/*                                                                  */
*/*  STATUS =                                                        */
*/*      OS/VS2 JBB1226                                              */
*/*                                                                  */
*/*  FUNCTION =                                                      */
*/*      MAPS THE LOCAL AND GLOBAL STACK ELEMENTS, WHICH FORM THE    */
*/*      CONTROL BLOCKS FOR THE PCLINK STACK/UNSTACK/EXTRACT         */
*/*      SERVICES.                                                   */
*/*                                                                  */
*/*  METHOD OF ACCESS =                                              */
*/*      BAL  - A DSECT IS PRODUCED, PERFORM USING ON STKE.          */
*/*      PL/S - STKE IS DECLARED AS A BASED STRUCTURE.               */
*/*             STKEPTR MUST BE DECLARED.                            */
*/*                                                                  */
*/*  CREATED BY =                                                    */
*/*      THE PCLINK STACK ROUTINE (IEAVXSTK) OBTAINS STORAGE FOR     */
*/*      STKES FROM THE LOCAL OR GLOBAL POOLS, FILLS IN THE DATA,    */
*/*      AND CHAINS THE STKES ON THE APPROPRIATE STKE QUEUE.         */
*/*                                                                  */
*/*  DELETED BY =                                                    */
*/*      THE PCLINK UNSTACK ROUTINE (IEAVXSTK) UNCHAINS THE STKES    */
*/*      FROM THE CURRENT STKE QUEUE AND RETURNS THEIR STORAGE TO    */
*/*      THE LOCAL OR GLOBAL POOLS.                                  */
*/*      THE LOCAL POOLS ARE DELETED AT MEMORY TERMINATION TIME WHEN */
*/*      THE LSQA IS FREED.                                          */
*/*      THE GLOBAL POOLS (IN SP 239) ARE NEVER DELETED.             */
*/*                                                                  */
*/*  POINTED TO BY =                                                 */
*/*      WHEN THE STKE IS ON THE FREE QUEUE, THE ORIGIN IS STKHAEP   */
*/*      AND THE LINK FIELD IS STKEPREV.                             */
*/*      WHEN THE STKE IS IN USE, THE ORIGIN IS PSASTKE OR XSBSTKE   */
*/*      AND THE LINK FIELD IS STKEPREV.                             */
*/*                                                                  */
*/*  SERIALIZATION =                                                 */
*/*      A STACK ELEMENT IS OBTAINED FROM THE FREE QUEUE VIA COMPARE */
*/*      DOUBLE AND SWAP LOGIC.                                      */
*/*      LOCAL POOL EXPANSION IS SERIALIZED VIA THE CML LOCK.        */
*/*      GLOBAL POOL EXPANSION IS SERIALIZED VIA THE SALLOC LOCK.    */
*/*                                                                  */
*/*  CHANGE ACTIVITY = THIS MACRO IS NEW FOR OS/VS2 JBB1226.         */
*/*                                                                  */
*/********************************************************************/
*/*A000000-999999                                            @G388PXZ*/
*        %GOTO STKEL2;                 /*
STKX     DSECT                     PREFIX TO STACK ELEMENT POOL EXTENT
STKXTNT  DS    F                   POINTER TO PREVIOUS STKX OR 0
STKXSPAL DS    0F
STKXSPID DS    X                   SUBPOOL OF THIS EXTENT
STKXPLEN DS    FL3                 SIZE OBTAINED FOR THIS EXTENT
STKXLEN  EQU   *-STKX              LENGTH OF STKX
STKE     DSECT                     BEGINNING OF STACK ELEMENT
STKESTKE DC    CL4'STKE'           STKE ACRONYM
STKEHEAD DS    A                   ADDRESS OF POOL HEADER
STKEINFO DS    0D                  STACK INFORMATION FOR PREVIOUS
*                                  STKE (PSASTKE OR XSBSTKE HAS THE
*                                  CORRESPONDING INFORMATION FOR
*                                  THE TOP STKE FOR AN RB OR SRB.)
STKEPTKN DS    H                   TOKEN OF PRIOR ELEMENT
STKEPASD DS    H                   ASID OF PRIOR ELEMENT
STKEPREV DS    A                   ADDRESS OF PRIOR ELEMENT (IF IN
*                                  USE) OR NEXT FREE ELEMENT (IF
*                                  NOT IN USE)
STKEPGMM DS    C                   PROGRAM MASK FROM CALLER'S PSW
STKERSV1 DS    C                   RESERVED
STKEASID DS    H                   ASID OF POOL
STKESA   DS    A                   PREVIOUS SAVE AREA
STKERET  DS    A                   RETURN ADDRESS
STKEPR15 DS    F                   PARAMETER REGISTER 15
STKEPRM0 DS    F                   PARAMETER REGISTER 0
STKEPRM1 DS    F                   PARAMETER REGISTER 1
STKEKEY  DS    0F
STKEREG2 DS    CL3                 BITS 8-31 OF CALLER'S REG 2
STKEKEY2 DS    C                   CALLER'S PSW KEY IN BITS 0-3
STKEKMSK DS    BL2                 CALLER'S PSW KEY MASK (PKM)
STKECASD DS    H                   PASID OF CALLER
STKELPTR DS    A                   LATENT PARAMETER POINTER
STKEEPA  DS    A                   ENTRY POINT ADDRESS
STKEEND  DS    0D                  END OF STKE
STKELEN  EQU   STKEEND-STKE        LENGTH OF STACK ELEMENT
         MEND  ,    */
*%STKEL2 : ;
*DCL
*     1 STKX BASED(STKXPTR),           /* PREFIX TO STACK ELEMENT
*                                         POOL EXTENT                */
*       3 STKXTNT PTR(31),             /* PREVIOUS STKX OR 0         */
*       3 STKXSPAL FIXED(32),
*         5 STKXSPID FIXED(8),         /* SUBPOOL OF THIS EXTENT     */
*         5 STKXPLEN FIXED(24);        /* SIZE OBTAINED FOR THIS
*                                         EXTENT                     */
*DCL
*    1 STKE BASED(STKEPTR) BDY(DWORD), /* BEGINNING OF STACK ELEMENT */
*      3 STKESTKE CHAR(4),             /* STKE ACRONYM               */
*      3 STKEHEAD PTR(31),             /* ADDRESS OF POOL HEADER     */
*      3 STKEINFO CHAR(8) BDY(DWORD),  /* STACK INFORMATION FOR
*                                         PREVIOUS STKE (PSASTKE OR
*                                         XSBSTKE HAS THE CORRESPONDING
*                                         INFORMATION FOR THE TOP STKE
*                                         FOR AN RB OR SRB.)         */
*        5 STKEPTKN FIXED(16) BDY(WORD), /* TOKEN OF PRIOR ELEMENT   */
*        5 STKEPASD BIT(16),           /* ASID OF PRIOR ELEMENT      */
*        5 STKEPREV PTR(31),           /* ADDRESS OF PRIOR ELEMENT (IF
*                                         IN USE) OR NEXT FREE ELEMENT
*                                         (IF NOT IN USE)            */
*      3 STKEPGMM BIT(8) BDY(WORD),    /* PROGRAM MASK FROM PSW OF
*                                         CALLER                     */
*      3 STKERSV1 BIT(8),              /* RESERVED                   */
*      3 STKEASID BIT(16),             /* ASID OF POOL               */
*      3 STKESA   PTR(31),             /* PREVIOUS SAVE AREA         */
*      3 STKERET  PTR(31),             /* RETURN ADDRESS             */
*      3 STKEPR15 FIXED(32),           /* PARAMETER REGISTER 15      */
*      3 STKEPRM0 FIXED(32),           /* PARAMETER REGISTER 0       */
*      3 STKEPRM1 FIXED(32),           /* PARAMETER REGISTER 1       */
*      3 STKEKEY  BIT(32) BDY(WORD),   /*                            */
*        5 STKEREG2 BIT(24),           /* BITS 8-31 OF REG 2 OF
*                                         CALLER                     */
*        5 STKEKEY2 BIT(8),            /* PSW KEY OF CALLER IN BITS
*                                         0-3                        */
*      3 STKEKMSK BIT(16),             /* PSW KEY MASK (PKM) OF
*                                         CALLER                     */
*      3 STKECASD BIT(16),             /* PASID OF CALLER            */
*      3 STKELPTR PTR(31),             /* LATENT PARAMETER POINTER   */
*      3 STKEEPA  PTR(31),             /* ENTRY POINT ADDRESS        */
*      3 STKEEND  CHAR(0) BDY(DWORD);  /* END OF STKE                */
