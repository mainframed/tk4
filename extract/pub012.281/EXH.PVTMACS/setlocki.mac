          MACRO
&NAME     SETLOCKI &REQ,&TYPE=,&ADDR=,&RELATED=,&MODE=UNCOND,          X
               &DISABLE,&ERRET=,&SYS=MP,&ASCB=
.**************************************************************@G50EPXS
.*01*  COPYRIGHT =                                             @G50EPXS
.*        5740-XYN COPYRIGHT IBM CORP 1977, 1981,                  @L1C
.*        LICENSED MATERIAL-PROGRAM, PROPERTY OF IBM,              @L1C
.*        REFER TO COPYRIGHT INSTRUCTIONS FORM NUMBER          @G50EPXS
.*        G120-2083.                                           @G50EPXS
.*                                                             @G381PXR
.*01*   STATUS = OS/VS2 JBB1326                                    @L1C
.**************************************************************@G50EPXS
.*    CHANGE LEVEL =                                               @L1A
.*    CMSSMF LOCK SUPPORT                                      @G741PXT
.*    CML LOCK SUPPORT                                         @G381PXR
.*    PERFORMANCE SUPPORT                                      @G387PXR
.*    UPDATE AUTHORIZED CSECT LIST                             @ZMB0506
.* $L1= VIRFETCH, JBB1326, 103180, PD16XA: VIRTUAL FETCH ENHANCEMENT
*     MACDATE = 10/31/80                                           @L1C
          GBLB   &STLKCAL
          LCLA   &INDEX,&MASK,&OF
          LCLA   &BR1,&BR2,&BR3
          LCLA   &M1,&IN,&M2                                   @G381PXR
          LCLB   &DIS,&HI,&AUTH
          LCLA   &R1,&R2,&R3,&R4
          LCLC   &R5,&R
          AIF    ('&MODE' EQ 'UNCOND').MODEOK                  @G741PXT
          AIF    ('&MODE' NE 'COND').MODERR
.MODEOK   ANOP                                                 @G741PXT
.*  CHECK FOR VALID REQUEST
          AIF    ('&REQ' EQ 'OBT').REQVAL
          AIF    ('&REQ' EQ 'OBTAIN').REQVAL
          AIF    ('&REQ' EQ 'REL').REQVAL
          AIF    ('&REQ' EQ 'RELEASE').REQVAL
          MNOTE  8,'*** INVALID REQUEST FUNCTION'
          MEXIT
.REQVAL   ANOP
.*   SET INITIAL VALUES FOR LOCALS
&R1       SETA   11
&R2       SETA   12
&R3       SETA   13
&R4       SETA   14
&INDEX    SETA   12
&MASK     SETA   4096
&M1       SETA   16
&OF       SETA   2
&DIS      SETB   0
&AUTH     SETB   0
&IN       SETA   0
          AIF    ('&DISABLE' EQ '').DISSKP
          AIF    ('&DISABLE' EQ 'DISABLE').SETDIS
          AIF    ('&DISABLE' EQ 'DISABLED').SETDIS
          MNOTE  4,'*** &DISABLE OPERAND INVALID'
          AGO   .DISSKP
.SETDIS   ANOP
&DIS      SETB   1
.DISSKP   ANOP
          AIF    ('&SYSECT' EQ 'IEAVEEXP').SETAU
          AIF    ('&SYSECT' EQ 'IEAVESVC').SETAU
          AIF    ('&SYSECT' EQ 'IECVPST').SETAU                @G38IPXR
          AIF    ('&SYSECT' EQ 'ISGLNQDQ').SETAU               @ZMB0506
          AIF    ('&SYSECT' EQ 'ISGGRP00').SETAU               @G38IPXR
          AIF    ('&SYSECT' EQ 'IEAVLK00').SETAU               @G387PXR
          AIF    ('&SYSECT' EQ 'IEAVLK01').SETAU               @G387PXR
          AIF    ('&SYSECT' EQ 'IEAVEDS0').SETAU               @G387PXR
          AIF    ('&SYSECT' EQ 'CSVVFIND').SETAU                   @L1A
          AIF    ('&SYSECT' EQ 'CSVVFGET').SETAU                   @L1A
          AGO    .NOTAUTH
.SETAU    ANOP
&AUTH     SETB   1        INDICATE USER IS AUTHORIZED
.NOTAUTH  ANOP
          AIF   (&STLKCAL EQ 1).SKPDS0H
&NAME    DS    0H
.SKPDS0H ANOP
&STLKCAL SETB  0
.****************************************************************
.*   DETERMINE LOCK TYPE  AND SET UP CONSTANTS FOR CODE
.*   SET UP MASK VALUE, LITA INDEX, HLHI OFFSET, AND TM MASK
.***************************************************************
          AIF    ('&TYPE' EQ 'DISP').CODE
&INDEX    SETA   (&INDEX+48)
&MASK     SETA   256
&M1       SETA   1
&IN       SETA   16
          AIF    ('&TYPE' EQ 'IOSCAT').CODEA
&INDEX    SETA   (&INDEX+48)
&MASK     SETA   128
&M1       SETA   128
&IN       SETA   20
&OF       SETA   3
          AIF    ('&TYPE' EQ 'IOSUCB').CODEA
&INDEX    SETA   (&INDEX+48)
&MASK     SETA   64
&M1       SETA   64
&IN       SETA   24
          AIF    ('&TYPE' EQ 'IOSLCH').CODEA
&INDEX    SETA   (&INDEX+48)
&MASK     SETA   512
&M1       SETA   2
&IN       SETA   12
&OF       SETA   2
          AIF    ('&TYPE' EQ 'IOSYNCH').CODEA
&INDEX    SETA   (&INDEX+48)
&MASK     SETA   32
&M1       SETA   32
&IN       SETA   28
&OF       SETA   3
          AIF    ('&TYPE' EQ 'TPNCB').CODEA
&INDEX    SETA   (&INDEX+48)
&MASK     SETA   16
&M1       SETA   16
&IN       SETA   32
          AIF    ('&TYPE' EQ 'TPDNCB').CODEA
&INDEX    SETA   (&INDEX+48)
&MASK     SETA   8
&M1       SETA   8
&IN       SETA   36
          AIF    ('&TYPE' EQ 'TPACBDEB').CODEA
&INDEX    SETA   (&INDEX+48)
&MASK     SETA   2048
&M1       SETA   8
&IN       SETA   4
&OF       SETA   2
          AIF    ('&TYPE' EQ 'ASM').CODEA
&INDEX    SETA   (&INDEX+48)
&MASK     SETA   1024
&M1       SETA   4
&IN       SETA   8
          AIF    ('&TYPE' EQ 'SALLOC').CODE
&INDEX    SETA   (&INDEX+48)
&MASK     SETA   4
&M1       SETA   4
&IN       SETA   40
&OF       SETA   3
          AIF    ('&TYPE' EQ 'SRM').CODE
          AIF    ('&TYPE' EQ 'LOCAL').LOCAL
          AIF    ('&TYPE' EQ 'CMS').CMS
          AIF    ('&TYPE' EQ 'CMSEQDQ').CMS                    @G50EPXS
          AIF    ('&TYPE' EQ 'CMSSMF').CMS                     @G741PXT
          MNOTE  8,'*** INVALID TYPE SPECIFIED FOR SETLOCKI'
          MEXIT
.********************************************************************
.*  GLOBAL SPIN LOCK PATH, SINGLE LOCK AT THIS LEVEL
.********************************************************************
.CODE    AIF   ('&MODE' NE 'UNCOND').NOTSUP  ONLY UNCOND IS SUPPORTED
         AIF    ('&ADDR' EQ '').OK1  INSURE ADDR NOT SPECIFIED
.ADDINV  MNOTE  *,'*** ADDR OPERAND INVALID WITH &TYPE LOCK'
.OK1     AIF    ('&REQ' EQ 'RELEASE').CODEREL
         AIF    ('&REQ' EQ 'REL').CODEREL
         L     &R4,PSALITA-PSA(0,0)      LOCK INTERFACE TABLE ADDR
.UP1     AIF    (&DIS EQ 1).SKP2    SKIP DISABLE IF SPECIFIED
         STNSM PSAMPSW-PSA(0),X'FC'      DISABLE CURRENT PSW
.SKP2    ANOP
         AIF    ('&SYS' EQ 'UP').UP3
         LH    &R2,PSACPULA-PSA(0,0)     LOAD CPU ADDRESS
         L     &R1,&INDEX.(&R4,0)        LOCK ADDRESS
         SLR   &R3,&R3                   CLEAR RET CODE REG
         CS    &R3,&R2,0(&R1)            ATTEMPT LOCK OBTAIN
         BZ    *+12                      EXIT IF SUCCESSFUL
         LM    &R1,&R3,&INDEX.(&R4)      LOCK MANAGER LINKAGE
         BAL   &R4,4(0,&R3)              LINK TO LOCK MANAGER
.UP3     OI    PSAHLHI-PSA+&OF.(0),&M1   SET LOCK HELD BIT
         MEXIT
.*********************************************************************
.*  GLOBAL SPIN CLASS LOCK OBTAIN PATH, MULTIPLE LOCKS AT ONE LEVEL
.*********************************************************************
.CODEA   AIF    ('&MODE' NE 'UNCOND').NOTSUP ONLY UNCOND IS SUPPORTED
&INDEX   SETA   (&INDEX+4)   INCREMENT FOR MULTIPLE LOCKS
         AIF ('&ADDR' NE '').OK2   INSURE LOCK ADDRESS SPECIFIED
         MNOTE 8,'*** ADDR= MUST BE SPECIFIED FOR &TYPE LOCK'
         MEXIT
.BADADD  MNOTE 8,'*** ADDR= MUST SPECIFY REGISTER'
         MEXIT
.OK2     AIF    ('&ADDR'(1,1) NE '(').BADADD ISSUE MNOTE FOR BAD PARM
&R5      SETC   '&ADDR(1)'         SET LOCK REG VALUE
         AIF   ('&REQ' EQ 'RELEASE').CODEARL
         AIF   ('&REQ' EQ 'REL').CODEARL
         AIF   ('&R5' NE '11').RP11
         AGO   .RP11A
.RP11    ANOP
         LR    &R1,&R5                   COPY LOCK ADDRESS
.RP11A   ANOP
         AIF   (&DIS EQ 1).SKP2A   SKIP DISABLE IF REQUESTED
         STNSM PSAMPSW-PSA,X'FC'         DISABLE CURRENT PSW
.SKP2A   LH    &R2,PSACPULA-PSA(0,0)     CURRENT CPU ADDRESS
         L     &R3,PSACLHT-PSA+&IN.(0,0) LOAD LOCK HELD PTR
         LTR   &R3,&R3                   CHECK IF ZERO
         BNZ   *+12                      ERROR IF NOT
         CS    &R3,&R2,0(&R1)            ATTEMPT LOCK OBTAIN
         BZ    *+20                      EXIT IF SUCCESSFUL
         L     &R4,PSALITA-PSA(0,0)      LOCK MGR ENTRY
         LM    &R2,&R3,&INDEX.(&R4)      LINKAGE REGS
         BAL   &R4,4(0,&R3)              LINK TO LOCK MANAGER
         B     *+12                      EXIT
         ST    &R1,PSACLHT-PSA+&IN.(0,0) STORE LOCK ADDRESS IN TABLE
         OI    PSAHLHI-PSA+&OF.(0),&M1   SET LOCK HELD BIT
         MEXIT
.********************************************************************
.*  GLOBAL CLASS LOCK RELEASE PATH, MULTIPLE LOCKS AT ONE LEVEL
.********************************************************************
.SWAPRG  ANOP
         LR    &R2,&R3                   COPY LOCK ADDRESS
&R5      SETC  '12'
         AGO   .SWAPR1
.CODEARL ANOP
&BR1     SETA  16                      DEFAULT BRANCH VALUE
         AIF   ('&DISABLE' NE '').NOADD CONT IF DISABLED SPECIFIED
&BR1     SETA  36                      BRANCH VALUE WITH CHECK
.NOADD   ANOP
         AIF   ('&R5' EQ '13').SWAPRG
         LR    &R3,&R5                   COPY LOCK ADDRESS
.SWAPR1  S     &R3,PSACLHT-PSA+&IN.(0,0) CHECK IF LOCK HELD
         AIF   ('&ERRET' EQ '').RETCODA  BRANCH SPECIFIED?
         BNZ   &ERRET                    BRANCH TO ERROR EXIT
         AGO   .NORETA     SKIP RETURN CODE LOGIC
.RETCODA BZ    *+12                      CONTINUE IF HELD
         LA    &R3,4(0,0)                ERROR RET CODE IF NOT HELD
         B     *+&BR1                    EXIT
.NORETA  ST    &R3,PSACLHT-PSA+&IN.(0,0) CLEAR LOCK HELD TABLE
         ST    &R3,0(&R5,0)              ZERO OUT LOCK WORD
         AGO   .RELCOM     GOTO COMMON RELEASE CODE
.*********************************************************************
.*  GLOBAL LOCK RELEASE PATH, SINGLE LOCK AT THIS LEVEL
.*********************************************************************
.CODEREL ANOP
&BR3     SETA  12   BRANCH OFFSET WITH DISABLED OPTION
         AIF   ('&DISABLE' NE '').NOAD1 SKIP IF DISABLED SPECIFIED
&BR3     SETA  32   BRANCH OFFSET WITHOUT DIS OPT
.NOAD1   ANOP
         L     &R4,PSALITA-PSA(0,0)      LOCK INTERFACE TABLE ADDR
         SLR   &R3,&R3                   CLEAR REG FOR RETCODE
         L     &R1,&INDEX.(&R4,0)        LOAD LOCK ADDRESS
         TM    PSAHLHI-PSA+&OF.(0),&M1   CHECK IF OWNED BY US
         AIF   ('&ERRET' EQ '').RETCOD  SKIP IF BRANCH NOT REQUESTED
         BNO   &ERRET                    BRANCH TO ERROR EXIT
         AGO   .NORET    SKIP ERROR RETURN CODE GENERATION
.RETCOD  BO    *+12                      CONTINUE IF SUCCESSFUL
         LA    &R3,4(0,0)                SET ERROR RETURN CODE
         B     *+&BR3                    EXIT
.NORET   ST    &R3,0(&R1,0)              ZERO LOCK WORD
.********************************************************************
.*  COMMON GLOBAL LOCK RELEASE PATH
.********************************************************************
.RELCOM  ANOP
&M2      SETA  (255-&M1)
         NI    PSAHLHI-PSA+&OF.(0),&M2   RESET LOCK HELD BIT
         AIF   (&DIS EQ 1).SKP5  SKIP ENABLE IF REQUESTED
         L     &R2,PSAHLHI-PSA(0,0)      LOCKS HELD STRING
         SRL   &R2,2                     IGNORE LOCAL AND CMS
         O     &R2,PSASUPER-PSA(0,0)     CHECK SUPER BITS ALSO
         BNZ   *+8                       SKIP ENABLE IF NOT ZERO
         STOSM PSAMPSW-PSA(0),X'03'      ENABLE I/O AND EXT
.SKP5    MEXIT
.*****************************************************************
.*  LOCAL LOCK EXPANSIONS, OBTAIN AND RELEASE
.******************************************************************
.LOCAL   ANOP                         LOCAL LOCK OBTAIN
         AIF   ('&MODE' EQ 'UNCOND').LLUNC CHECK FOR UNCONDITIONAL
         AIF   ('&REQ' EQ 'OBTAIN' OR '&REQ' EQ 'OBT').LL1
         MNOTE 4,'*** CONDITIONAL MODE IGNORED WITH RELEASE'
         AGO   .LLUNC
.******************************************************************
.* LOCAL LOCK CONDITIONAL OBTAIN EXPANSIONS..
.******************************************************************
.LL1     AIF   ('&ADDR' NE '').LLERR1   ADDRESS INVALID FOR LL
.LL1A    AIF   (&DIS NE 1 AND '&MODE' EQ 'COND').LLERR2
&R       SETC   '11'
         AIF    ('&ASCB' NE '').LLASCB  CHECK FOR ASCB ADDRESS
         L     &R1,PSAAOLD-PSA(0,0)      LOAD ASCB ADDRESS
         AGO   .LL2
.LLASCB  ANOP
&R       SETC  '&ASCB(1)'
.LL2     AIF   (&AUTH EQ 1).LL2A
         TM    PSAHLHI-PSA+3(0),1        CHECK IF LOCK IS HELD
         AIF   ('&ERRET' EQ '').LL2B
         BO    &ERRET                    LOCK IS HELD.. EXIT
         AGO   .LL2A
.LL2B    BO    *+18                      SET ERROR RETURN CODE
.LL2A    LH    &R2,PSACPULA-PSA(0,0)     LOAD LOGICAL CPU ADDRESS
         SLR   &R3,&R3                   CLEAR REG FOR SWAP
         CS    &R3,&R2,ASCBLOCK-ASCB(&R) ATTEMPT LOCK OBTAIN
         AIF   ('&ERRET' NE '').LLRET  CHECK IF ERROR EXIT
         BZ    *+12                      CONTINUE IF SUCCESSFUL
         LA    &R3,8(0,0)                ERROR RETURN CODE
         B     *+8                       EXIT
         AGO   .LLEXIT
.LLRET   BNZ   &ERRET                    GO TO ERROR EXIT
.LLEXIT  OI    PSAHLHI-PSA+3(0),1        SET LOCK HELD FLAG
         MEXIT
.*********************************************************************
.*  LOCAL LOCK UNCONDITIONAL OBTAIN AND RELEASE EXPANSION
.*********************************************************************
.LLUNC   ANOP
         AIF   ('&ADDR' NE '').LLERR3    ADDR NOT REQUIRED FOR UNCOND
         AIF   (&AUTH NE 1).LLUNC1       CHECK AUTHORIZED CALL @G38IPXR
         AIF   ('&REQ' EQ 'OBTAIN' OR '&REQ' EQ 'OBT').LLAOP   @G38IPXR
         DC    XL2'E505'                 RELEASE LOCAL LOCK    @G38IPXR
         AGO   .LLAOP1                   GO COMPLETE OP CODE   @G38IPXR
.LLAOP   ANOP                                                  @G38IPXR
         DC    XL2'E504'                 OBTAIN LOCAL LOCK     @G38IPXR
.LLAOP1  ANOP                                                  @G38IPXR
         DC    S(PSAAOLD-PSA(0))         ASCB ADDR OF LOCAL    @G38IPXR
         DC    S(PSAHLHI-PSA(0))         LOCK HELD INDICATOR   @G38IPXR
         MEXIT                                                 @G38IPXR
.LLUNC1  ANOP
         AIF   ('&REQ' EQ 'OBTAIN' OR '&REQ' EQ 'OBT').OBTOP
&INDEX   SETA  596                       OFFSET IN LIT FOR     @G381PXR
.*                                       LOCAL RELEASE         @G381PXR
         AGO   .FIRSTOP                  GO SET OPERANDS
.OBTOP   ANOP
&INDEX   SETA  584                       OFFSET IN LIT FOR     @G381PXR
.*                                       LOCAL UNCOND OBTAIN   @G381PXR
.FIRSTOP ANOP
         L     &R3,PSALITA-PSA(0)        GET LITA ADDRESS      @G381PXR
         L     &R3,&INDEX.(&R3)          GET ENTRY TO SERVICE  @G381PXR
         BALR  &R4,&R3                   BRANCH ENTER ROUTINE  @G381PXR
         MEXIT
.LLERR1  MNOTE  4,'*** ADDR= KEYWORD NOT USED FOR LOCAL LOCK'
         AGO   .LL1A
.LLERR2  MNOTE  8,'*** DISABLED OPTION REQUIRED, NOT SPECIFIED'
         MEXIT
.LLERR3  MNOTE  4,'*** ADDR= KEYWORD NOT USED FOR LOCAL LOCK'
         AGO    .LLUNC1
.NOTSUP  MNOTE  8,'*** &TYPE CONDITIONAL OBTAIN NOT SUPPORTED'
         MEXIT
.MODERR  MNOTE  8,'*** INVALID MODE SPECIFIY COND OR UNCOND'
         MEXIT
.*********************************************************************
.*  CROSS MEMORY SERVICES LOCKS OBTAIN AND RELEASE EXPANSIONS  @ZM45746
.*********************************************************************
.CMS     ANOP
         AIF  ('&MODE' EQ 'COND').NOTSUP CROSS MEMORY SERVICES @ZM45746
.*                                       CONDITIONAL REQUEST   @ZM45746
.*                                       NOT SUPPORTED         @ZM45746
         AIF   ('&ADDR' NE '').LLERR4    ADDR= IS IGNORED
.CMSCONT ANOP
         AIF   ('&TYPE' EQ 'CMSEQDQ').CMSEQDQ ENQ/DEQ LOCK     @G50EPXS
         AIF   ('&TYPE' EQ 'CMSSMF').CMSSMF SMF LOCK           @G741PXT
&INDEX   SETA  540                       OFFSET IN LIT FOR     @G381PXR
.*                                       GEN CMS UNCOND OBTAIN @G381PXR
         AGO   .CMSOBRL                  CHECK OBT OR REL      @G50EPXS
.CMSEQDQ ANOP                                                  @G50EPXS
&INDEX   SETA  624                       OFFSET INTO LIT FOR   @G381PXR
.*                                       CMSEQDQ UNCOND OBTAIN @G381PXR
         AGO   .CMSOBRL                                        @G381PXR
.CMSSMF  ANOP                                                  @G741PXT
&INDEX   SETA  696                       OFFSET INTO LIT FOR   @G381PXR
.*                                       CMSSMF UNCOND OBTAIN  @G381PXR
.CMSOBRL AIF   ('&REQ' EQ 'OBTAIN' OR '&REQ' EQ 'OBT').OBTCMS  @G50EPXS
         L     &R1,PSALITA-PSA(0)        GET LOCK TABLE ADDR   @G387PXR
         L     &R1,&INDEX.(,&R1)         GET LOCKWORD ADDRESS  @G387PXR
         DC    XL2'E507'                 CMS RELEASE OP CODE   @G387PXR
         DC    S(PSAAOLD-PSA(0))         CURRENT ASCB          @G387PXR
         DC    S(PSAHLHI-PSA(0))         LOCK HELD INDICATOR   @G387PXR
         MEXIT                                                 @G387PXR
.OBTCMS  ANOP
         AIF   (&AUTH EQ 1).AUTHCMS      AUTHORIZED OBT CALLER @G387PXR
         L     &R1,PSALITA-PSA(0)        GET LITA ADDRESS      @G381PXR
         LM    &R1,&R3,&INDEX.(&R1)      GET INTERFACE REGS    @G381PXR
         BALR  &R4,&R3                   BRANCH TO SERVICE RTN @G381PXR
         MEXIT
.AUTHCMS ANOP                                                  @G38IPXR
         L     &R1,PSALITA-PSA(0)        GET LOCK TABLE ADDR   @G38IPXR
         L     &R1,&INDEX.(,&R1)         GET LOCKWORD ADDRESS  @G38IPXR
         DC    XL2'E506'                 CMS OBTAIN  OP CODE   @G38IPXR
         DC    S(PSAAOLD-PSA(0))         LOCALLY LOCKED ASCB   @G38IPXR
         DC    S(PSAHLHI-PSA(0))         LOCK HELD INDICATOR   @G38IPXR
         MEXIT                                                 @G38IPXR
.LLERR4  MNOTE 4,'*** ADDR= KEYWORD NOT USED FOR &TYPE LOCK'   @ZM45746
         AGO   .CMSCONT
         MEND
