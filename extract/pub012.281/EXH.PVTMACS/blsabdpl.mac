*   %GOTO ABDPLS;                   /* Display prolog                */
          MACRO
          BLSABDPL &AMDEXIT=YES,&DSECT=YES,&AMDJOB=NO,&AMDCPST=NO
*%ABDPLS: ;                         /* Display prolog                */
*/***  Start of Specifications for BLSABDPL  *************************/
*/*                                                                  */
*/* $MAC(BLSABDPL) COMP(SC132) PROD(JIP1329): Exit parameter list    */
*/*                                                                  */
*/* COPYRIGHT =                                                      */
*/*   5740-XYN, 5740-XYS COPYRIGHT IBM CORP. 1981,1982       @G860P2Z*/
*/*   LICENSED MATERIAL-PROGRAM, PROPERTY OF IBM,            @G860P2Z*/
*/*   REFER TO COPYRIGHT INSTRUCTIONS FORM NUMBER G120-2083. @G860P2Z*/
*/*                                                                  */
*/* FUNCTION= BLSABDPL contains mappings of parameter blocks used for*/
*/*  communication between AMDPRDMP, IPCS, and SNAP dump formatting  */
*/*  hosts and the dump formatting exits invoked by them. It is also */
*/*  used by AMDPRDMP and SNAP when calling exits to format GTF      */
*/*  records.                                                        */
*/*                                                                  */
*/* CHANGE ACTIVITY:                                                 */
*/*  $L0= EBB1102,EBB1102,75001,DSDPXX: MVS/370 base                 */
*/*  $L1= HBB2102,HBB2102,82082,DSDPRW: MVS/XA support               */
*/*  PRODUCTS:                                                       */
*/*    SU 33                                                 @G33SPHW*/
*/*    HBB2102 -  EXIT ENHANCEMENTS                          @G860P2Z*/
*/*            -   OPERANDS BUFFER AND 4K READ OF DUMP DATA  @G860PC8*/
*/*            -   PRINT DUMP INDEX SUPPORT                  @G860PC9*/
*/*  PTM'S:                                                          */
*/*    PCC1842 - ADDED ADPLIPCS AND ADPLEJEC FLAGS           @ZMC1842*/
*/* End Specifications Logged in Compiler Listings *******************/
*        %GOTO ABDPLPLS;            /*
.*** Begin Usage instructions *****************************************
.* METHOD OF ACCESS =
.*    ASSEMBLER MODULES:
.*          BLSABDPL optional-keyword-parameter-list
.*       The optional keywords are:
.*          AMDEXIT=<YES>   Include the exit parameter list,
.*                  <NO >    ABDPL.  The default is YES.
.*          DSECT=<YES>     Define ABDPL as a DSECT.
.*                <NO >     The DEFAULT IS YES.
.*          AMDCPST=<NO >   Include CPU STATUS mapping,
.*                  <YES>    AMDCPMAP.  The default is NO.
.*       AMDJAMAP and AMDCPMAP are always DSECTs.
.*    PLS MODULES:
.*          %INCLUDE SYSLIB(BLSABDPL)
.*       The following macro variables may be set prior to this
.*       INCLUDE to tailor the mappings:
.*          AMDEXIT=<YES>   Include the exit parameter list,
.*                  <NO >    ABDPL.  The default is YES.
.*          AMDCPST=<NO >   Include CPU STATUS mapping,
.*                  <YES>    AMDCPMAP.  The default is NO.
.*       AMDJAMAP and AMDCPMAP are normally declared as based
.*       structures.  Their scope and storage class may be
.*       overridden by setting AMDJAMAPSTORAGE and AMDCPMAPSTORAGE
.*       to the desired PLS attributes.  ABDPL is normally defined
.*       as BASED(ABDPLPTR).  Its scope and storage class may be
.*       overridden by setting ABDPLSTORAGE to the desired PLS
.*       attributes.
.*
.*    Assembler example:                                      @G860P2Z
.*       BLSABDPL                                             @G860P2Z
.*    PL/S example:                                           @G860P2Z
.*       %INCLUDE SYSLIB(BLSABDPL)         "                  @G860P2Z
.*                                                            @G860P2Z
.*       ABDPL will be INCLUDED as a DSECT or a based         @G860P2Z
.*       structure.                                           @G860P2Z
.*** End of Specifications for BLSABDPL  ******************************
         IEZBITS ,                Define symbolic bits             @L1A
         AIF ('&AMDEXIT' NE 'YES').ABDPL02
         AIF ('&DSECT' EQ 'YES').ABDPL00
ABDPL    EQU    *
         AGO    .ABDPL01
.ABDPL00 ANOP
ABDPL    DSECT
.ABDPL01 SPACE 1
ADPLTCB  DS    A                  TCB of task being displayed
ADPLASID DS    H                  Address space identifier
ADPLSBPL DS    B                  Subpool used to get save area
*                                 by component routine
ADPLFLAG DS    B                  Flag field
ADPLSNPR EQU   BIT0               0=Module loaded by SNAP          @L1C
*                                 1=Module loaded by PRDMP/IPCS
ADPLSYTM EQU   BIT1               0=System is OS/VS2               @L1C
*                                 1=System is OS/VS1
ADPLDMGT EQU   BIT2               0=Format DEB only (SNAP caller)  @L1C
*                                 1=Format DEB,DCB,IOB (SNAP caller)
ADPLIPCS EQU   BIT3               Called by IPCS                   @L1C
ADPLPRT  EQU   BIT4               On, SYSPRINT data set request    @L1C
*                                 Off, PRINTER data set request
ADPLSYNO EQU   BIT5               Exit given control for syntax    @L1C
*                                 checking only                @G860P2Z
ADPLEJEC EQU   BIT6               For a write to PRINTER data set  @L1C
*                                 eject page first             @ZMC1842
ADPLBUF  DS    A                  Pointer to output buffer
ADPLPRNT DS    A                  Address of print routine
ADPLCVT  DS    A                  Address of CVT
ADPLMEMA DS    A                  Address of memory access routine
ADPLFRMT DS    A                  Address of format routine
ADPLCOM1 DS    A                  Reserved for component use
ADPLCOM2 DS    A                  Reserved for component use
ADPLCOM3 DS    A                  Reserved for component use
ADPLCOM4 DS    A                  Reserved for component use
ADPLFMT1 DS    A                  Reserved for format routine
ADPLFMT2 DS    A                  Reserved for format routine
ADPLEXT  DS    A                  Address of extension, whose first
*                                 word contains the address of the
*                                 operands list or zero if none.
ADPLABDA DS    A                  Address of host internal         @L1C
*                                 parameter list               @G33SPHW
ADPLTRFM DS    A                  Address of trace control block
*                                 (SNAP only)                  @G860P2Z
         DS    A                  reserved                         @L1C
ADPLLEV  DS    AL1                Index indentation level          @L1C
ADPLIDX  DS    AL1                Entry code number corresponding  @L1A
*                                 to AMDMNDXT macro entries
ADPLLNCT DS    H                  Line count per output page   @G860P2Z
ADPLLNRM DS    H                  Current number of lines remaining
*                                 on the output page           @G860P2Z
ADPLDLEN DS    H                  Storage access request length
*                                                              @G860PC8
ADPLOPLN DS    H                  Length of verb operand list  @G860PC8
ADPLPRDP DS    B                  Dump read/format flags       @G860P2Z
ADPLVIRT EQU   BIT0               Virtual address read             @L1C
ADPLREAL EQU   BIT1               Real address read                @L1C
ADPLCPU  EQU   BIT2               CPU data read                    @L1C
ADPLHDR  EQU   BIT3               Dump header read                 @L1C
*        The following bit governs the masking of register zero prior
*        to its use by the storage access service as a virtual
*        storage address.  If it is off, X'7FFFFFFF' will be
*        logically ANDed with register zero to obtain the requested
*        address.  If it is on, X'00FFFFFF' will be logically ANDed
*        with register zero to obtain the requested address.
ADPLSAMK EQU   BIT7               MVS/370 virtual address          @L1A
         DS    CL1                For word alignment           @G860PC9
ADPLNDX  DS    A                  Address of the AMDPRNDX routine,
*                                 Build the index work entries @G860PC9
ADPLPGNO DS    F                  Current output page number       @L1A
         DS    CL8                reserved                         @L1A
.ABDPL02 AIF ('&AMDCPST' NE 'YES').ABDPL04                     @G860P2Z
         EJECT                                                 @G860P2Z
**********************************************************************
*
*   AMDCPMAP is a mapping of the CPU STATUS data obtained from a dump
*   upon request.  An exit requests this data by setting ADPLCPU in
*   the exit parameter list prior to invoking the storage access
*   service routine, whose address is in ADPLMEMA.
*
**********************************************************************
AMDCPMAP DSECT                    CPU status record data       @G860P2Z
*                                 mapping                      @G860P2Z
AMDCFLAG DS    CL1                CPU status flags             @G860P2Z
AMDCUNIP EQU   BIT0               CPU is a uniprocessor:           @L1C
*                                 Processor address is invalid.
AMDCSINV EQU   BIT1               Stand-alone dump unable to store @L1C
*                                 status.  Only  processor address
*                                 is valid.                    @G860P2Z
AMDCGPRV EQU   BIT2               Operator did not perform store   @L1C
*                                 status.  Only general registers
*                                 and, if MP, processor address
*                                 are valid.                   @G860P2Z
AMDCSADP EQU   BIT3               Not from a stand alone dump      @L1C
AMDCPAD1 DS    CL1                Padding                      @G860P2Z
AMDCPADR DS    H                  Processor address            @G860P2Z
AMDCREGS DS    0CL168             Registers and current PSW    @G860P2Z
AMDCFREG DS    CL32               Floating point REG's 0,2,4,6 @G860P2Z
AMDCGREG DS    CL64               General registers            @G860P2Z
AMDCCREG DS    CL64               Control registers            @G860P2Z
AMDCCPSW DS    CL8                Current PSW                  @G860P2Z
AMDCPREG DS    F                  Prefix register              @G860P2Z
AMDCTIME DS    CL8                CPU timer value              @G860P2Z
AMDCLOCK DS    CL8                Clock comparator value       @G860P2Z
.ABDPL04 ANOP                                                  @G860P2Z
         MEND  ,                  End of assembler macro             */
*%ABDPLPLS:                         /* Begin PL/S macro              */
*   IF AMDEXIT='NO' %THEN           /* Do not define ABDPL           */
*     %GOTO ABDPL05;                /*                               */
*   %IF ABDPLSTORAGE='' %THEN       /* No scope/storage class    @L1A*/
*     %ABDPLSTORAGE='BASED(ABDPLPTR)';/* Default scope/storage   @L1A*/
*   DECLARE
*     1 ABDPL ABDPLSTORAGE BOUNDARY(DWORD),/*                    @L1C*/
*      2 ADPLTCB PTR(31),           /* TCB of task being displayed   */
*      2 ADPLASID FIXED(15),        /* Address space identifier      */
*      2 ADPLSBPL CHAR(1),          /* Subpool used to get save area
*                                      by component routine          */
*      2 ADPLFLAG,                  /* Flag field                    */
*       3 ADPLSNPR BIT(1),          /* 0-Module loaded by SNAP
*                                      1-Module loaded by PRDMP/IPCS */
*       3 ADPLSYTM BIT(1),          /* 0-System is OS/VS2
*                                      1-System is OS/VS1            */
*       3 ADPLDMGT BIT(1),          /* For data management formatter
*                                      under SNAP: 0-Format DEB only,
*                                      1-Format DEB,DCB,IOB          */
*       3 ADPLIPCS BIT(1),          /* Called by IPCS                */
*       3 ADPLPRT BIT(1),           /* SYSPRINT data set             */
*       3 ADPLSYNO BIT(1),          /* Exit given control for syntax
*                                      checking only                 */
*       3 ADPLEJEC BIT(1),          /* Page eject                    */
*      2 ADPLBUF PTR(31),           /* Pointer to output buffer      */
*      2 ADPLPRNT PTR(31),          /* Address of print routine      */
*      2 ADPLCVT PTR(31),           /* Address of CVT                */
*      2 ADPLMEMA PTR(31),          /* Address of memory access
*                                      routine                       */
*      2 ADPLFRMT PTR(31),          /* Address of format routine     */
*      2 ADPLCOM1 FIXED(31),        /* Reserved for component use    */
*      2 ADPLCOM2 FIXED(31),        /* Reserved for component use    */
*      2 ADPLCOM3 FIXED(31),        /* Reserved for component use    */
*      2 ADPLCOM4 FIXED(31),        /* Reserved for component use    */
*      2 ADPLFMT1 PTR(31),          /* Reserved for format routine   */
*      2 ADPLFMT2 PTR(31),          /* Reserved for format routine   */
*      2 ADPLEXT PTR(31),           /* Address of extension whose
*                                      first word contains the
*                                      address of the operands list
*                                      or zero if none               */
*      2 ADPLABDA PTR(31),          /* Address of host internal
*                                      parameter list            @L1C*/
*      2 ADPLTRFM PTR(31),          /* Address of trace control block
*                                      (SNAP only)               @L1C*/
*      2 * PTR(32),                 /* reserved                  @L1C*/
*      2 ADPLLEV UNSIGNED BINARY(8),/* Index indentation level   @L1C*/
*      2 ADPLIDX UNSIGNED BINARY(8),/* Entry code number corresponding
*                                      to AMDMNDXT macro entries @L1A*/
*      2 ADPLLNCT FIXED(16),        /* Lines per page            @L1C*/
*      2 ADPLLNRM FIXED(16),        /* Lines remaining on the
*                                      current page              @L1C*/
*      2 ADPLDLEN FIXED(16),        /* Storage access length     @L1C*/
*      2 ADPLOPLN FIXED(16),        /* Length of operands        @L1C*/
*      2 ADPLPRDP,                  /* Address qualification     @L1C*/
*       3 ADPLVIRT BIT(1),          /* Virtual address           @L1C*/
*       3 ADPLREAL BIT(1),          /* Real address              @L1C*/
*       3 ADPLCPU BIT(1),           /* CPU data request          @L1C*/
*       3 ADPLHDR BIT(1),           /* Dump header request       @L1C*/
*       3 * BIT(3),                 /* reserved                  @L1A*/
*/*     The following bit governs the masking of register zero prior */
*/*     to its use by the storage access service as a virtual        */
*/*     storage address.  If it is off, X'7FFFFFFF' will be          */
*/*     logically ANDed with register zero to obtain the requested   */
*/*     address.  If it is on, X'00FFFFFF' will be logically ANDed   */
*/*     with register zero to obtain the requested address.          */
*
*       3 ADPLSAMK BIT(1),          /* MVS/370 virtual address   @L1A*/
*      2 * CHAR(1),                 /* reserved                  @L1C*/
*      2 ADPLNDX PTR(31),           /* Address of the AMDPRNDX
*                                      routine.  Build index work
*                                      entries                   @L1A*/
*      2 ADPLPGNO FIXED(32),        /* Current page number       @L1A*/
*      2 * CHARACTER(8),            /* reserved                  @L1A*/
*/*==================================================================*/
*/*Output buffer is provided by the host and is filled in prior to   */
*/*calling the print and index services.                             */
*     ADPLBUFR CHARACTER(132) BASED(ADPLBUF),/* Output buffer    @L1A*/
*     ADPLBUFO CHARACTER(1) BASED(ADPLBUF) POSITION(133),/* One
*                                      overflow byte is provided to
*                                      the exit                  @L1A*/
*/*==================================================================*/
*/*Subroutines accessible via the exit parameter list                */
*/*------------------------------------------------------------------*/
*/*   Print service routine--SNAP supports a subset of the services  */
*/*   offered in AMDPRDMP and IPCS.  The SNAP print service routine: */
*/*    - Ignores bit ADPLPRT,                                        */
*/*    - Does not maintain fields ADPLLNCT, ADPLPGNO, and ADPLLNRM,  */
*/*      and                                                         */
*/*    - Neither honors nor zeroes the ADPLEJEC bit.                 */
*/*   All such fields are zeroed by SNAP prior to passing control to */
*/*   an exit and should not be used by exits designed to function   */
*/*   in the SNAP formatting environment.                            */
*/*------------------------------------------------------------------*/
*     ADPLEPRT ENTRY BASED(ADPLPRNT) VALUERANGE(*) OPTIONS(
*         REFS(ADPLBUFR,            /* Each host uses this field     */
*             ADPLPRT,ADPLEJEC,     /* AMDPRDMP and IPCS use these
*                                      fields                        */
*             ADPLBUF,ADPLABDA,ADPLLNCT,ADPLLNRM,ADPLPGNO,ADPLSYNO),/*
*                                      Each host may, but need not,
*                                      use these fields              */
*         SETS(ADPLBUFR,            /* Each host sets this field     */
*             ADPLLNRM,ADPLPGNO,ADPLEJEC,/* AMDPRDMP and IPCS set
*                                      these fields                  */
*             ADPLBUF,ADPLABDA,ADPLLNCT,ADPLSYNO)),/* Each host may,
*                                      but need not, set these fields
*                                                                @L1A*/
*/*------------------------------------------------------------------*/
*/*   Storage access service routine--Supported by SNAP only for     */
*/*   access to live virtual storage.  Its support by AMDPRDMP and   */
*/*   IPCS is described below.                                       */
*/*------------------------------------------------------------------*/
*     ADPLESTG ENTRY BASED(ADPLMEMA) VALUERANGE(*) OPTIONS(
*         REFS(ADPLASID,ADPLDLEN,ADPLVIRT,ADPLREAL,ADPLCPU,
*             ADPLHDR,ADPLSAMK,     /* AMDPRDMP and IPCS use these
*                                      fields                        */
*             ADPLCVT,ADPLABDA,ADPLTRFM,ADPLSYNO)),/* Each host may,
*                                      but need not, use these fields
*                                                                @L1A*/
*/*------------------------------------------------------------------*/
*/*   Format service routine                                         */
*/*------------------------------------------------------------------*/
*     ADPLEFMT ENTRY BASED(ADPLFRMT) VALUERANGE(*) OPTIONS(
*         REFS(ADPLBUF,ADPLABDA),   /* Each host may, but need not,
*                                      use these fields              */
*         SETS(ADPLBUFR,            /* Each host sets this field     */
*             ADPLBUF,ADPLABDA,ADPLSYNO)),/* Each host may, but need
*                                      not, set these fields     @L1A*/
*/*------------------------------------------------------------------*/
*/*   Index service routine--Supported as minimum-function entries by*/
*/*   IPCS and SNAP.  These entries only blank ADPLBUFR and return.  */
*/*   Its support by AMDPRDMP is described below.                    */
*/*------------------------------------------------------------------*/
*     ADPLENDX ENTRY BASED(ADPLNDX) VALUERANGE(*) OPTIONS(
*         REFS(ADPLBUFR,ADPLLEV,ADPLIDX,/* AMDPRDMP uses these fields*/
*             ADPLBUF,ADPLABDA,ADPLLNRM,ADPLPGNO,ADPLSYNO),/*
*                                      AMDPRDMP may, but need not,
*                                      use these fields              */
*         SETS(ADPLBUFR,            /* Each host blanks this field   */
*             ADPLBUF,ADPLABDA,ADPLSYNO));/* AMDPRDMP may, but need
*                                      not, set these fields     @L1A*/
*%ABDPL05:                          /* Process AMDCPMAP              */
*   IF AMDCPST^='YES' %THEN         /* Do not define AMDCPMAP        */
*     %GOTO ABDPL09;                /* End BLSABDPL processing       */
*   %IF AMDCPMAPSTORAGE='' %THEN    /* No scope/storage class    @L1A*/
*     %AMDCPMAPSTORAGE='BASED';     /* Default scope/storage     @L1A*/
*/********************************************************************/
*/* AMDCPMAP is a mapping of the CPU STATUS data obtained from a dump*/
*/* upon request.  An exit requests this data by setting ADPLCPU in  */
*/* the exit parameter list prior to invoking the storage access     */
*/* service routine, whose address is in ADPLMEMA.                   */
*/********************************************************************/
*
*   DECLARE                         /* Status record data            */
*     1 AMDCPMAP AMDCPMAPSTORAGE,   /* mapping                   @L1C*/
*      2 AMDCFLAG BIT(8),           /* CPU status flags          @L1C*/
*       3 AMDCUNIP BIT(1),          /* CPU is a uniprocessor.
*                                      Processor address is invalid. */
*       3 AMDCSINV BIT(1),          /* Stand alone dump unable to
*                                      perform store status.  Only
*                                      processor address is valid.   */
*       3 AMDCGPRV BIT(1),          /* Operator did not perform store
*                                      status.  Only general registers
*                                      and, if MP, processor address
*                                      are valid.                @L1C*/
*       3 AMDCSADP BIT(1),          /* Not from a stand alone dump   */
*      2 AMDCPAD1 CHAR(1),          /* Padding                   @L1C*/
*      2 AMDCPADR FIXED(16),        /* Processor address         @L1C*/
*      2 AMDCREGS,                  /* REGs and current PSW      @L1C*/
*       3 AMDCFREG(4) CHAR(8),      /* Floating point REGs       @L1C*/
*       3 AMDCGREG(16) CHAR(4),     /* General registers         @L1C*/
*       3 AMDCCREG(16) CHAR(4),     /* Control registers         @L1C*/
*       3 AMDCCPSW CHAR(8),         /* Current PSW               @L1C*/
*      2 AMDCPREG PTR(31),          /* Prefix register           @L1C*/
*      2 AMDCTIME CHAR(8),          /* CPU timer value           @L1C*/
*      2 AMDCLOCK CHAR(8);          /* Clock comparator          @L1C*/
*%ABDPL09:                          /* End BLSABDPL processing       */
*   DEACTIVATE AMDJOB,AMDEXIT,AMDCPST;
