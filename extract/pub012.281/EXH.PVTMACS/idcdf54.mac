 /********************************************************************/
 /*                                                                  */
 /* PROCEDURE NAME - SORT  (ACCESS METHOD SERVICES)          @Z40LB37*/
 /*                                                          @Z40LB37*/
 /* FUNCTION - THIS COMMON INCLUDED PROCEDURE PROVIDES THE   @Z40LB37*/
 /*            CALLER WITH THE BASIC FUNCTION OF SORTING     @Z40LB37*/
 /*            A CONTIGUOUS AREA OF STORAGE OF ANY LENGTH,   @Z40LB37*/
 /*            OR ELEMENT (RECORD) SIZE.   IT ALLOWS         @Z40LB37*/
 /*            CHARACTER FIELDS TO BE SORTED PER USER CALL,  @Z40LB37*/
 /*            ANYWHERE WITHIN AN ELEMENT (RECORD) FOR ANY   @Z40LB37*/
 /*            LENGTH EQUAL TO OR SMALLER THAN AN ELEMENTS   @Z40LB37*/
 /*            SIZE.  THE ELEMENT SIZE CANNOT CHANGE BETWEEN @Z40LB37*/
 /*            CALLS TO THE SORT PROCEDURE.  (THIS IS A      @Z40LB37*/
 /*            COMPILE TIME VARIABLE.)                       @Z40LB37*/
 /*                                                          @Z40LB37*/
 /* ENTRY POINT - SORT                                       @Z40LB37*/
 /*                                                          @Z40LB37*/
 /*      LINKAGE - 'CALL SORT (SRTAGL)'                      @Z40LB37*/
 /*                '%SRTLABEL = 'WORK AREA''                 @Z40LB37*/
 /*                '%INCLUDE SYSLIB(IDCDF54)'                @Z40LB37*/
 /*                                                          @Z40LB37*/
 /* INPUT  - ADDRESS OF ARGUMENT LIST (SRTAGL)               @Z40LB37*/
 /*                                                          @Z40LB37*/
 /* OUTPUT - A RETURN CODE IN REGISTER 15                    @Z40LB37*/
 /*                                                          @Z40LB37*/
 /*          (0) - SORT SUCCESSFUL                           @Z40LB37*/
 /*                                                          @Z40LB37*/
 /* EXIT NORMAL - RETURNS TO CALLER WITH CONDITION           @Z40LB37*/
 /*               CODE ZERO                                  @Z40LB37*/
 /*                                                          @Z40LB37*/
 /* EXIT ERROR  - NONE                                       @Z40LB37*/
 /*                                                          @Z40LB37*/
 /* CHANGE ACTIVITY - NONE                                   @Z40LB37*/
 /*                                                                  */
 /********************************************************************/
 % DECLARE SRTLABEL CHARACTER;                             /*@Z40LB37*/
 % IF SRTLABEL = '' %THEN
     %SRTLABEL = '0';                                      /*@Z40LB37*/

 SORT:                              /*AMS SORT ROUTINE       @Z40LB37*/
    PROCEDURE(SRTARG);              /*SORT ARGUMENT LIST     @Z40LB37*/

 @EJECT;                                                   /*@Z40LB37*/
    /*****************************************************************/
    /*                                                               */
    /*  DECLARATIONS FOR THE SORT ROUTINE.                   @Z40LB37*/
    /*                                                               */
    /*****************************************************************/

    DCL
      1 SRTSTOR(*)  BASED(SRTPTR),  /*INPUT STORAGE DCL      @Z40LB37*/
        2 SRTELEM   CHAR(LENGTH(SRTLABEL));/*FOR MOVING ONE
                                      ELEMENT                @Z40LB37*/
    DCL
      SRTSAVE CHAR(LENGTH(SRTLABEL))/*PASSED ELEMENT         @Z40LB37*/
        BASED(SRTWPTR);             /*SAVE AREA              @Z40LB37*/
    DCL
      (SRTPTR,SRTWPTR) PTR(31);     /*SORT AREA PTRS         @Z40LB37*/
    DCL
      SRTLN    FIXED(31);           /*SORT ELEMENT LENGTH    @Z40LB37*/
    DCL
      (SRTBEG,SRTEND) FIXED(31);    /*SORT FIELD DCLS        @Z40LB37*/
    DCL
      (SRTSTOP,SRTMOVE)  BIT(1);    /*SORT SWITCHES          @Z40LB37*/
    DCL
      SRTON   BIT(1) CONSTANT('1'B);/*SWITCH ON CONSTANT     @Z40LB37*/
    DCL
      SRTOFF  BIT(1) CONSTANT('0'B);/*SWITCH OFF CONSTANT    @Z40LB37*/
    DCL
      (SRTMAXCT,SRTI,SRTJ) FIXED(31);/*SORT COUNTER DCLS     @Z40LB37*/
    DCL
      SRTRC   FIXED(15) CONSTANT(0);/*SORT RETURN CODE AREA  @Z40LB37*/

 @EJECT;                                                   /*@Z40LB37*/
    /*****************************************************************/
    /*                                                               */
    /*  RESPECIFY SRTAGL ON PASSED ADDRESS, ISSUE UTRACE     @Z40LB37*/
    /*  AND UDUMP MACROS, AND INITIALIZE LOCAL COUNTERS AND  @Z40LB37*/
    /*  LENGTH FIELDS.                                       @Z40LB37*/
    /*                                                               */
    /*****************************************************************/

    RFY
      SRTAGL    BASED(ADDR(SRTARG));                       /*@Z40LB37*/

    UTRACE = 'SORT';                                       /*@Z40LB37*/

    UDUMP (GDTTBL,'SOTI');                                 /*@Z40LB37*/

    SRTHEAD = 'SRTAGL  ';                                  /*@Z40LB37*/
    SRTWPTR = SRTWORKP;                                    /*@Z40LB37*/
    SRTPTR = SRTADDR;                                      /*@Z40LB37*/
    SRTLN = SRTLEN;                                        /*@Z40LB37*/
    SRTMAXCT = SRTNUM;                                     /*@Z40LB37*/
    SRTBEG = SRTPOSIT;                                     /*@Z40LB37*/
    SRTEND = SRTPOSIT + (SRTFLDLN - 1);                    /*@Z40LB37*/
    SRTSTOP = SRTOFF;                                      /*@Z40LB37*/
    SRTMOVE = SRTOFF;                                      /*@Z40LB37*/

 @EJECT;                                                   /*@Z40LB37*/
    /*****************************************************************/
    /*                                                               */
    /*  EXECUTE THE SORT LOOP USING THE MAXIMUM ELEMENTS     @Z40LB37*/
    /*  MINUS ONE FOR THE SRTI COUNTER AND DECREMENTING THE  @Z40LB37*/
    /*  THE SRTI COUNTER BY ONE EACH PASS.  THE SRTJ COUNTER @Z40LB37*/
    /*  IS USED TO COUNT THE ELEMENTS THRU EACH PASS AND IN- @Z40LB37*/
    /*  CREMENT THE SRTJ COUNTER BY ONE AFTER EACH ELEMENT   @Z40LB37*/
    /*  IS COMPARED.   THE SRTSTOP SWITCH IS USED TO TERM-   @Z40LB37*/
    /*  INATE THE SORT IF NO INTERCHANGE OF ELEMENTS TAKES   @Z40LB37*/
    /*  PLACE.                                               @Z40LB37*/
    /*                                                               */
    /*****************************************************************/

 SRTLOOP:
    DO SRTI = SRTMAXCT-1 TO 1 BY -1 WHILE SRTSTOP = SRTOFF;/*@Z40LB37*/
      DO SRTJ = 1 TO SRTI;                                 /*@Z40LB37*/

        /*************************************************************/
        /*                                                           */
        /*  COMPARE THE TWO ELEMENTS TO SEE IF AN INTER-     @Z40LB37*/
        /*  CHANGE SHOULD TAKE PLACE, USING THE PASSED SORT  @Z40LB37*/
        /*  FIELDS AS A SUBSTRING, IF SO INTERCHANGE THEM.   @Z40LB37*/
        /*                                                           */
        /*************************************************************/

        IF SRTELEM(SRTJ,SRTBEG:SRTEND) > SRTELEM(SRTJ+1,SRTBEG:SRTEND)
          THEN
            DO;                                            /*@Z40LB37*/
              SRTMOVE = SRTON;                             /*@Z40LB37*/
              SRTSAVE = SRTELEM(SRTJ);                     /*@Z40LB37*/
              SRTELEM(SRTJ) = SRTELEM(SRTJ+1);             /*@Z40LB37*/
              SRTELEM(SRTJ+1) = SRTSAVE;                   /*@Z40LB37*/
            END;                                           /*@Z40LB37*/
      END;                                                 /*@Z40LB37*/

      /***************************************************************/
      /*                                                             */
      /*  IF AN ELEMENT WAS INTERCHANGED THEN TURN SRTMOVE   @Z40LB37*/
      /*  SWITCH OFF.  IF NO INTERCHANGE WAS MADE TURN SORT  @Z40LB37*/
      /*  STOP SWITCH TO ON.                                 @Z40LB37*/
      /*                                                             */
      /***************************************************************/

      IF SRTMOVE = SRTON
        THEN
          SRTMOVE = SRTOFF;                                /*@Z40LB37*/
        ELSE
          SRTSTOP = SRTON;                                 /*@Z40LB37*/
    END SRTLOOP;                    /*END OF SRTLOOP TO SORT INTO AN */
                                    /*ASCENDING SEQUENCE     @Z40LB37*/

 @EJECT;                                                   /*@Z40LB37*/
    UDUMP (GDTTBL,'SOTO');          /*UDUMP EXIT             @Z40LB37*/

    RETURN CODE(SRTRC);             /*RETURN TO MAIN ROUTINE @Z40LB37*/

    END SORT;                       /*END OF AMS SORT ROUTINE -
                                      SORT                   @Z40LB37*/
