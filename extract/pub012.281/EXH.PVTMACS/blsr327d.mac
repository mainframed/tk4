         TITLE 'BLSR3270--BLSR327D--PRE-PROCESS CURSOR'
*** START OF SPECIFICATIONS********************************************
*                                                                     *
* $MAC(BLSR327D) COMP(SC132) PROD(JIP1329): PRE-PROCESS CURSOR        *
*                                                                     *
* COPYRIGHT= 5740-XYN, 5740-XYS COPYRIGHT IBM CORPORATION 1982.       *
*            LICENCED MATERIAL-PROGRAM PROPERTY OF IBM,               *
*            REFER TO COPYRIGHT INSTRUCTIONS FORM NUMBER G120-2083.   *
*                                                                     *
* FUNCTION= PRE-PROCESS CURSOR.                                       *
*                                                                     *
*   CHANGE ACTIVITY:                                                  *
* $L0= MVSIPCS,EIP1102,78001,DMGPKB: MVS IPCS INITIAL RELEASE CODE    *
* $D1= QUALITY,HIP2102,81225,DSDPRW: IMPROVE COMMENTS, REMARKS        *
*                                                                     *
***** END OF SPECIFICATIONS********************************************
         SPACE
BLSR327D BAL   RE,EA001400        DECOMPOSE CURSOR ADDR INTO ROW/COLM
         ALR   R5,R5              DOUBLE ROW ADDRESS TO GET YCON INDEX
         STM   R4,R5,WKACRPOS     SAVE INDICES FOR POST-PROCESS
         CH    R5,=H'10'          A ROLL/POINT OPERATION (IN DUMP
         BNL   LD000300           DATA DISPLAY AREA)
         LH    RF,YD000200(R5)
         B     BLSR327B(RF)       GO TO APPROPRIATE ROUTINE
YD000200 DC    Y(LD000800-BLSR327B) CURSOR ON ROW1
         DC    Y(LD000900-BLSR327B) CURSOR ON ROW2
         DC    Y(LA001000-BLSR327B) CURSOR ON ROW3
         DC    Y(LA001000-BLSR327B) CURSOR ON ROW4
         DC    Y(LA001000-BLSR327B) CURSOR ON ROW5
LD000300 SRL   R5,1               BACK TO A BYTE ROW INDEX
         LA    R6,15              WANT LOW ORDER 4 BITS
         N     R6,WKALNCTL-8(R5)   OF THIS LINE CONTROL BYTE
         LTR   RE,R6              A NULL AREA?
         LA    RF,LA001000        WHERE TO GO NEXT IF POINTING FAILS
         BZR   RF                 YES
         SLL   RE,2               DEVELOP WORD INDEX
         LA    R2,WKAVCTA-4(RE)   ADDRESS CONTROL ARRAY, CORRECT
*                                 TO ZERO ORIGIN ADDRESSING
         TM    WKAVFLAG-WKAVCTA(R2),WKAVCTAI IS THIS AREA ACTIVE?
         BOR   RF                 NO
         LR    R0,R5              SAVE PREVIOUS LINE NUMBER
         SH    R0,=H'5'           GO FROM '5' ORIGIN TO 0-ORIGIN IN
*                                 DUMP DATA DISPLAY AREA
         SH    R4,=H'8'           WAS 0:79,-->-8:71; TEST FOR ROLL
         BM    LD000400           CURSOR UNDER #ADDRES## FIELD
         SPACE
         SRDA  R4,32              PREPARE FOR DIVIDE - MAKE SIGN POS
         D     R4,=F'9'           DIVIDES COLUMN NUMBER
         LTR   R4,R4              IF REMAINDER ZERO, CURSOR WAS UNDER
*                                 A SEPARATOR BYTE -- TO BE IGNORED
         BZR   RF                 JUST CHECK HIS INPUT
         CLI   WKAVFMT-WKAVCTA(R2),C'C' IS THIS A CHARACTER DISPLAY
         BER   RF                 YES
         SPACE 2
*---------------------------------------------------------------------*
*        CURSOR IS BENEATH A HEX DUMP WORD--INDIRECT ADDRESS REQUEST  *
*---------------------------------------------------------------------*
         SPACE
*              R0 NOW HAS NUMBER FROM 0 - 18  (WAS 5-23 BEFORE)
         S     R0,WKALNCTV-4(RE) GET ROW DISPLACEMENT IN THIS AREA
         SLL   R0,5               BYTE DISPLACEMENT TO START OF ROW
         SLL   R5,2               BYTES TO INDENT
         ALR   R0,R5              DISPLACEMENT PAST STARTING ADDR
         L     R4,0(0,R2)         PICK UP CURRENT START THIS AREA
         N     R4,=X'FFFFFFE0'    JUST IN CASE WE INDENTED
         ALR   R0,R4              DUMP ADDR TO FETCH FROM
         CL    R0,0(0,R2)         WAS CURSOR PLACED BEFORE START OF
         BLR   RF                 INDENTED FIRST LINE'S DATA? - YES
         SPACE 2
*---------------------------------------------------------------------*
*        LOAD DATA FROM DUMP                                          *
*---------------------------------------------------------------------*
         SPACE
         L     R1,ZZ2P            ->ZZ2
         MVC   ZZ2AMDA(2,R1),WKAVASI-WKAVCTA(R2) SET UP ASID
         L     RF,ZZ2RVTP(0,R1)   ->RVT                            @D1A
         L     RF,RVTACCLP(0,RF)  ->BLSRACCL                       @D1C
         BALR  RE,RF              CALL BLSRACCL
         LTR   RF,RF              OK?
         BNZ   LA001000           NO
         LR    RF,R0              PUT 'REAL' ADDRESS IN REG WE CAN USE
         L     RF,0(0,RF)         ACCESS DATA FROM DUMP
         LA    RF,0(0,RF)         CLEAR HIGH ORDER BYTE
         ST    RF,ESAULAD         TEMP SAVE FOR NEW ADDRESS TO USE
         OI    FLAG1,FLAG1BLA+FLAG1ADR CAN'T ACCEPT MANUAL ADDR INPT
         B     LA001000
         SPACE 2
*---------------------------------------------------------------------*
*        PERFORM A ROLL OPERATION WITHIN THIS AREA                    *
*---------------------------------------------------------------------*
         SPACE
LD000400 LA    R6,C'A'-1(0,R6)    FORM CORRECT AREA-ID OF ROLL
         CLM   R6,B'0001',WKAAREA NEW AREA ID?
         BE    LD000500           NO
         STCM  R6,B'0001',WKAAREA SET NEW AREA ID
         OI    FLAG1,FLAG1ARE     DISPLAY NEW AREA ID
LD000500 S     R0,WKALNCTV-4(RE)  GET ROW OFFSET WITHIN AREA
         SLL   R0,5               GET BYTE OFFSET FROM START OF AREA
         CLI   WKAVFMT-WKAVCTA(R2),C'C' IN CHARACTER DISPLAY?
         BE    LD000700           YES
         AL    R0,0(0,R2)         ADD CURRENT START ADDRESS
         N     R0,=X'00FFFFE0'    ROUND DOWN TO 32-BYTE BDY
LD000600 ST    R0,ESAULAD         SAVE RESULT
         OI    FLAG1,FLAG1BLA+FLAG1ADR+FLAG1RLL
         B     LA001000           GO SEE WHAT ELSE HE DID
LD000700 ALR   R0,R0              DOUBLE BYTE OFFSET FOR CHAR ROLL
         AL    R0,0(0,R2)         ADD CURRENT START ADDRESS
         N     R0,=X'00FFFFC0'    ROUND DOWN TO 64-BYTE BDY
         B     LD000600
         SPACE 2
*              R5 HAS A ZERO IN IT
*              R4 HAS THE COLUM NUMBER, 0-79 DECIMAL
*                                 MUST CONVERT TO A COMMAND BRANCH
*                                 TABLE INDEX
LD000800 IC    R4,AD001000(R4)    TRANSLATE TO INDEX (0-24 MAX)
         ST    R4,WKACRPOS        OVERLAY SAVED COLUMN
         LH    RF,YD001100(R4)    INDEX TO ROUTINE
         B     BLSR327B(RF)       GO TO APPROPRIATE ROUTINE
LD000900 LA    RF,LA001000        WHERE TO GO WHEN DONE
         SH    R4,=H'3'           CAN'T USE ATTR, 'SK' FIELDS
         BMR   RF
         SRDA  R4,32              PUT COLUMN IN RIGHT REG FOR DIVIDE
         D     R4,=F'7'           (0-76 ---->0-10)
         LTR   R4,R4              CURSOR UNDER ATTRIBUTE BYTE?
         BZR   RF                 YES. AMBIGUOUS
         IC    R4,WKASKNUM        MAKE SURE HE WAS UNDER AN ACTIVE
         BCTR  R4,0               STACK POSITION - GO TO 0-ORIGIN
         CLR   R4,R5              AND CHECK MAX POSITION VS PTR POS
         BLR   RF                 MAX LESS THAN WHERE HE WAS, IGNORE
         ALR   R5,R5              DOUBLE POSITION TO FORM ASID INDEX
         LH    R0,WKASKASI(R5)    PICK UP ASID FOR THIS STACK ENTRY
         ST    R0,ESAUAS2         INTO UPDATE AREA
         OI    FLAG1,FLAG1ASI     MAKE SURE HE SEES THE CHANGE
         ALR   R5,R5              FORM INDEX TO 4-BYTE TABLE
         L     R0,WKASTACK(R5)    PICK UP CORRECT STACK ENTRY
         B     LD000600           AND PUT IT INTO INPUT AREA
         SPACE 2
AD001000 DC    1AL1(0)            ATTRIBUTE-IGNORE
         DC    4AL1(2)            3END
         DC    2AL1(0)            ATTRIBUTE OR BLANK - IGNORE
         DC    6AL1(4)            7<-SCR
         DC    6AL1(6)            OLL+>8
         DC    2AL1(0)            ATTRIBUTE OR BLANK - IGNORE
         DC    6AL1(8)            9STACK
         DC    2AL1(0)            ATTRIBUTE OR BLANK - IGNORE
         DC    6AL1(10)           10<-SK
         DC    6AL1(12)           IP+>11
         DC    39AL1(0)           MESSAGE-IGNORE
         SPACE 3
YD001100 DC    Y(LA001000-BLSR327B) ATTRIBUTE BLANK OR MESSAGE
         DC    Y(LD001500-BLSR327B) END
         DC    Y(LD001800-BLSR327B) -SCROLL
         DC    Y(LD001800-BLSR327B) +SCROLL
         DC    Y(LD001700-BLSR327B) STACK
         DC    Y(LD001800-BLSR327B) -SKIP
         DC    Y(LD001800-BLSR327B) +SKIP
         SPACE 2
*---------------------------------------------------------------------*
*                                                                     *
* PRE-PROCESS PF3 = END                                               *
*                                                                     *
*---------------------------------------------------------------------*
LD001500 MVC   WKACORDS+1(2),PREVCURS RESTORE OLD CURSOR POSITION
         B     LA005600           LEAVE WITHOUT REALLY CLEANING UP
         SPACE 2
*---------------------------------------------------------------------*
*                                                                     *
* PRE-PROCESS PF9 = STACK                                             *
*                                                                     *
*---------------------------------------------------------------------*
LD001700 MVC   WKACORDS+1(2),PREVCURS RESTORE OLD CURSOR POSITION
LD001800 OI    FLAG1,FLAG1BLA     SO THAT CURRENT CAN BE MOVED TO
         B     LA001000           THE STACK AFTER POSSIBLE PURGE
*                                 AND/OR ASID CHANGE.
