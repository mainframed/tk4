         MACRO
&LABEL   L$PACE &MF=I,&MSG=,&EXPMSG=,&DATA=,&SMF=,&UCB=,&F4DSCB=   @02C
         LCLC  &L         LOCAL LABEL VARIABLE
         LCLA  &NO        BRANCH INDEX NUMBER                      @L1M
         LCLB  &NFL1(8)   BITS TO 'AND' LSPACE FLAG1               @L1A
         LCLB  &OFL1(8)   BITS TO 'OR' LSPACE FLAG1                @L1A
         LCLA  &NMK1      USED TO RESET LSPACE FLAG1               @L1A
         LCLA  &OMK1      USED TO SET LSPACE FLAG1                 @L1A
         LCLB  &MFI       MF=I WAS SPECIFIED OR DEFAULTED
         LCLB  &MFE       MF=(E,..) WAS SPECIFIED
         LCLB  &MFL       MF=L WAS SPECIFIED
         LCLB  &MFLM      MF=(L,MSG) WAS SPECIFIED                 @L1A
.*
         LCLB  &MFLEM     MF=(L,EXPMSG) WAS SPECIFIED              @02A
.*
         LCLB  &MFLD      MF=(L,DATA) WAS SPECIFIED                @L1A
         LCLB  &MFD       MF=D WAS SPECIFIED                       @L1M
         LCLB  &MFDM      MF=(D,MSG) WAS SPECIFIED                 @L1A
.*
         LCLB  &MFDEM     MF=(D,EXPMSG) WAS SPECIFIED              @02A
.*
         LCLB  &MFDD      MF=(D,DATA) WAS SPECIFIED                @L1A
         LCLC  &SMFX      SMF VALUE FOR P.L. FLAG BYTE
         LCLB  &SMFN      SMF= WAS NOT SPECIFIED
         LCLB  &DATAA     DATA=ADDR WILL BE USED                   @L1M
         LCLB  &DATAR     DATA=(REG) WILL BE USED                  @L1M
         LCLB  &MSGA      MSG=ADDR WILL BE USED                    @L1A
         LCLB  &MSGR      MSG=(REG) WILL BE USED                   @L1A
.*
         LCLB  &EMSGA     EXPMSG=ADDR WILL BE USED                 @02A
         LCLB  &EMSGR     EXPMSG=(REG) WILL BE USED                @02A
.*
         LCLB  &FMT4A     F4DSCB=ADDR WILL BE USED                 @L1A
         LCLB  &FMT4R     F4DSCB=(REG) WILL BE USED                @L1A
         LCLB  &UCBA      UCB=ADDR WILL BE USED                    @L1A
         LCLB  &UCBR      UCB=(REG) WILL BE USED
         LCLB  &WARNSW    A WARNING ERROR WAS DETECTED
         LCLB  &ERRORSW   A MAJOR ERROR WAS DETECTED               @L1M
&NO      SETA  &SYSNDX                  SET BRANCH INDEX NUMBER
.*
.* ********************************************************************
.* *  VERIFICATION 1: MF PARAMETER
.* ********************************************************************
.*
.V1      AIF   ('&MF' EQ 'I').V1I       IF I FORM, BRANCH
         AIF   ('&MF'(1,2) EQ '(E').V1E IF E FORM, BRANCH
         AIF   ('&MF(1)' EQ 'L').V1L    IF L FORM, BRANCH          @L1C
         AIF   ('&MF(1)' NE 'D').V1ER1  IF NOT D FORM, ERROR       @L1C
.*                                                                 @L1A
&MFD     SETB  1                        SET MF=D SPECIFIED
         AIF   ('&MF' EQ 'D').V1X       IF MF=D, BRANCH            @L1C
         AIF   (N'&MF NE 2).V1ER1       IF NOT TWO PARMS, ERROR    @L1A
         AIF   ('&MF(2)' EQ 'MSG').V1DM IF MF=(D,MSG), BRANCH      @L1A
.*
         AIF   ('&MF(2)' EQ 'EXPMSG').V1DEM                        @02A
.*                                      IF MF=(D,EXPMSG), BRANCH   @02A
.*
         AIF   ('&MF(2)' NE 'DATA').V1ER1                          @L1A
.*                                      IF NOT MF=(D,DATA), ERROR  @L1A
&MFDD    SETB  1                        ELSE SET MF=(D,DATA) FOUND @L1A
         AGO   .V1X                       AND CONTINUE             @L1A
.V1DM    ANOP                                                      @L1A
.*
&MFDM    SETB  1                        SET MF=(D,MSG) FOUND       @L1A
.*
         AGO   .V1X                       AND CONTINUE             @02A
.*
.*                                                                 @02A
.V1DEM   ANOP                                                      @02A
&MFDEM   SETB  1                        SET MF=(D,EXPMSG) FOUND    @02A
.*
         AGO   .V1X                       AND CONTINUE             @L1A
.*                                                                 @L1A
.V1I     ANOP
&MFI     SETB  1                        SET MF=I SPECIFIED OR DEFAULTED
         AGO   .V1X                     AND CONTINUE
.*
.V1L     ANOP
&MFL     SETB  1                        SET MF=L SPECIFIED
         AIF   ('&MF' EQ 'L').V1X       IF NOT MF=L, BRANCH        @L1C
         AIF   (N'&MF NE 2).V1ER1       IF NOT TWO PARMS, ERROR    @L1A
         AIF   ('&MF(2)' EQ 'MSG').V1LM IF MF=(L,MSG), BRANCH      @L1A
.*
         AIF   ('&MF(2)' EQ 'EXPMSG').V1LEM                        @02A
.*                                      IF MF=(L,EXPMSG), BRANCH   @02A
.*
         AIF   ('&MF(2)' NE 'DATA').V1ER1                          @L1A
.*                                      IF NOT MF=(L,DATA), ERROR  @L1A
&MFLD    SETB  1                        ELSE SET MF=(L,DATA) FOUND @L1A
         AGO   .V1X                       AND CONTINUE             @L1A
.V1LM    ANOP                                                      @L1A
.*
&MFLM    SETB  1                        SET MF=(L,MSG) FOUND       @L1A
.*
         AGO   .V1X                       AND CONTINUE             @L1A
.*
.*                                                                 @02A
.V1LEM   ANOP                                                      @02A
&MFLEM   SETB  1                        SET MF=(L,EXPMSG) FOUND    @02A
         AGO   .V1X                       AND CONTINUE             @02A
.*                                                                 @02A
.*
.V1E     ANOP
&MFE     SETB  1                        SET MF=E SPECIFIED
         AIF   (N'&MF EQ 2).V1X         IF TWO PARMS ON MF, BRANCH
         AIF   (N'&MF EQ 1).V1ER2       IF ONE PARM, BRANCH, ERROR
.V1ER1   ANOP
         SPACE 1
         MNOTE 8,'*** INVALID OPERAND - MF=&MF'
         AGO   .V1ERX                   GO SET ERROR FLAG
.*
.V1ER2   ANOP
         SPACE 1
         MNOTE 8,'*** MF=(E,ADDR) FORM: SUPPLY PARAMETER LIST ADDRESS'
.V1ERX   ANOP
         SPACE 1
&ERRORSW SETB  1                        SET ERROR SWITCH ON
.V1X     ANOP
.*
.* ********************************************************************
.* *  V2: DATA= PARAMETER
.* ********************************************************************
.*
.V2      ANOP
&NFL1(3) SETB  ('&DATA' EQ '')          SET 'AND' BIT              @L1A
         AIF   ('&DATA' EQ '').V2X      IF DATA NOT GIVEN, BRANCH  @L1C
         AIF   (&MFD).V2NOTE            IF D FORM, BRANCH, WARNING
         AIF   (&MFLM OR &MFLD).V2NOTE  IF MF=(L,_), WARNING       @L1A
.*
         AIF   (&MFLEM).V2NOTE          IF MF=(L,_), WARNING MSG   @02A
.*
&OFL1(3) SETB  1                        DATA RETURN AREA SPECIFIED @L1A
         AIF   ('&DATA'(1,1) EQ '(').V2R IF DATA=(REG), BRANCH
&DATAA   SETB  1                        ELSE SET DATA=ADDR
         AGO   .V2X                       AND CONTINUE
.*
.V2R     AIF   (&MFL).V2NOTE            IF L FORM, BRANCH, WARNING
         AIF   (N'&DATA NE 1).V2ER1     IF NE ONE PARM, BRANCH, ERROR
&DATAR   SETB  1                        SET DATA=(REG)
         AGO   .V2X                     AND CONTINUE
.*
.V2ER1   ANOP
         SPACE 1
         MNOTE 8,'*** INVALID OPERAND - DATA=&DATA'
         SPACE 1
&ERRORSW SETB  1                        SET ERROR SWITCH ON
.V2NOTE  ANOP
&WARNSW  SETB  1                        SET WARNING SWITCH ON
.V2X     ANOP
.*
.* ********************************************************************
.* *  V3: SMF=   PARAMETER
.* ********************************************************************
.*
.V3      ANOP
&NFL1(1) SETB  ('&SMF' EQ '')           SET 'AND' BIT              @L1C
&NFL1(2) SETB  (&NFL1(1))               SET 'AND' BIT              @L1C
         AIF   ('&SMF' EQ '').V3X       IF SMF NOT GIVEN, BRANCH
         AIF   (&MFD).V3NOTE            IF D FORM, BRANCH, WARNING
         AIF   (&MFLM OR &MFLD).V3NOTE  IF MF=(L,_), WARNING       @L1A
.*
         AIF   (&MFLEM).V3NOTE          IF MF=(L,_), WARNING MSG   @02A
.*
         AIF   ('&SMF' EQ 'NONE').V3X   IF SMF=NONE, BRANCH        @L1C
         AIF   ('&SMF' EQ 'TEST').V3T   IF SMF=TEST, BRANCH
         AIF   ('&SMF' NE 'YES').V3ER1  IF NOT SMF=YES, BRANCH, ERROR
&OFL1(1) SETB  1                        ELSE SET SMF=YES SPECIFIED @L1C
         AGO   .V3X                       AND CONTINUE
.*
.V3T     ANOP
&OFL1(2) SETB  1                        SET SMF=TEST SPECIFIED     @L1A
.*                                                                3@L1D
         AGO   .V3X                       AND CONTINUE
.*
.V3ER1   ANOP
         SPACE 1
         MNOTE 8,'*** INVALID OPERAND - SMF=&SMF'
         SPACE 1
&ERRORSW SETB  1                        SET ERROR SWITCH ON
.V3NOTE  ANOP
&WARNSW  SETB  1                        SET WARNING SWITCH ON
.V3X     ANOP
.*
.* ********************************************************************
.* *  V4: UCB= PARAMETER
.* ********************************************************************
.*
.V4      AIF   ('&UCB' EQ '').V4N       IF UCB NOT GIVEN, BRANCH
         AIF   (&MFD OR &MFL).V4NOTE    IF D OR L FORM, GO SET WARNING
         AIF   ('&UCB'(1,1) NE '(').V4A IF UCB=ADDR, BRANCH        @L1C
         AIF   (N'&UCB NE 1).V4ER1      IF NE ONE PARM, BRANCH, ERROR
&UCBR    SETB   1                       ELSE SET UCB=(REG)
         AGO   .V4X                       AND CONTINUE
.*
.V4N     AIF   (&MFI).V4ER2             IF STANDARD FORM, BRANCH, ERROR
         AGO   .V4X                     ELSE, BRANCH, CONTINUE
.*
.V4A     ANOP                                                      @L1A
&UCBA    SETB   1                       SET UCB=ADDR               @L1A
         AGO   .V4X                     BRANCH, CONTINUE           @L1A
.*
.V4ER1   ANOP
         SPACE 1
         MNOTE 8,'*** INVALID OPERAND - UCB=&UCB'
         AGO   .V4ERX                   GO SET ERROR FLAG
.*
.V4ER2   ANOP
         SPACE 1
         MNOTE 8,'*** UCB IS A REQUIRED PARAMETER'
.V4ERX   ANOP
         SPACE 1
&ERRORSW SETB  1                        SET ERROR SWITCH ON
.V4NOTE  ANOP
&WARNSW  SETB  1                        SET WARNING SWITCH ON
.V4X     ANOP
.*
.* ********************************************************************
.* *  V5: MSG= PARAMETER
.* ********************************************************************
.*
.V5      ANOP                                                      @L1A
&NFL1(4) SETB  ('&MSG' EQ '')           SET 'AND' BIT              @02A
         AIF   ('&MSG' EQ '').V4XA      IF MSG NOT SPECIFIED, BR   @02C
&NFL1(3) SETB  0                        RESET 'AND' BIT            @L1A
&NFL1(5) SETB  0                        RESET 'AND' BIT            @02A
         AIF   (&OFL1(3)).V5ER2         IF DATA SPECIFIED, ERROR   @L1A
         AIF   (&MFD).V5NOTE            IF D FORM, WARNING         @L1A
         AIF   (&MFLM OR &MFLD).V5NOTE  IF MF=(L,_), WARNING       @L1A
.*
         AIF   (&MFLEM).V5NOTE          IF MF=(L,_), WARNING       @02A
&OFL1(4) SETB 1                         MESSAGE AREA SPECIFIED     @02A
.*
         AIF   ('&MSG'(1,1) EQ '(').V5R IF MSG=(REG), BRANCH       @L1A
&MSGA   SETB  1                         ELSE SET MSG=ADDR          @L1A
         AGO   .V4XA                      AND CONTINUE             @02C
.*                                                                 @L1A
.V5R     AIF   (&MFL).V5NOTE            IF L FORM, WARNING         @L1A
         AIF   (N'&MSG NE 1).V5ER1      IF NE ONE PARM, ERROR      @L1A
&MSGR    SETB 1                         SET MSG=(REG)              @L1A
         AGO   .V4XA                      AND CONTINUE             @02C
.*                                                                 @L1A
.V5ER1   ANOP                                                      @L1A
         SPACE 1                                                   @L1A
         MNOTE 8,'*** INVALID OPERAND - MSG=&MSG'                  @L1A
         SPACE 1                                                   @L1A
&ERRORSW SETB  1                        SET ERROR SWITCH ON        @L1A
         AGO   .V5NOTE                    AND CONTINUE             @L1A
.V5ER2   ANOP                                                      @L1A
         SPACE 1                                                   @L1A
         MNOTE 8,'*** DATA AND MSG KEYWORDS ARE MUTUALLY EXCLUSIVE'
         SPACE 1                                                   @L1A
&ERRORSW SETB  1                        SET ERROR SWITCH ON        @L1A
.V5NOTE  ANOP                                                      @L1A
&WARNSW  SETB  1                        SET WARNING SWITCH ON      @L1A
.V4XA    ANOP                                                      @02A
.*                                                                 @02A
.* *************************************************************** @02A
.* *  V5A: EXPMSG= PARAMETER                                       @02A
.* *************************************************************** @02A
.*                                                                 @02A
.V5A     ANOP                                                      @02A
&NFL1(5) SETB  ('&EXPMSG' EQ '')        SET 'AND' BIT              @02A
         AIF   ('&EXPMSG' EQ '').V5X    EXPMSG NOT SPECIFIED, BR   @02A
&NFL1(3) SETB  0                        RESET 'AND' BIT            @02A
&NFL1(4) SETB  0                        RESET 'AND' BIT            @02A
         AIF   (&OFL1(3)).V5AER2        IF DATA SPECIFIED, ERROR   @02A
         AIF   (&OFL1(4)).V5AER2        IF MSG SPECIFIED,  ERROR   @02A
         AIF   (&MFD).V5ANOTE           IF D FORM, WARNING         @02A
         AIF   (&MFLM OR &MFLD).V5ANOTE IF MF=(L,_), WARNING       @02A
         AIF   (&MFLEM).V5ANOTE         IF MF=(L,_), WARNING       @02A
.*
&OFL1(5) SETB 1                EXPANDED MESSAGE AREA SPECIFIED     @02A
.*
         AIF   ('&EXPMSG'(1,1) EQ '(').V5AR   EXPMSG=(REG), BRANCH @02A
&EMSGA  SETB  1                         ELSE SET EXPMSG=ADDR       @02A
         AGO   .V5X                       AND CONTINUE             @02A
.*                                                                 @02A
.V5AR    AIF   (&MFL).V5ANOTE           IF L FORM, WARNING         @02A
         AIF   (N'&EXPMSG NE 1).V5AER1  IF NE ONE PARM, ERROR      @02A
&EMSGR  SETB  1                         SET EXPMSG=(REG)           @02A
         AGO   .V5X                       AND CONTINUE             @02A
.*                                                                 @02A
.V5AER1  ANOP                                                      @02A
         SPACE 1                                                   @02A
         MNOTE 8,'*** INVALID OPERAND - MSG=&MSG'                  @02A
         SPACE 1                                                   @02A
&ERRORSW SETB  1                        SET ERROR SWITCH ON        @02A
         AGO   .V5ANOTE                   AND CONTINUE             @02A
.V5AER2  ANOP                                                      @02A
         SPACE 1                                                   @02A
         MNOTE 8,'*** DATA, MSG, AND EXPMSG ARE MUTUALLY EXCLUSIVE'@02A
         SPACE 1                                                   @02A
&ERRORSW SETB  1                        SET ERROR SWITCH ON        @02A
.V5ANOTE ANOP                                                      @02A
&WARNSW  SETB  1                        SET WARNING SWITCH ON      @02A
.*
.V5X     ANOP                                                      @L1A
.*
.* ********************************************************************
.* *  V6: F4DSCB= PARAMETER
.* ********************************************************************
.*
.V6      ANOP
         AIF   ('&F4DSCB' EQ '').V6X    IF F4DSCB=, BRANCH         @L1A
         AIF   (&MFD).V6NOTE            IF D FORM, WARNING         @L1A
         AIF   (&MFLM OR &MFLD).V6NOTE  IF MF=(L,_), WARNING       @L1A
.*
         AIF   (&MFLEM).V6NOTE          IF MF=(L,_), WARNING       @02A
.*
         AIF   ('&F4DSCB'(1,1) EQ '(').V6R IF F4DSCB=(REG), BRANCH @L1A
&FMT4A   SETB  1                        ELSE SET F4DSCB=ADDR       @L1A
         AGO   .V6X                       AND CONTINUE             @L1A
.*                                                                 @L1A
.V6R     AIF   (&MFL).V6NOTE            IF L FORM, WARNING         @L1A
         AIF   (N'&F4DSCB NE 1).V6ER1   IF NE ONE PARM, ERROR      @L1A
&FMT4R   SETB  1                        SET F4DSCB=(REG)           @L1A
         AGO   .V6X                       AND CONTINUE             @L1A
.*                                                                 @L1A
.V6ER1   ANOP                                                      @L1A
         SPACE 1                                                   @L1A
         MNOTE 8,'*** INVALID OPERAND - F4DSCB=&F4DSCB'            @L1A
         SPACE 1                                                   @L1A
&ERRORSW SETB  1                        SET ERROR SWITCH ON        @L1A
.V6NOTE  ANOP                                                      @L1A
&WARNSW  SETB  1                        SET WARNING SWITCH ON      @L1A
.V6X     ANOP                                                      @L1A
.*
.* ********************************************************************
.* *  CHECK ERRORS
.* ********************************************************************
.*
         AIF   (&ERRORSW EQ 0).CONT     IF NO MAJOR ERROR, BRANCH
&LABEL   DS    0F  *** INVALID OPERAND(S) FOUND IN MACRO EXPANSION.***
         AGO   .FINISH
.*
.CONT    AIF   (&WARNSW EQ 0).BLD       IF NO WARNING ERROR, BRANCH
         SPACE 1
     MNOTE 4,'*** ONE OR MORE PARAMETERS IGNORED DUE TO MF=&MF'
         SPACE 1
.BLD     ANOP
&NMK1    SETA  128*&NFL1(1)+64*&NFL1(2)+32*&NFL1(3)                @L1A
&NMK1    SETA  &NMK1+16*&NFL1(4)+8*&NFL1(5)                        @02A
.*
&OMK1    SETA  128*&OFL1(1)+64*&OFL1(2)+32*&OFL1(3)                @L1A
&OMK1    SETA  &OMK1+16*&OFL1(4)+8*&OFL1(5)                        @02A
.*
         AIF   (&MFI).I1                IF I FORM, BRANCH
         AIF   (&MFE).E1                IF E FORM, BRANCH
&L       SETC  '&LABEL'                 ELSE ASSUME A LABEL WAS GIVEN
         AIF   ('&L' NE '').TSTDL         IF A LABEL WAS GIVEN, BRANCH
&L       SETC  'LSPA&NO.S'                ELSE CONSTRUCT A LABEL
.TSTDL   AIF   (&MFD).D1                    IF D FORM, BRANCH
         AGO   .L1                          ELSE GO BUILD L FORM
.*
.* ********************************************************************
.* *  BEGIN BUILD FOR STANDARD FORM OF MACRO
.* ********************************************************************
.*
.I1      ANOP
&L       SETC  'LSPA&NO.S'              CONSTRUCT A LABEL FOR P.L.
         CNOP  0,4                      STANDARD FORM OF LSPACE MACRO
&LABEL   LA    1,&L                     R1 -> PARAMETER LIST       @01C
         B     LSPA&NO.E                BRANCH AROUND PARAMETER LST@01A
         AGO   .L2                      GO TO LIST FORM FOR PARM LIST
.L1      ANOP                           START P.L. FOR LIST FORM   @L1M
         DS    0F                                                  @L1M
         AIF   (&MFLD).LDATA            BUILD DATA LIST FORM       @L1A
         AIF   (&MFLM).LMSG             BUILD MSG LIST FORM        @L1A
.*
         AIF   (&MFLEM).ELMSG           BUILD EXPANDED LIST FORM   @02A
.*
.*
.* ********************************************************************
.* *  BEGIN BUILD FOR LIST FORM OF MACRO (PARAMETER LIST)
.* ********************************************************************
.*
.L2      ANOP                           START P.L. FOR STANDARD FORM
&L       DC    CL4'LSPA'                EBCDIC 'LSPA' FOR LSPACE
         DC    AL2(LSPA&NO.E-&L)        LENGTH OF PARAMETER LIST
         DC    AL1(&OMK1)               PARAMETER FLAG BYTE        @L1C
         DC    XL1'00'                  RESERVED                   @L1C
         DS    0F                       DIAGNOSTIC INFORMATION     @L1A
         DC    XL1'00'                  LSPACE RETURN CODE         @L1C
         DC    XL1'00'                  SUBFUNCTION ID             @L1A
         DC    XL1'00'                  SUBFUNCTION RETURN CODE    @L1A
         DC    XL1'00'                  SUBFUNCTION REASON CODE    @L1A
         DC    A(0)                     UCB ADDRESS                @L1C
.*
         AIF   (&DATAA).L3              IF DATA=ADDR, BRANCH
         AIF   (&MSGA).L4               IF MSG=ADDR, BRANCH        @L1A
         AIF   (&EMSGA).L4A
         DC    A(0)                     ADDR OF EXPMSG,MSG OR DATA @L1C
         AGO   .L5                      BRANCH AROUND              @L1C
.L3      ANOP
         DC    A(&DATA)                 ADDRESS OF DATA            @L1A
         AGO   .L5                      BRANCH AROUND              @L1A
.L4      ANOP
         DC    A(&MSG)                  ADDRESS OF MESSAGE         @L1A
         AGO   .L5                      BRANCH AROUND              @02A
.L4A     ANOP                                                      @02A
         DC    A(&EXPMSG)               ADDRESS OF EXPANDED MSG    @02A
.L5      ANOP                                                      @L1A
*                                         RETURN AREA (OR ZERO)    @L1C
.*
         AIF   (&FMT4A).L6              IF F4DSCB=ADDR, BRANCH     @L1A
         DC    A(0)                     ADDRESS OF FORMAT 4 DSCB   @L1A
         AGO   .L7                      BRANCH AROUND F4DSCB=ADDR  @L1A
.L6      ANOP                                                      @L1A
         DC    A(&F4DSCB)               ADDRESS OF FORMAT 4 DSCB   @L1A
.L7      ANOP                                                      @L1A
*                                         RETURN AREA (OR ZERO)    @L1A
.*
LSPA&NO.E EQU  *                        END OF PARAMETER LIST
         AIF   (&MFI).E4                IF MF=I, BRANCH            @L1C
         AGO   .FINISH                  ELSE LIST FORM IS DONE
.*
.* ********************************************************************
.* *  BEGIN BUILD FOR LIST FORM OF MACRO (DATA RETURN AREA)
.* ********************************************************************
.*
.LDATA   ANOP                           START OF DATA RETURN AREA  @L1A
&L       DC    XL1'00'                  RETURN AREA STATUS BYTE    @L1A
         DC    XL1'00'                  VOLUME STATUS BYTE         @L1A
         DC    XL2'00'                  RESERVED                   @L1A
         DC    F'0'                     NUMBER OF FREE EXTENTS     @L1A
         DC    F'0'                     TOTAL FREE CYLINDERS       @L1A
         DC    F'0'                     TOTAL ADDITIONAL FREE TRKS @L1A
         DC    F'0'                     NUMBER OF CYLINERS IN      @L1A
*                                        LARGEST FREE EXTENT       @L1A
         DC    F'0'                     NUMBER OF ADDL TRACKS IN   @L1A
*                                        LARGEST FREE EXTENT       @L1A
         DC    F'0'                     FORMAT 0 COUNT             @L1A
         DC    F'0'                     FREE VIR COUNT             @L1A
         DC    F'0'                     FRAGMENTATION INDEX        @L1A
         AGO   .FINISH                  LIST FORM IS DONE          @L1A
.*
.* ********************************************************************
.* *  BEGIN BUILD FOR LIST FORM OF MACRO (MESSAGE RETURN AREA)
.* ********************************************************************
.*
.LMSG    ANOP                           START OF MSG RETURN AREA   @L1A
&L       DC    CL30' '                  MESSAGE TEXT               @L1A
         AGO   .FINISH                  LIST FORM IS DONE          @L1A
.*
.*                                                                 @02A
.* ****************************************************************@02A
.* *  BEGIN BUILD FOR LIST FORM OF MACRO (EXPANDED MESSAGE AREA)   @02A
.* ****************************************************************@02A
.*                                                                 @02A
.ELMSG   ANOP                        START OF EXPMSG RETURN AREA   @02A
&L       DC    CL40' '               MESSAGE TEXT                  @02A
         AGO   .FINISH               LIST FORM IS DONE             @02A
.*
.*
.* ********************************************************************
.* *  BEGIN BUILD FOR EXECUTE FORM OF MACRO
.* ********************************************************************
.*
.E1      AIF   ('&LABEL' EQ '').E2      IF NO LABEL GIVEN, BRANCH
&LABEL   DS    0H
.E2      ANOP
         AIF   ('&MF(2)' EQ '(1)').E3   IF MF=(E,(1)), BRANCH      @L1A
         IHBINNRA &MF(2)                GET PARM LIST ADDR IN REG 1
.E3      ANOP                           START P.L. MOD FOR STD FORM
.*                                                                2@L2D
         NI    6(1),&NMK1               SET FLAGS OFF              @L1A
         AIF   (&OMK1 EQ 0).E4          IF NO FLAGS TO SET, BRANCH @L1A
         OI    6(1),&OMK1               SET FLAGS ON               @L1A
.*
.E4      ANOP                                                      @L1C
         AIF   (&UCBR).E5               IF UCB=(REG), BRANCH       @L1A
         AIF   (&UCBA EQ 0).E6          IF NOT UCB=ADDR, BRANCH    @L1A
         L     15,&UCB                  GET VALUE OF UCB=          @L1A
         ST    15,12(,1)                AND STORE IN PARM LIST     @L1A
         AGO   .E6                                                 @L1A
.E5      ANOP
         ST    &UCB(1),12(,1)           STORE UCB PTR IN PARM LIST @L1C
.*
.E6      ANOP                                                      @L1A
         AIF   (&DATAR).E7              IF DATA=(REG), BRANCH      @L1C
         AIF   (&MFI OR &DATAA EQ 0).E8 IF MF=I OR DATA=, BRANCH   @L1C
         LA    15,&DATA                 GET VALUE OF DATA=
         ST    15,16(,1)                AND STORE IN PARM LIST     @L1C
         AGO   .E8                      BRANCH AROUND DATA=(REG)   @L1C
.E7      ANOP                                                      @L1C
         ST    &DATA(1),16(,1)          STORE DATA VALUE IN P.L.   @L1C
.*
.E8      ANOP                                                      @L1A
         AIF   (&MSGR).E9               IF MSG=(REG), BRANCH       @L1A
         AIF   (&MFI OR &MSGA EQ 0).E8A IF MF=I OR MSG=, BRANCH    @02C
         LA    15,&MSG                  GET VALUE OF MSG=          @L1A
         ST    15,16(,1)                AND STORE IN PARM LIST     @L1A
         AGO   .E10                     BRANCH AROUND MSG=(REG)    @L1A
.E9      ANOP                                                      @L1A
         ST    &MSG(1),16(,1)           STORE MSG VALUE IN P.L.    @L1A
.*
.*
.*                                                                 @02A
.E8A     ANOP                                                      @02A
         AIF   (&EMSGR).E9A              IF EXPMSG=(REG), BRANCH   @02A
         AIF   (&MFI OR &EMSGA EQ 0).E10 IF MF=I OR EXPMSG=, BRANCH@02A
.*                                                                 @02A
         LA    15,&EXPMSG               GET VALUE OF EXPMSG=       @02A
         ST    15,16(,1)                AND STORE IN PARM LIST     @02A
         AGO   .E10                     BRANCH AROUND MSG=(REG)    @02A
.E9A     ANOP                                                      @02A
         ST    &EXPMSG(1),16(,1)        STORE EXPMSG VALUE IN P.L. @02A
.*                                                                 @02A
.*
.E10     ANOP                                                      @L1A
         AIF   (&FMT4R).E11             IF F4DSCB=(REG), BRANCH    @L1A
         AIF   (&MFI OR &FMT4A EQ 0).E12 IF MF=I OR DATA=, BRANCH  @L1A
         LA    15,&F4DSCB               GET VALUE OF F4DSCB=       @L1A
         ST    15,20(,1)                AND STORE IN PARM LIST     @L1A
         AGO   .E12                     BRANCH AROUND F4DSCB=(REG) @L1A
.E11     ANOP                                                      @L1A
         ST    &F4DSCB(1),20(,1)        STORE F4DSCB VALUE IN P.L. @L1A
.*
.E12     ANOP                                                      @L1A
         SLR   0,0                      INDENTIFY P.L. TO DADSM ENTRY
         SVC   78                       ISSUE THE LSPACE SVC
         AGO   .FINISH                  EXECUTE AND STANDARD FORMS DONE
.*
.* ********************************************************************
.* *  BEGIN BUILD FOR DSECTS
.* ********************************************************************
.*
.D1      ANOP                                                      @L1M
         AIF   (&MFDD).DDATA            IF MF=(D,DATA), BRANCH     @L1A
         AIF   (&MFDM).DMSG             IF MF=(D,MSG), BRANCH      @L1A
.*
         AIF   (&MFDEM).DEMSG           IF MF=(D,EXPMSG), BRANCH   @02A
.*
.*
.* ********************************************************************
.* *  BEGIN BUILD FOR DSECT FORM OF MACRO (PARAMETER LIST)
.* ********************************************************************
.*
&L       DSECT                          DSECT FOR PARAMETER LIST
LSPAPLID DS    CL4                      EBCDIC 'LSPA' FOR LSPACE
LSPANGTH DS    AL2                      LENGTH OF PARAMETER LIST
LSPAFLAG DS    XL1                      PARAMETER FLAG BYTE        @L1C
LSPASMFY EQU   X'80'                    BUILD SMF RECORD TYPE 19
LSPASMFT EQU   X'40'                    BUILD SMF RECORD TYPE 19   @L1C
*                                       IF SMF VOL INFO REQUESTED  @L1C
LSPADATA EQU   X'20'                    FREE SPACE DATA REQUEST    @L1A
*
LSPAMSG  EQU   X'10'                    MESSAGE DATA REQUESTED     @02A
LSPAEMSG EQU   X'08'                    EXPANDED MESSAGE DATA  REQ @02A
LSPARSVB EQU   X'07'                    RESERVED                   @02C
*
LSPARSVD DS    XL1                      RESERVED                   @L1C
LSPADIAG DS    0F                       DIAGNOSTIC INFORMATION     @L1A
LSPAERCD DS    XL1                      LSPACE RETURN CODE         @L1C
LSPASFID DS    XL1                      SUBFUNCTION ID             @L1A
LSPASF00 EQU   X'00'                    PROCESSING COMPLETE        @P1C
LSPASF01 EQU   X'01'                    VALIDATE PARAMETERS        @P1C
LSPASF02 EQU   X'02'                    CHECK UCB STATUS           @P1C
LSPASF03 EQU   X'03'                    ENQ ON SYSZDMNT            @P1C
LSPASF04 EQU   X'04'                    CAPTURE UCB                @L3A
*                                                                 2@L2D
LSPASF06 EQU   X'06'                    READ VOLUME LABEL          @P1C
LSPASF80 EQU   X'80'                    READ F4 DSCB & SPACE MAPS  @P1C
LSPASF81 EQU   X'81'                    GET FREE EXTENTS           @P1C
LSPASF82 EQU   X'82'                    GET F0 DSCB COUNT          @P1C
LSPASF83 EQU   X'83'                    GET VIR COUNT              @P1C
LSPASF84 EQU   X'84'                    CHECK FOR VRF DATA         @P1C
LSPASFRT DS    XL1                      SUBFUNCTION RETURN CODE    @L1A
LSPASFRS DS    XL1                      SUBFUNCTION REASON CODE    @L1A
LSPARS01 EQU   X'01'                    CHECK PARM LIST STORAGE KEY@L1A
LSPARS02 EQU   X'02'                    CHECK PARM LIST ID         @L1A
LSPARS03 EQU   X'03'                    CHECK LSPACE FLAG BYTE     @L1A
LSPARS04 EQU   X'04'                    CHECK AUTH FOR SMF FLAGS   @L1A
LSPARS05 EQU   X'05'                    CHECK MSG/DATA RETURN AREA @L1A
*                                         STORAGE KEY              @L1C
LSPARS06 EQU   X'06'                    CHECK F4 DSCB RETURN AREA  @L1A
*                                         STORAGE KEY              @L1C
LSPARS07 EQU   X'07'                    CHECK UCB ADDRESS          @L1A
LSPARS08 EQU   X'08'                    CHECK FOR VIRTUAL UCB ADDR @L1A
LSPARS09 EQU   X'09'                    CHECK FOR ZERO VTOC PTR    @L1A
LSPAUCB  DS    A                        UCB ADDRESS                @L1C
LSPAFRSP DS    A                        ADDRESS OF MESSAGE OR DATA @L1C
*                                         RETURN AREA              @L1C
LSPAFMT4 DS    A                        ADDRESS OF FORMAT 4 DSCB   @L1A
*                                         RETURN AREA              @L1A
LSPAEND  EQU   *                        END OF PARAMETER LIST
LSPALEN  EQU   LSPAEND-&L               LENGTH OF PARAMETER LIST
         AGO   .FINISH                                             @L1A
.*
.* ********************************************************************
.* *  BEGIN BUILD FOR DSECT FORM OF MACRO (DATA RETURN AREA)
.* ********************************************************************
.*
.DDATA   ANOP                                                      @L1A
&L       DSECT                          DSECT FOR DATA RETURN AREA @L1A
LSPDRETN DS    XL1                      RETURN AREA STATUS BYTE    @L1A
LSPDSPAC EQU   X'80'                    RETURNED SPACE INFORMATION @L1A
LSPDF0CN EQU   X'40'                    RETURNED F0 DSCB COUNT     @L1A
LSPDVRCN EQU   X'20'                    RETURNED FREE VIR COUNT    @L1A
LSPDRRES EQU   X'1F'                    RESERVED                   @L1A
LSPDSTAT DS    XL1                      VOLUME STATUS BYTE         @L1A
LSPDIXDS EQU   X'80'                    INDEX EXISTS FOR VTOC      @L1A
LSPDIXAC EQU   X'40'                    INDEX VTOC ACTIVE          @L1A
LSPDSRES EQU   X'2F'                    RESERVED                   @L1A
LSPDRSV1 DS    XL2                      RESERVED                   @L1A
LSPDNEXT DS    F                        NUMBER OF FREE EXTENTS     @L1A
LSPDTCYL DS    F                        TOTAL FREE CYLINDERS       @L1A
LSPDTTRK DS    F                        TOTAL ADDITIONAL FREE TRKS @L1A
LSPDLCYL DS    F                        NUMBER OF CYLINERS IN      @L1A
*                                        LARGEST FREE EXTENT       @L1A
LSPDLTRK DS    F                        NUMBER OF ADDL TRACKS IN   @L1A
*                                        LARGEST FREE EXTENT       @L1A
LSPDF0S  DS    F                        FORMAT 0 COUNT             @L1A
LSPDVIRS DS    F                        FREE VIR COUNT             @L1A
LSPDFRAG DS    F                        FRAGMENTATION INDEX        @L1A
         AGO   .FINISH                  LIST FORM IS DONE          @L1A
.*
.* ********************************************************************
.* *  BEGIN BUILD FOR DSECT FORM OF MACRO (MESSAGE RETURN AREA)
.* ********************************************************************
.*
.DMSG    ANOP                                                      @L1A
&L       DSECT                          DSECT FOR MSG RETURN AREA  @L1A
LSPMTEXT DS    CL30                     MESSAGE TEXT               @L1A
         AGO   .FINISH                  LIST FORM IS DONE          @02A
.*
.*                                                                 @02A
.* *************************************************************** @02A
.* *  BEGIN BUILD FOR DSECT FORM OF MACRO (MESSAGE RETURN AREA)    @02A
.* *************************************************************** @02A
.*                                                                 @02A
.DEMSG   ANOP                                                      @02A
&L       DSECT                       DSECT FOR EXPMSG RETURN AREA  @02A
LSPETEXT DS    CL40                  MESSAGE TEXT                  @02A
.*
.FINISH  ANOP
         MEND
