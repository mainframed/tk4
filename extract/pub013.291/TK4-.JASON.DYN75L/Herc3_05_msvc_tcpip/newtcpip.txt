The MVS3.8J TCP/IP Dynamic Instruction for Hercules (v3.05) : Wed 7th Jan 2009
------------------------------------------------------------------------------

These instruction are mainly for MSVC builds of Hercules, but will also help
with *nix versions too.  See the original documentation in dyn75.c for more
help with *nix/cygwin builds.  (For MSVC, I am using version 8.)

===============================================================================

In *nix use the following command to build the dynamic library (all on one line:
Ensure the dyn75.c and tcpip.c files are in the same directory as opcode.c.)

gcc -DHAVE_CONFIG_H -I. -fomit-frame-pointer -O3 -march=i686 -W -Wall -shared
-export-dynamic -o dyn75.so dyn75.c tcpip.c .libs/libherc.so .libs/libhercs.so

For Linux, I then copied the dyninst.la text file to dyn75.la and find/replaced
all instances of dyninst with dyn75.  This is the command file used by the os-
loader.  The files from RedHat8 are also included in the distribution package.

===============================================================================

For non dynamic use in *nix/cygwin (a modified hercules executable) read on too.

===============================================================================

Many enhancements have been made to Hercules over the years, which presents a
problem for my Dynamic TCP/IP instruction.  You see, the dynamic loader facility
in Hercules ensures the dynamic module you ask Hercules to load is compatible
with its internal data structures.  And with the new Hercules build options
even more issues can pop up, for example the optimisations allow for different
calling styles, at least 2: __stdcall and __fastcall in MSVC for the instructions
implemented.  The build files in MSVC also define compiler names that alter the
behaviour of the include files, and these are not available to correctly build
the dyn75 module.  And along with all the different platforms that can compile
and run Hercules, it is nearly impossible to provide a complete set of dynamic
modules that are "ready to go" for all versions/platforms of Hercules.

For this reason, I have updated the source code to the TCP/IP instruction so
it hopefully compiles properly on as many machines as Hercules does.  Since
I don't actually have all those machines to test it on, I can't guarantee it
will correctly produce a working dynamic library (or work as a static patch).

This document provides information on making it all work, and is how I produced
the MSVC version of dyn75.dll for Herc v3.05 which is supplied in this package.
(There are two MSVC versions, one for snapshots [cpu=8] and the other for 32.
HDL_DEPENDENCY (HERCULES); has been removed from the snapshot version also.)

It can also be used to create a modified Hercules (.exe) that has the instruction
built-in for cases where no dynamic loader is available.  In fact, the method I
am about to describe only has a few lines of code to change to do so...

The theory I have is, most of the work in getting Hercules on your machine and
running is already there and tested for us with the various makefiles that come
in the Hercules source package.  Once you have followed all the procedures, built
the Hercules executable and tested that it works properly (a good place to start)
then getting a dynamic module out of that build process should be easy.

I started by looking for all the places "opcode." exists in the build scripts:
(We can safely ignore any instances of opcode.h which we are not interested in.)

===============================================================================

The following .am/.in files are for *nix builds, which are used by configure:

Makefile.am contains 1 in "libherc_la_SOURCES" for "opcode.c"

Makefile.in contains 4 in:
1/ "am__libherc_la_SOURCES_DIST" for "opcode.c"
2/ "am_libherc_la_OBJECTS"       for "opcode.lo"
3/ "libherc_la_SOURCES"          for "opcode.c"
4/ "@AMDEP_TRUE@@am__include@"   for "opcode.Plo"

Po/POTFILES.in contains 1, in the <CR> separated list of files, for "opcode.c"

===============================================================================

The following .msvc file is for the MSVC build:

OBJ_CODE.msvc contains 1 in "hengine_OBJ" for "opcode.obj"

===============================================================================

For each instance, I either duplicated the line twice and replaced the word
"opcode" for "tcpip" and "dyn75" (the two new modules I want to build) or in
the case of: Makefile.in items 1 and 2, I just typed in the two extra items in
the "space separated" list of existing items adding ".c" and ".lo" as required.

===============================================================================

In the case of MSVC builds, an extra step is needed.  Because of a linker
constraint in MSVC, the new tcpip and dyn75 objects must be built without a
precompiled header, so in MODRULES1.msvc add these extra lines where it says:

"No precompiled headers for these ones.. Sorry!"

===============================================================================

$(O)dyn75.obj: dyn75.c
    $(cc) $(cdebug) $(cflags) $(cvarsdll) /Fo"$(OBJDIR)\\" /Fd"$(OBJDIR)\\" dyn75.c

$(O)tcpip.obj: tcpip.c
    $(cc) $(cdebug) $(cflags) $(cvarsdll) /Fo"$(OBJDIR)\\" /Fd"$(OBJDIR)\\" tcpip.c

===============================================================================

Place the two new source files that I have supplied (tcpip.c and dyn75.c) in the
same directory as opcode.c so the build script(s) can access them.

If you are using *nix, then "make clean" and rerun configure to rebuild the
makefiles before continuing.  Also for *nix, see the section about "if you
can't get it to work" and code changes "to be tidy" below.  *nix requires the
"tidy" up changes to prevent the new tcpip symbols from appearing in all other
dynamic modules.  This seems to be because the loader treats all linked modules
as a whole unlike windows which treats each module as its own single entity.

The make process should then be run again.

===============================================================================

Two new objects should be produced that are compatible as a dynamic module for
your version of Hercules.  For the MSVC build, the two objects were placed in:

"C:\hercules-3.05\msvc.dllmod.obj\"

(For *nix they appeared in my hercules-3.05 base directory.)

I ran the following commands to build the MSVC version of the dynamic module:

"C:\Program Files\Microsoft Visual Studio 8\VC\bin\vcvars32.bat"
link /DLL dyn75.obj tcpip.obj wsock32.lib hengine.lib

The output of the linker command gets called "dyn75.dll" by default.

Note:
hengine.lib is part of the standard Hercules build and contains two references
that are needed by the memory-access routines used by the TCP/IP instruction.

===============================================================================

Finally, if you can't get it to work you can change the line of code in opcode.c

===============================================================================

From:

 /*75*/   GENx___x___x___ ,

To:

 /*75*/   GENx370x390x900 (dyninst_opcode_75,RX,"TCPIP"),

===============================================================================

And add the following line after the #include "opcode.h" at the top of the file:

===============================================================================

DEF_INST(dyninst_opcode_75);

===============================================================================

Then the TCP/IP instruction will be built-in and you don't need to dynamically
load it.  This should work on any platform that Hercules works on.

===============================================================================

To be tidy when using this method, some more changes to dyn75.c should be made:

1/ Remove "DLL_EXPORT " from the "DEF_INST(dyninst_opcode_75) {" line of code,
2/ Remove the section from HDL_DEPENDENCY_SECTION; to END_REGISTER_SECTION;

This will prevent hengine.dll/libherc.so from exporting bogus dynamic entry points
that should never be used anyway.  In MSVC I don't think it's important...

An interesting side effect of leaving them in is hengine.dll can be used as
the dynamic TCP/IP module!  If you can't be bothered linking dyn75.dll this
works just as well:

===============================================================================

I replaced the line in my customised hercules .cnf file.
From:

ldmod dyninst dyn75

With: (Note: This is when using the original GENx___x___x___ for instruction 75)

ldmod dyninst hengine

===============================================================================

And it didn't have any problems using the new TCP/IP instruction at all.  There is
a comment in Hercules that dynamic modules are never unloaded, so this should be
safe to use, and reference counts in the host OS should stop it unloading anyway.

For *nix, this sort-of worked for me, but I think only because the standard dynamic
modules that come with Hercules do not use the register function of the dynamic
loader.  When lsmod is executed, all the modules showed the new tcpip instruction,
where the first one (my 3270 device) was referenced as in-use for TCP/IP!

===============================================================================

This is the .cnf line I used to load the "wrongly", but working packaged module:

ldmod dyninst libherc

Without a ldmod statement, all the dynamic device modules still showed the TCP/IP
reference, but the instruction was not in-use and TCP/IP was not "installed".

===============================================================================

Enjoy.
Jason Winter.
