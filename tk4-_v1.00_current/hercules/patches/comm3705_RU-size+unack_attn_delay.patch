--- old/comm3705.c	2012-12-02 10:54:16.000000000 +0100
+++ new/comm3705.c	2013-07-15 10:59:22.000000000 +0200
@@ -129,6 +129,8 @@
     {"rmtncpnm","%s"},
     {"idblk","%s"},
     {"idnum","%s"},
+    {"unitsz","%s"},
+    {"ackspeed","%s"},
     {NULL,NULL}
 };
 
@@ -150,7 +152,9 @@
     COMMADPT_KW_LOCNCPNM,
     COMMADPT_KW_RMTNCPNM,
     COMMADPT_KW_IDBLK,
-    COMMADPT_KW_IDNUM
+    COMMADPT_KW_IDNUM,
+    COMMADPT_KW_UNITSZ,
+    COMMADPT_KW_ACKSPEED
 } comm3705_kw;
 
 //////////////////////////////////////////////////////////////////////
@@ -1050,7 +1054,7 @@
         BYTE * areap;
         int i1;
         int numbufs = 64;
-        int bufsize = 256+16+4;
+        int bufsize = ca->unitsz+16+4;
         ca->poolarea = (BYTE*)calloc (numbufs, bufsize);
         if (!ca->poolarea) {
                 return;
@@ -1347,9 +1351,9 @@
                     break;
         /* read_socket has changed from 3.04 to 3.06 - we need old way */
 #ifdef _MSVC_
-          rc=recv(ca->sfd,bfr,256-BUFPD,0);
+          rc=recv(ca->sfd,bfr,ca->unitsz-BUFPD,0);
 #else
-          rc=read(ca->sfd,bfr,256-BUFPD);
+          rc=read(ca->sfd,bfr,ca->unitsz-BUFPD);
 #endif
         if (rc < 0) {
                     if(0
@@ -1383,6 +1387,7 @@
 {
     COMMADPT    *ca;            /* Work CA Control Block Pointer     */
     int devnum;                 /* device number copy for convenience*/
+    int delay;                  /* unacknowledged attention delay    */
     int rc;                     /* return code from various rtns     */
     char threadname[40];        /* string for WRMSG               */
 
@@ -1402,13 +1407,15 @@
 
     for (;;) {
         release_lock(&ca->lock);
-        usleep(50000 + (ca->unack_attn_count * 100000));
+        if(ca->ackspeed == 0) delay = 50000 + (ca->unack_attn_count * 100000);         /* Max's reliable algorithm      */
+        else delay = (ca->unack_attn_count * ca->unack_attn_count + 1) * ca->ackspeed; /* much faster but TCAM hates it */
+        usleep(min(1000000,delay));                                                    /* go to sleep, max. 1 second    */
         obtain_lock(&ca->lock);
                 make_sna_requests2(ca);
                 make_sna_requests3(ca);
                 if (ca->sendq
 // attempt to fix hot i/o bug
-                     && ca->unack_attn_count < 6
+                     && ca->unack_attn_count < 10
                 ) {
                     ca->unack_attn_count++;
                     rc = device_attention(ca->dev, CSW_ATTN);
@@ -1499,7 +1506,12 @@
         translate_to_ebcdic(dev->commadpt->rmtncpnm); /* convert to EBCDIC                      */
         dev->commadpt->idblk = 0x17;                  /* IDBLK of switched PU (default=0x017)   */
         dev->commadpt->idnum = 0x17;                  /* IDNUM of switched PU (default=0x00017) */
-
+        dev->commadpt->unitsz = 256;                  /* I/O blocksize (must equal RRT KEYLN)   */
+                                                      /* unitsz=256 is invalid for TCAM and     */
+                                                      /* instable for VTAM. Default retained    */
+                                                      /* for compatibility with previous        */
+                                                      /* versions only.                         */
+        dev->commadpt->ackspeed = 0;                  /* choose Max's original attn algorithm   */
         for(i=0;i<argc;i++)
         {
             pc=parser(ptab,argv[i],&res);
@@ -1574,6 +1586,12 @@
                 case COMMADPT_KW_IDNUM:
                         sscanf(res.text,"%5x",&dev->commadpt->idnum);
                     break;
+                case COMMADPT_KW_UNITSZ:
+                        dev->commadpt->unitsz = atoi(res.text);
+                    break;
+                case COMMADPT_KW_ACKSPEED:
+                        dev->commadpt->ackspeed = atoi(res.text);
+                    break;
                 default:
                     break;
             }
@@ -1583,7 +1601,7 @@
             WRMSG(HHC01014, "I",SSID_TO_LCSS(dev->ssid),dev->devnum);
             return -1;
         }
-        dev->bufsize=256;
+        dev->bufsize=dev->commadpt->unitsz;
         dev->numsense=2;
         memset(dev->sense,0,sizeof(dev->sense));
 
@@ -1818,7 +1836,9 @@
         // FIXME - max. ru_size should be based on BIND settings
     // A true fix would also require code changes to READ CCW processing
     // including possibly (gasp) segmenting long PIUs into multiple BTUs
-        ru_size = min(256-(BUFPD+10+3),ca->inpbufl);
+    // JW: still not fixed but unitsz is now an external parameter
+    //     to allow easier modification
+        ru_size = min(ca->unitsz-(BUFPD+10+3),ca->inpbufl);
         ru_ptr = &respbuf[13];
 
         if (!ca->bindflag) {
--- old/comm3705.h	2012-12-02 10:54:16.000000000 +0100
+++ new/comm3705.h	2013-07-15 10:59:22.000000000 +0200
@@ -58,7 +58,9 @@
     int lu_lu_seqn;
 
     BYTE inpbuf[65536];
-    int inpbufl;
+    int inpbufl,
+        unitsz,                 /* I/O blocksize (default=256)              */
+        ackspeed;               /* slow down factor for unacknowledged attn */
 
     void * freeq;
     void * sendq;
